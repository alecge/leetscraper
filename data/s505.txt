<div class="toc hide">

<a href="#solution">Solution</a>
<a href="#approach-1-brute-force-time-limit-exceeded">Approach #1 Brute Force [Time Limit Exceeded]</a></li>
<a href="#approach-2-simple-solutionaccepted">Approach #2 Simple Solution[Accepted]</a></li>
</ul>
</li>
</ul>
</div>
Solution</h2>

<h4 id="approach-1-brute-force-time-limit-exceeded">Approach #1 Brute Force [Time Limit Exceeded]</h4>
In the brute force approach we will generate all the possible <span class="maths katex-rendered">2</mn>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.664392em;"></span><span class="strut bottom" style="height: 0.664392em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight">n</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> subsequences of both the strings and store their number of occurences in a hashmap.
Longest subsequence whose frequency is equal to <span class="maths katex-rendered">1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span></span></span></span></span> will be the required subsequence.
And, if it is not found we will return <span class="maths katex-rendered">−</mo>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped">−</span><span class="mord mathrm">1</span></span></span></span></span>.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> int</span> findLUSlength</span>(</span>String</span> a</span>,</span> String</span> b</span>)</span> {</span>
        HashMap</span> &lt;</span> String</span>,</span> Integer</span> &gt;</span> map</span> =</span> new</span> HashMap</span> &lt;</span> &gt;</span> ();</span>
        for</span> (</span>String</span> s</span>:</span> new</span> String</span>[]</span> {</span>a</span>,</span> b</span>})</span> {</span>
            for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> (</span>1</span> &lt;&lt;</span> s</span>.</span>length</span>());</span> i</span>++)</span> {</span>
                String</span> t</span> =</span> ""</span>;</span>
                for</span> (</span>int</span> j</span> =</span> 0</span>;</span> j</span> &lt;</span> s</span>.</span>length</span>();</span> j</span>++)</span> {</span>
                    if</span> (((</span>i</span> &gt;&gt;</span> j</span>)</span> &amp;</span> 1</span>)</span> !=</span> 0</span>)</span>
                        t</span> +=</span> s</span>.</span>charAt</span>(</span>j</span>);</span>
                }</span>
                if</span> (</span>map</span>.</span>containsKey</span>(</span>t</span>))</span>
                    map</span>.</span>put</span>(</span>t</span>,</span> map</span>.</span>get</span>(</span>t</span>)</span> +</span> 1</span>);</span>
                else</span>
                    map</span>.</span>put</span>(</span>t</span>,</span> 1</span>);</span>
            }</span>
        }</span>
        int</span> res</span> =</span> -</span>1</span>;</span>
        for</span> (</span>String</span> s</span>:</span> map</span>.</span>keySet</span>())</span> {</span>
            if</span> (</span>map</span>.</span>get</span>(</span>s</span>)</span> ==</span> 1</span>)</span>
                res</span> =</span> Math</span>.</span>max</span>(</span>res</span>,</span> s</span>.</span>length</span>());</span>
        }</span>
        return</span> res</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>

Time complexity : <span class="maths katex-rendered">O</mi>(</mo>2</mn>x</mi></msup>+</mo>2</mn>y</mi></msup>)</mo></mrow><annotation encoding="application/x-tex">O(2^x+2^y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">2</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight">x</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>+</span><span class="mord mathrm">2</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight" style="margin-right: 0.03588em;">y</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>. where <span class="maths katex-rendered">x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span></span> and <span class="maths katex-rendered">y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">y</span></span></span></span></span> are the lengths of strings <span class="maths katex-rendered">a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span></span> and <span class="maths katex-rendered">b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">b</span></span></span></span></span> respectively . Number of subsequences will be <span class="maths katex-rendered">2</mn>x</mi></msup>+</mo>2</mn>y</mi></msup></mrow><annotation encoding="application/x-tex">2^x+2^y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.664392em;"></span><span class="strut bottom" style="height: 0.747722em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight">x</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>+</span><span class="mord mathrm">2</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight" style="margin-right: 0.03588em;">y</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>.</li>
Space complexity : <span class="maths katex-rendered">O</mi>(</mo>2</mn>x</mi></msup>+</mo>2</mn>y</mi></msup>)</mo></mrow><annotation encoding="application/x-tex">O(2^x+2^y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">2</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight">x</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>+</span><span class="mord mathrm">2</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight" style="margin-right: 0.03588em;">y</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>. <span class="maths katex-rendered">2</mn>x</mi></msup>+</mo>2</mn>y</mi></msup></mrow><annotation encoding="application/x-tex">2^x+2^y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.664392em;"></span><span class="strut bottom" style="height: 0.747722em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight">x</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>+</span><span class="mord mathrm">2</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight" style="margin-right: 0.03588em;">y</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> subsequences will be generated.</li>
</ul>

<h4 id="approach-2-simple-solutionaccepted">Approach #2 Simple Solution[Accepted]</h4>
Algorithm</strong></p>
Simple analysis of this problem can lead to an easy solution.</p>
These three cases are possible with string <span class="maths katex-rendered">a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span></span> and <span class="maths katex-rendered">b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">b</span></span></span></span></span>:-</p>



<span class="maths katex-rendered">a</mi>=</mo>b</mi></mrow><annotation encoding="application/x-tex">a=b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span>=</span><span class="mord mathit">b</span></span></span></span></span>. If both the strings are identical, it is obvious that no subsequence will be uncommon. Hence, return -1.</p>
</li>


<span class="maths katex-rendered">l</mi>e</mi>n</mi>g</mi>t</mi>h</mi>(</mo>a</mi>)</mo>=</mo>l</mi>e</mi>n</mi>g</mi>t</mi>h</mi>(</mo>b</mi>)</mo></mrow><annotation encoding="application/x-tex">length(a)=length(b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">t</span><span class="mord mathit">h</span>(</span><span class="mord mathit">a</span>)</span>=</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">t</span><span class="mord mathit">h</span>(</span><span class="mord mathit">b</span>)</span></span></span></span></span> and <span class="maths katex-rendered">a</mi>≠</mo>b</mi></mrow><annotation encoding="application/x-tex">a ne b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.716em;"></span><span class="strut bottom" style="height: 0.931em; vertical-align: -0.215em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span>≠</span><span class="mord mathit">b</span></span></span></span></span>. Example: <span class="maths katex-rendered">a</mi>b</mi>c</mi></mrow><annotation encoding="application/x-tex">abc</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mord mathit">b</span><span class="mord mathit">c</span></span></span></span></span> and <span class="maths katex-rendered">a</mi>b</mi>d</mi></mrow><annotation encoding="application/x-tex">abd</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mord mathit">b</span><span class="mord mathit">d</span></span></span></span></span>. In this case we can consider any string i.e. <span class="maths katex-rendered">a</mi>b</mi>c</mi></mrow><annotation encoding="application/x-tex">abc</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mord mathit">b</span><span class="mord mathit">c</span></span></span></span></span> or <span class="maths katex-rendered">a</mi>b</mi>d</mi></mrow><annotation encoding="application/x-tex">abd</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mord mathit">b</span><span class="mord mathit">d</span></span></span></span></span> as a required subsequence, as out of these two strings one string will never be a subsequence of other string. Hence, return <span class="maths katex-rendered">l</mi>e</mi>n</mi>g</mi>t</mi>h</mi>(</mo>a</mi>)</mo></mrow><annotation encoding="application/x-tex">length(a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">t</span><span class="mord mathit">h</span>(</span><span class="mord mathit">a</span>)</span></span></span></span></span> or <span class="maths katex-rendered">l</mi>e</mi>n</mi>g</mi>t</mi>h</mi>(</mo>b</mi>)</mo></mrow><annotation encoding="application/x-tex">length(b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">t</span><span class="mord mathit">h</span>(</span><span class="mord mathit">b</span>)</span></span></span></span></span>.</p>
</li>


<span class="maths katex-rendered">l</mi>e</mi>n</mi>g</mi>t</mi>h</mi>(</mo>a</mi>)</mo>≠</mo>l</mi>e</mi>n</mi>g</mi>t</mi>h</mi>(</mo>b</mi>)</mo></mrow><annotation encoding="application/x-tex">length(a) ne length(b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">t</span><span class="mord mathit">h</span>(</span><span class="mord mathit">a</span>)</span>≠</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">t</span><span class="mord mathit">h</span>(</span><span class="mord mathit">b</span>)</span></span></span></span></span>. Example <span class="maths katex-rendered">a</mi>b</mi>c</mi>d</mi></mrow><annotation encoding="application/x-tex">abcd</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mord mathit">b</span><span class="mord mathit">c</span><span class="mord mathit">d</span></span></span></span></span> and <span class="maths katex-rendered">a</mi>b</mi>c</mi></mrow><annotation encoding="application/x-tex">abc</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mord mathit">b</span><span class="mord mathit">c</span></span></span></span></span>. In this case we can consider bigger string as a required subsequence because bigger string can't be a subsequence of smaller string. Hence, return <span class="maths katex-rendered">m</mi>a</mi>x</mi>(</mo>l</mi>e</mi>n</mi>g</mi>t</mi>h</mi>(</mo>a</mi>)</mo>,</mo>l</mi>e</mi>n</mi>g</mi>t</mi>h</mi>(</mo>b</mi>)</mo>)</mo></mrow><annotation encoding="application/x-tex">max(length(a),length(b))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">x</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">t</span><span class="mord mathit">h</span>(</span><span class="mord mathit">a</span>)</span>,</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">t</span><span class="mord mathit">h</span>(</span><span class="mord mathit">b</span>)</span>)</span></span></span></span></span>.</p>
</li>
</ul>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> int</span> findLUSlength</span>(</span>String</span> a</span>,</span> String</span> b</span>)</span> {</span>
        if</span> (</span>a</span>.</span>equals</span>(</span>b</span>))</span>
            return</span> -</span>1</span>;</span>
        return</span> Math</span>.</span>max</span>(</span>a</span>.</span>length</span>(),</span> b</span>.</span>length</span>());</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>m</mi>i</mi>n</mi>(</mo>x</mi>,</mo>y</mi>)</mo>)</mo></mrow><annotation encoding="application/x-tex">O(min(x,y))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">n</span>(</span><span class="mord mathit">x</span>,</span><span class="mord mathit" style="margin-right: 0.03588em;">y</span>)</span>)</span></span></span></span></span>. where <span class="maths katex-rendered">x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span></span> and <span class="maths katex-rendered">y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">y</span></span></span></span></span> are the lengths of strings <span class="maths katex-rendered">a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span></span> and <span class="maths katex-rendered">b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">b</span></span></span></span></span> respectively. Here equals method will take <span class="maths katex-rendered">m</mi>i</mi>n</mi>(</mo>x</mi>,</mo>y</mi>)</mo></mrow><annotation encoding="application/x-tex">min(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">n</span>(</span><span class="mord mathit">x</span>,</span><span class="mord mathit" style="margin-right: 0.03588em;">y</span>)</span></span></span></span></span> time .</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. No extra space required.</p>
</li>
</ul>

Analysis written by: <a href="https://leetcode.com/vinod23">@vinod23</a></p>