<div class="toc hide">

<a href="#solution">Solution</a>
<a href="#approach-1-brute-force-accepted">Approach #1 Brute force [Accepted]</a></li>
<a href="#approach-2-dynamic-programming-accepted">Approach #2 Dynamic Programming [Accepted]</a></li>
<a href="#approach-3-using-stacks-accepted">Approach #3 Using stacks [Accepted]</a></li>
<a href="#approach-4-using-2-pointers-accepted">Approach #4 Using 2 pointers [Accepted]</a></li>
</ul>
</li>
</ul>
</div>
Solution</h2>

<h4 id="approach-1-brute-force-accepted">Approach #1 Brute force [Accepted]</h4>
Intuition</strong></p>
Do as directed in question. For each element in the array, we find the maximum level of water it can trap after the rain, which is equal to the minimum of maximum height of bars on both the sides minus its own height.</p>
Algorithm</strong></p>

Initialize <span class="maths katex-rendered">a</mi>n</mi>s</mi>=</mo>0</mn></mrow><annotation encoding="application/x-tex">ans=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mord mathit">n</span><span class="mord mathit">s</span>=</span><span class="mord mathrm">0</span></span></span></span></span>
</li>
Iterate the array from left to right:</li>
Initialize <span class="maths katex-rendered">text{max_left}=0</span><script type="math/tex">text{max_left}=0</script></span> and <span class="maths katex-rendered">(text{max_right}=0)</span>
</li>
Iterate from the current element to the beginning of array updating:
      <span class="maths katex-rendered">(text{max_left}=max(text{max_left},text{height}[j]))</span>
</li>
Iterate from the current element to the end of array updating:
      <span class="maths katex-rendered">(text{max_right}=max(text{max_right},text{height}[j]))</span>
</li>
Add <span class="maths katex-rendered">(min(text{max_left},text{max_right}) - text{height}[i])</span> to <span class="maths katex-rendered">a</mi>n</mi>s</mi></mtext></mrow><annotation encoding="application/x-tex">text{ans}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">ans</span></span></span></span></span></span>
</li>
</ul>
C++</strong></p>
</span>int</span> trap</span>(</span>vector</span>&lt;</span>int</span>&gt;&amp;</span> height</span>)</span>
{</span>
    int</span> ans</span> =</span> 0</span>;</span>
    int</span> size</span> =</span> height</span>.</span>size</span>();</span>
    for</span> (</span>int</span> i</span> =</span> 1</span>;</span> i</span> &lt;</span> size</span> -</span> 1</span>;</span> i</span>++</span>)</span> {</span>
        int</span> max_left</span> =</span> 0</span>,</span> max_right</span> =</span> 0</span>;</span>
        for</span> (</span>int</span> j</span> =</span> i</span>;</span> j</span> &gt;=</span> 0</span>;</span> j</span>--</span>)</span> {</span> //Search the left part for max bar size</span>
            max_left</span> =</span> max</span>(</span>max_left</span>,</span> height</span>[</span>j</span>]);</span>
        }</span>
        for</span> (</span>int</span> j</span> =</span> i</span>;</span> j</span> &lt;</span> size</span>;</span> j</span>++</span>)</span> {</span> //Search the right part for max bar size</span>
            max_right</span> =</span> max</span>(</span>max_right</span>,</span> height</span>[</span>j</span>]);</span>
        }</span>
        ans</span> +=</span> min</span>(</span>max_left</span>,</span> max_right</span>)</span> -</span> height</span>[</span>i</span>];</span>
    }</span>
    return</span> ans</span>;</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity: <span class="maths katex-rendered">O</mi>(</mo>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>. For each element of array, we iterate the left and right parts.</p>
</li>

Space complexity: <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span> extra space.</p>
</li>
</ul>

<h4 id="approach-2-dynamic-programming-accepted">Approach #2 Dynamic Programming [Accepted]</h4>
Intuition</strong></p>
In brute force, we iterate over the left and right parts again and again just to find the highest bar size upto that index. But, this could be stored. Voila, dynamic programming.</p>
The concept is illustrated as shown:</p>
<img alt="Dynamic programming" src="../Figures/42/trapping_rain_water.png" width="500px"></p>
Algorithm</strong></p>

Find maximum height of bar from the left end upto an index i in the array <span class="maths katex-rendered">(text{left_max})</span>.</li>
Find maximum height of bar from the right end upto an index i in the array <span class="maths katex-rendered">(text{right_max})</span>.</li>
Iterate over the <span class="maths katex-rendered">h</mi>e</mi>i</mi>g</mi>h</mi>t</mi></mtext></mrow><annotation encoding="application/x-tex">text{height}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">height</span></span></span></span></span></span> array and update ans:</li>
Add <span class="maths katex-rendered">(min(text{max_left}[i],text{max_right}[i]) - text{height}[i])</span> to <span class="maths katex-rendered">a</mi>n</mi>s</mi></mrow><annotation encoding="application/x-tex">ans</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mord mathit">n</span><span class="mord mathit">s</span></span></span></span></span>
</li>
</ul>
C++</strong></p>
</span>int</span> trap</span>(</span>vector</span>&lt;</span>int</span>&gt;&amp;</span> height</span>)</span>
{</span>
    if</span>(</span>height</span> ==</span> null</span>)</span>
        return</span> 0</span>;</span>
    int</span> ans</span> =</span> 0</span>;</span>
    int</span> size</span> =</span> height</span>.</span>size</span>();</span>
    vector</span>&lt;</span>int</span>&gt;</span> left_max</span>(</span>size</span>),</span> right_max</span>(</span>size</span>);</span>
    left_max</span>[</span>0</span>]</span> =</span> height</span>[</span>0</span>];</span>
    for</span> (</span>int</span> i</span> =</span> 1</span>;</span> i</span> &lt;</span> size</span>;</span> i</span>++</span>)</span> {</span>
        left_max</span>[</span>i</span>]</span> =</span> max</span>(</span>height</span>[</span>i</span>],</span> left_max</span>[</span>i</span> -</span> 1</span>]);</span>
    }</span>
    right_max</span>[</span>size</span> -</span> 1</span>]</span> =</span> height</span>[</span>size</span> -</span> 1</span>];</span>
    for</span> (</span>int</span> i</span> =</span> size</span> -</span> 2</span>;</span> i</span> &gt;=</span> 0</span>;</span> i</span>--</span>)</span> {</span>
        right_max</span>[</span>i</span>]</span> =</span> max</span>(</span>height</span>[</span>i</span>],</span> right_max</span>[</span>i</span> +</span> 1</span>]);</span>
    }</span>
    for</span> (</span>int</span> i</span> =</span> 1</span>;</span> i</span> &lt;</span> size</span> -</span> 1</span>;</span> i</span>++</span>)</span> {</span>
        ans</span> +=</span> min</span>(</span>left_max</span>[</span>i</span>],</span> right_max</span>[</span>i</span>])</span> -</span> height</span>[</span>i</span>];</span>
    }</span>
    return</span> ans</span>;</span>
}</span>
</pre></div>


Complexity analysis</strong></p>

Time complexity: <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>.</li>
We store the maximum heights upto a point using 2 iterations of O(n) each.</li>

We finally update <span class="maths katex-rendered">a</mi>n</mi>s</mi></mtext></mrow><annotation encoding="application/x-tex">text{ans}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">ans</span></span></span></span></span></span> using the stored values in O(n).</p>
</li>

Space complexity: <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> extra space.</p>
</li>
Additional <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> space for <span class="maths katex-rendered">(text{left_max})</span> and <span class="maths katex-rendered">(text{right_max})</span> arrays than in Approach #1.</li>
</ul>

<h4 id="approach-3-using-stacks-accepted">Approach #3 Using stacks [Accepted]</h4>
Intuition</strong></p>
Instead of storing the largest bar upto an index as in Approach #2, we can use stack to keep track of the bars that are bounded by longer bars and hence, may store water. Using the stack, we can do the calculations in only one iteration.</p>
We keep a stack and iterate over the array. We add the index of the bar to the stack if bar is smaller than or equal to the bar at top of stack, which means that the current bar is bounded by the previous bar in the stack. If we found a bar longer than that at the top, we are sure that the bar at the top of the stack is bounded by the current bar and a previous bar in the stack, hence, we can pop it and add resulting trapped water to <span class="maths katex-rendered">a</mi>n</mi>s</mi></mtext></mrow><annotation encoding="application/x-tex">text{ans}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">ans</span></span></span></span></span></span>.</p>
Algorithm</strong></p>

Use stack to store the indices of the bars.</li>
Iterate the array:
While stack is not empty and <span class="maths katex-rendered">h</mi>e</mi>i</mi>g</mi>h</mi>t</mi></mtext>[</mo>c</mi>u</mi>r</mi>r</mi>e</mi>n</mi>t</mi>]</mo>&gt;</mo>h</mi>e</mi>i</mi>g</mi>h</mi>t</mi></mtext>[</mo>s</mi>t</mi>.</mi>t</mi>o</mi>p</mi>(</mo>)</mo>]</mo></mrow><annotation encoding="application/x-tex">text{height}[current]&gt;text{height}[st.top()]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">height</span></span>[</span><span class="mord mathit">c</span><span class="mord mathit">u</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit">t</span>]</span>&gt;</span><span class="mord text textstyle uncramped"><span class="mord mathrm">height</span></span>[</span><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathrm">.</span><span class="mord mathit">t</span><span class="mord mathit">o</span><span class="mord mathit">p</span>(</span>)</span>]</span></span></span></span></span>

It means that the stack element can be popped. Pop the top element as <span class="maths katex-rendered">t</mi>o</mi>p</mi></mtext></mrow><annotation encoding="application/x-tex">text{top}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.80952em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">top</span></span></span></span></span></span>.</li>
Find the distance between the current element and the element at top of stack, which is to be filled.
<span class="maths katex-rendered">d</mi>i</mi>s</mi>t</mi>a</mi>n</mi>c</mi>e</mi></mtext>=</mo>c</mi>u</mi>r</mi>r</mi>e</mi>n</mi>t</mi></mtext>−</mo>s</mi>t</mi>.</mi>t</mi>o</mi>p</mi></mtext>(</mo>)</mo>−</mo>1</mn></mrow><annotation encoding="application/x-tex">text{distance} = text{current} - text{st.top}() - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">distance</span></span>=</span><span class="mord text textstyle uncramped"><span class="mord mathrm">current</span></span>−</span><span class="mord text textstyle uncramped"><span class="mord mathrm">st.top</span></span>(</span>)</span>−</span><span class="mord mathrm">1</span></span></span></span></span>
</li>
Find the bounded height
<span class="maths katex-rendered">(text{bounded_height} = min(text{height[current]}, text{height[st.top()]}) - text{height[top]})</span>
</li>
Add resulting trapped water to answer
<span class="maths katex-rendered">(text{ans} += text{distance} * text{bounded_height})</span>
</li>
</ul>
</li>
Push current index to top of the stack</li>
Move <span class="maths katex-rendered">c</mi>u</mi>r</mi>r</mi>e</mi>n</mi>t</mi></mtext></mrow><annotation encoding="application/x-tex">text{current}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">current</span></span></span></span></span></span> to the next position</li>
</ul>
</li>
</ul>
C++</strong></p>
</span>int</span> trap</span>(</span>vector</span>&lt;</span>int</span>&gt;&amp;</span> height</span>)</span>
{</span>
    int</span> ans</span> =</span> 0</span>,</span> current</span> =</span> 0</span>;</span>
    stack</span>&lt;</span>int</span>&gt;</span> st</span>;</span>
    while</span> (</span>current</span> &lt;</span> height</span>.</span>size</span>())</span> {</span>
        while</span> (</span>!</span>st</span>.</span>empty</span>()</span> &amp;&amp;</span> height</span>[</span>current</span>]</span> &gt;</span> height</span>[</span>st</span>.</span>top</span>()])</span> {</span>
            int</span> top</span> =</span> st</span>.</span>top</span>();</span>
            st</span>.</span>pop</span>();</span>
            if</span> (</span>st</span>.</span>empty</span>())</span>
                break</span>;</span>
            int</span> distance</span> =</span> current</span> -</span> st</span>.</span>top</span>()</span> -</span> 1</span>;</span>
            int</span> bounded_height</span> =</span> min</span>(</span>height</span>[</span>current</span>],</span> height</span>[</span>st</span>.</span>top</span>()])</span> -</span> height</span>[</span>top</span>];</span>
            ans</span> +=</span> distance</span> *</span> bounded_height</span>;</span>
        }</span>
        st</span>.</span>push</span>(</span>current</span>++</span>);</span>
    }</span>
    return</span> ans</span>;</span>
}</span>
</pre></div>


Complexity analysis</strong></p>

Time complexity: <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>.
Single iteration of <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> in which each bar can be touched at most twice(due to  insertion and deletion from stack) and insertion and deletion from stack takes <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span> time.</li>
</ul>
</li>
Space complexity: <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. Stack can take upto <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> space in case of stairs-like or flat structure.</li>
</ul>

<h4 id="approach-4-using-2-pointers-accepted">Approach #4 Using 2 pointers [Accepted]</h4>
Intuition</strong>
As in Approach #2, instead of computing the left and right parts seperately, we may think of some way to do it in one iteration.
From the figure in dynamic programming approach, notice that as long as <span class="maths katex-rendered">(text{right_max}[i]&gt;text{left_max}[i])</span>(from element 0 to 6), the water trapped depends upon the left_max, and similar is the case when <span class="maths katex-rendered">(text{left_max}[i]&gt;text{right_max}[i])</span>(from element 8 to 11).
So, we can say that if there is a larger bar at one end(say right), we are assured that the water trapped would be dependant on height of bar in current direction(from left to right). As soon as we find the bar at other end(right) is smaller, we start iterating in opposite direction(from right to left).
We must maintain <span class="maths katex-rendered">(text{left_max})</span> and <span class="maths katex-rendered">(text{right_max})</span> during the iteration, but now we can do it in one iteration using 2 pointers, switching between the two.</p>
Algorithm</strong></p>

Initialize <span class="maths katex-rendered">l</mi>e</mi>f</mi>t</mi></mtext></mrow><annotation encoding="application/x-tex">text{left}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">left</span></span></span></span></span></span> pointer to 0 and <span class="maths katex-rendered">r</mi>i</mi>g</mi>h</mi>t</mi></mtext></mrow><annotation encoding="application/x-tex">text{right}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">right</span></span></span></span></span></span> pointer to size-1</li>
While <span class="maths katex-rendered">l</mi>e</mi>f</mi>t</mi></mtext>&lt;</mo>r</mi>i</mi>g</mi>h</mi>t</mi></mtext></mrow><annotation encoding="application/x-tex">text{left}&lt; text{right}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">left</span></span>&lt;</span><span class="mord text textstyle uncramped"><span class="mord mathrm">right</span></span></span></span></span></span>, do:
If <span class="maths katex-rendered">h</mi>e</mi>i</mi>g</mi>h</mi>t</mi>[</mi>l</mi>e</mi>f</mi>t</mi>]</mi></mtext></mrow><annotation encoding="application/x-tex">text{height[left]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">height[left]</span></span></span></span></span></span> is smaller than <span class="maths katex-rendered">h</mi>e</mi>i</mi>g</mi>h</mi>t</mi>[</mi>r</mi>i</mi>g</mi>h</mi>t</mi>]</mi></mtext></mrow><annotation encoding="application/x-tex">text{height[right]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">height[right]</span></span></span></span></span></span>

If <span class="maths katex-rendered">(text{height[left]}&gt;=text{left_max})</span>, update <span class="maths katex-rendered">(text{left_max})</span>
</li>
Else add <span class="maths katex-rendered">(text{left_max}-text{height[left]})</span> to <span class="maths katex-rendered">a</mi>n</mi>s</mi></mtext></mrow><annotation encoding="application/x-tex">text{ans}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">ans</span></span></span></span></span></span>
</li>
Add 1 to <span class="maths katex-rendered">l</mi>e</mi>f</mi>t</mi></mtext></mrow><annotation encoding="application/x-tex">text{left}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">left</span></span></span></span></span></span>.</li>
</ul>
</li>
Else
If <span class="maths katex-rendered">(text{height[right]}&gt;=text{right_max})</span>, update <span class="maths katex-rendered">(text{right_max})</span>
</li>
Else add <span class="maths katex-rendered">(text{right_max}-text{height[right]})</span> to <span class="maths katex-rendered">a</mi>n</mi>s</mi></mtext></mrow><annotation encoding="application/x-tex">text{ans}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">ans</span></span></span></span></span></span>
</li>
Subtract 1 from <span class="maths katex-rendered">r</mi>i</mi>g</mi>h</mi>t</mi></mtext></mrow><annotation encoding="application/x-tex">text{right}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">right</span></span></span></span></span></span>.</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="diaporama" style="width: 940px; height: 622px;"><div class="initial-play play-container"><div class="fa fa-play"></div></div><canvas width="940" height="622" style="width: 940px; height: 622px;"></canvas></div><div class="control-panel" style="width: 940px;"><div class="control-group dia-back fa fa-step-backward"></div><div class="toggle-play control-group fa fa-play"></div><div class="control-group fa fa-step-forward"></div></div>1 / 11</div></div></div>
C++</strong></p>
</span>int</span> trap</span>(</span>vector</span>&lt;</span>int</span>&gt;&amp;</span> height</span>)</span>
{</span>
    int</span> left</span> =</span> 0</span>,</span> right</span> =</span> height</span>.</span>size</span>()</span> -</span> 1</span>;</span>
    int</span> ans</span> =</span> 0</span>;</span>
    int</span> left_max</span> =</span> 0</span>,</span> right_max</span> =</span> 0</span>;</span>
    while</span> (</span>left</span> &lt;</span> right</span>)</span> {</span>
        if</span> (</span>height</span>[</span>left</span>]</span> &lt;</span> height</span>[</span>right</span>])</span> {</span>
            height</span>[</span>left</span>]</span> &gt;=</span> left_max</span> ?</span> (</span>left_max</span> =</span> height</span>[</span>left</span>])</span> :</span> ans</span> +=</span> (</span>left_max</span> -</span> height</span>[</span>left</span>]);</span>
            ++</span>left</span>;</span>
        }</span>
        else</span> {</span>
            height</span>[</span>right</span>]</span> &gt;=</span> right_max</span> ?</span> (</span>right_max</span> =</span> height</span>[</span>right</span>])</span> :</span> ans</span> +=</span> (</span>right_max</span> -</span> height</span>[</span>right</span>]);</span>
            --</span>right</span>;</span>
        }</span>
    }</span>
    return</span> ans</span>;</span>
}</span>
</pre></div>


Complexity analysis</strong></p>

Time complexity: <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. Single iteration of <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>.</li>
Space complexity: <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span> extra space. Only constant space required for <span class="maths katex-rendered">l</mi>e</mi>f</mi>t</mi></mtext></mrow><annotation encoding="application/x-tex">text{left}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">left</span></span></span></span></span></span>, <span class="maths katex-rendered">r</mi>i</mi>g</mi>h</mi>t</mi></mtext></mrow><annotation encoding="application/x-tex">text{right}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">right</span></span></span></span></span></span>, <span class="maths katex-rendered">(text{left_max})</span> and <span class="maths katex-rendered">(text{right_max})</span>.</li>
</ul>

Analysis written by <a href="https://leetcode.com/abhinavbansal0">@abhinavbansal0</a>.</p>