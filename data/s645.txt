<div class="toc hide">

<a href="#solution">Solution</a>
<a href="#approach-1-brute-force-accepted">Approach #1: Brute Force [Accepted]</a></li>
<a href="#approach-2-greedy-accepted">Approach #2: Greedy [Accepted]</a></li>
</ul>
</li>
</ul>
</div>
Solution</h2>

<h4 id="approach-1-brute-force-accepted">Approach #1: Brute Force [Accepted]</h4>
Intuition</strong></p>
The number only has at most 8 digits, so there are only <span class="maths katex-rendered"></mrow>8</mn></mrow></msup>C</mi></mtext>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">{}^{8}text{C}_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.964108em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord textstyle uncramped"></span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathrm mtight">8</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord text textstyle uncramped"><span class="mord mathrm">C</span></span><span class="" style="top: 0.15em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> = 28 available swaps.  We can easily brute force them all.</p>
Algorithm</strong></p>
We will store the candidates as lists of length <span class="maths katex-rendered">l</mi>e</mi>n</mi>(</mi>n</mi>u</mi>m</mi>)</mi></mtext></mrow><annotation encoding="application/x-tex">text{len(num)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">len(num)</span></span></span></span></span></span>.  For each candidate swap with positions <span class="maths katex-rendered">(</mi>i</mi>,</mi>&nbsp;</mtext>j</mi>)</mi></mtext></mrow><annotation encoding="application/x-tex">text{(i, j)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">(i,&nbsp;j)</span></span></span></span></span></span>, we swap the number and record if the candidate is larger than the current answer, then swap back to restore the original number.</p>
The only detail is possibly to check that we didn't introduce a leading zero.  We don't actually need to check it, because our original number doesn't have one.</p>
Java</strong></p>
</span>class</span> Solution</span> {</span>
    public</span> int</span> maximumSwap</span>(</span>int</span> num</span>)</span> {</span>
        char</span>[]</span> A</span> =</span> Integer</span>.</span>toString</span>(</span>num</span>).</span>toCharArray</span>();</span>
        char</span>[]</span> ans</span> =</span> Arrays</span>.</span>copyOf</span>(</span>A</span>,</span> A</span>.</span>length</span>);</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> A</span>.</span>length</span>;</span> i</span>++)</span> {</span>
            for</span> (</span>int</span> j</span> =</span> i</span>+</span>1</span>;</span> j</span> &lt;</span> A</span>.</span>length</span>;</span> j</span>++)</span> {</span>
                char</span> tmp</span> =</span> A</span>[</span>i</span>];</span>
                A</span>[</span>i</span>]</span> =</span> A</span>[</span>j</span>];</span>
                A</span>[</span>j</span>]</span> =</span> tmp</span>;</span>
                for</span> (</span>int</span> k</span> =</span> 0</span>;</span> k</span> &lt;</span> A</span>.</span>length</span>;</span> k</span>++){</span>
                    if</span> (</span>A</span>[</span>k</span>]</span> !=</span> ans</span>[</span>k</span>]){</span>
                        if</span> (</span>A</span>[</span>k</span>]</span> &gt;</span> ans</span>[</span>k</span>])</span> {</span>
                            ans</span> =</span> Arrays</span>.</span>copyOf</span>(</span>A</span>,</span> A</span>.</span>length</span>);</span>
                        }</span>
                        break</span>;</span>
                    }</span>
                }</span>
                A</span>[</span>j</span>]</span> =</span> A</span>[</span>i</span>];</span>
                A</span>[</span>i</span>]</span> =</span> tmp</span>;</span>
            }</span>
        }</span>
        return</span> Integer</span>.</span>valueOf</span>(</span>new</span> String</span>(</span>ans</span>));</span>
    }</span>
}</span>
</pre></div>


Python</strong></p>
</span>def</span> maximumSwap</span>(</span>self</span>,</span> num</span>):</span>
    A</span> =</span> list</span>(</span>str</span>(</span>num</span>))</span>
    ans</span> =</span> A</span>[:]</span>
    for</span> i</span> in</span> range</span>(</span>len</span>(</span>A</span>)):</span>
        for</span> j</span> in</span> range</span>(</span>i</span>+</span>1</span>,</span> len</span>(</span>A</span>)):</span>
            A</span>[</span>i</span>],</span> A</span>[</span>j</span>]</span> =</span> A</span>[</span>j</span>],</span> A</span>[</span>i</span>]</span>
            if</span> A</span> &gt;</span> ans</span>:</span> ans</span> =</span> A</span>[:]</span>
            A</span>[</span>i</span>],</span> A</span>[</span>j</span>]</span> =</span> A</span>[</span>j</span>],</span> A</span>[</span>i</span>]</span>

    return</span> int</span>(</span>""</span>.</span>join</span>(</span>ans</span>))</span>
</pre></div>


Complexity Analysis</strong></p>


Time Complexity:  <span class="maths katex-rendered">O</mi>(</mo>N</mi>3</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(N^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>, where <span class="maths katex-rendered">N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.68333em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10903em;">N</span></span></span></span></span> is the total number of digits in the input number.  For each pair of digits, we spend up to <span class="maths katex-rendered">O</mi>(</mo>N</mi>)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>)</span></span></span></span></span> time to compare the final sequences.</p>
</li>

Space Complexity: <span class="maths katex-rendered">O</mi>(</mo>N</mi>)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>)</span></span></span></span></span>, the information stored in <span class="maths katex-rendered">A</mi></mtext></mrow><annotation encoding="application/x-tex">text{A}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.68333em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">A</span></span></span></span></span></span>.</p>
</li>
</ul>

<h4 id="approach-2-greedy-accepted">Approach #2: Greedy [Accepted]</h4>
Intuition</strong></p>
At each digit of the input number in order, if there is a larger digit that occurs later, we know that the best swap must occur with the digit we are currently considering.</p>
Algorithm</strong></p>
We will compute <span class="maths katex-rendered">l</mi>a</mi>s</mi>t</mi>[</mi>d</mi>]</mi>&nbsp;</mtext>=</mi>&nbsp;</mtext>i</mi></mtext></mrow><annotation encoding="application/x-tex">text{last[d] = i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">last[d]&nbsp;=&nbsp;i</span></span></span></span></span></span>, the index <span class="maths katex-rendered">i</mi></mtext></mrow><annotation encoding="application/x-tex">text{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.66786em;"></span><span class="strut bottom" style="height: 0.66786em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">i</span></span></span></span></span></span> of the last occurrence of digit <span class="maths katex-rendered">d</mi></mtext></mrow><annotation encoding="application/x-tex">text{d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">d</span></span></span></span></span></span> (if it exists).</p>
Afterwards, when scanning the number from left to right, if there is a larger digit in the future, we will swap it with the largest such digit; if there are multiple such digits, we will swap it with the one that occurs the latest.</p>
Java</strong></p>
</span>class</span> Solution</span> {</span>
    public</span> int</span> maximumSwap</span>(</span>int</span> num</span>)</span> {</span>
        char</span>[]</span> A</span> =</span> Integer</span>.</span>toString</span>(</span>num</span>).</span>toCharArray</span>();</span>
        int</span>[]</span> last</span> =</span> new</span> int</span>[</span>10</span>];</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> A</span>.</span>length</span>;</span> i</span>++)</span> {</span>
            last</span>[</span>A</span>[</span>i</span>]</span> -</span> '0'</span>]</span> =</span> i</span>;</span>
        }</span>

        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> A</span>.</span>length</span>;</span> i</span>++)</span> {</span>
            for</span> (</span>int</span> d</span> =</span> 9</span>;</span> d</span> &gt;</span> A</span>[</span>i</span>]</span> -</span> '0'</span>;</span> d</span>--)</span> {</span>
                if</span> (</span>last</span>[</span>d</span>]</span> &gt;</span> i</span>)</span> {</span>
                    char</span> tmp</span> =</span> A</span>[</span>i</span>];</span>
                    A</span>[</span>i</span>]</span> =</span> A</span>[</span>last</span>[</span>d</span>]];</span>
                    A</span>[</span>last</span>[</span>d</span>]]</span> =</span> tmp</span>;</span>
                    return</span> Integer</span>.</span>valueOf</span>(</span>new</span> String</span>(</span>A</span>));</span>
                }</span>
            }</span>
        }</span>
        return</span> num</span>;</span>
    }</span>
}</span>
</pre></div>


Python</strong></p>
</span>class</span> Solution</span>(</span>object</span>):</span>
    def</span> maximumSwap</span>(</span>self</span>,</span> num</span>):</span>
        A</span> =</span> map</span>(</span>int</span>,</span> str</span>(</span>num</span>))</span>
        last</span> =</span> {</span>x</span>:</span> i</span> for</span> i</span>,</span> x</span> in</span> enumerate</span>(</span>A</span>)}</span>
        for</span> i</span>,</span> x</span> in</span> enumerate</span>(</span>A</span>):</span>
            for</span> d</span> in</span> xrange</span>(</span>9</span>,</span> x</span>,</span> -</span>1</span>):</span>
                if</span> last</span>.</span>get</span>(</span>d</span>,</span> None</span>)</span> &gt;</span> i</span>:</span>
                    A</span>[</span>i</span>],</span> A</span>[</span>last</span>[</span>d</span>]]</span> =</span> A</span>[</span>last</span>[</span>d</span>]],</span> A</span>[</span>i</span>]</span>
                    return</span> int</span>(</span>""</span>.</span>join</span>(</span>map</span>(</span>str</span>,</span> A</span>)))</span>
        return</span> num</span>
</pre></div>


Complexity Analysis</strong></p>


Time Complexity:  <span class="maths katex-rendered">O</mi>(</mo>N</mi>)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>)</span></span></span></span></span>, where <span class="maths katex-rendered">N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.68333em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10903em;">N</span></span></span></span></span> is the total number of digits in the input number.  Every digit is considered at most once.</p>
</li>

Space Complexity: <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>.  The additional space used by <span class="maths katex-rendered">l</mi>a</mi>s</mi>t</mi></mtext></mrow><annotation encoding="application/x-tex">text{last}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">last</span></span></span></span></span></span> only has up to 10 values.</p>
</li>
</ul>

Analysis written by: <a href="https://leetcode.com/awice">@awice</a></p>