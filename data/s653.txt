<div class="toc hide">

<a href="#approach-1-brute-force-time-limit-exceeded">Approach #1: Brute Force [Time Limit Exceeded]</a></li>
<a href="#approach-2-dynamic-programming-accepted">Approach #2: Dynamic Programming [Accepted]</a></li>
<a href="#approach-3-greedy-accepted">Approach #3: Greedy [Accepted]</a></li>
</ul>
</div>
<h4 id="approach-1-brute-force-time-limit-exceeded">Approach #1: Brute Force [Time Limit Exceeded]</h4>
Intuition and Algorithm</strong></p>
For each asterisk, let's try both possibilities.</p>
Python</strong></p>
</span>class</span> Solution</span>(</span>object</span>):</span>
    def</span> checkValidString</span>(</span>self</span>,</span> s</span>):</span>
        if</span> not</span> s</span>:</span> return</span> True</span>
        A</span> =</span> list</span>(</span>s</span>)</span>
        self</span>.</span>ans</span> =</span> False</span>

        def</span> solve</span>(</span>i</span>):</span>
            if</span> i</span> ==</span> len</span>(</span>A</span>):</span>
                self</span>.</span>ans</span> |=</span> valid</span>()</span>
            elif</span> A</span>[</span>i</span>]</span> ==</span> '*'</span>:</span>
                for</span> c</span> in</span> '() '</span>:</span>
                    A</span>[</span>i</span>]</span> =</span> c</span>
                    solve</span>(</span>i</span>+</span>1</span>)</span>
                    if</span> self</span>.</span>ans</span>:</span> return</span>
                A</span>[</span>i</span>]</span> =</span> '*'</span>
            else</span>:</span>
                solve</span>(</span>i</span>+</span>1</span>)</span>

        def</span> valid</span>():</span>
            bal</span> =</span> 0</span>
            for</span> x</span> in</span> A</span>:</span>
                if</span> x</span> ==</span> '('</span>:</span> bal</span> +=</span> 1</span>
                if</span> x</span> ==</span> ')'</span>:</span> bal</span> -=</span> 1</span>
                if</span> bal</span> &lt;</span> 0</span>:</span> break</span>
            return</span> bal</span> ==</span> 0</span>

        solve</span>(</span>0</span>)</span>
        return</span> self</span>.</span>ans</span>
</pre></div>


Java</strong></p>
</span>class</span> Solution</span> {</span>
    boolean</span> ans</span> =</span> false</span>;</span>

    public</span> boolean</span> checkValidString</span>(</span>String</span> s</span>)</span> {</span>
        solve</span>(</span>new</span> StringBuilder</span>(</span>s</span>),</span> 0</span>);</span>
        return</span> ans</span>;</span>
    }</span>

    public</span> void</span> solve</span>(</span>StringBuilder</span> sb</span>,</span> int</span> i</span>)</span> {</span>
        if</span> (</span>i</span> ==</span> sb</span>.</span>length</span>())</span> {</span>
            ans</span> |=</span> valid</span>(</span>sb</span>);</span>
        }</span> else</span> if</span> (</span>sb</span>.</span>charAt</span>(</span>i</span>)</span> ==</span> '*'</span>)</span> {</span>
            for</span> (</span>char</span> c</span>:</span> "() "</span>.</span>toCharArray</span>())</span> {</span>
                sb</span>.</span>setCharAt</span>(</span>i</span>,</span> c</span>);</span>
                solve</span>(</span>sb</span>,</span> i</span>+</span>1</span>);</span>
                if</span> (</span>ans</span>)</span> return</span>;</span>
            }</span>
            sb</span>.</span>setCharAt</span>(</span>i</span>,</span> '*'</span>);</span>
        }</span> else</span>
            solve</span>(</span>sb</span>,</span> i</span> +</span> 1</span>);</span>
    }</span>

    public</span> boolean</span> valid</span>(</span>StringBuilder</span> sb</span>)</span> {</span>
        int</span> bal</span> =</span> 0</span>;</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> sb</span>.</span>length</span>();</span> i</span>++)</span> {</span>
            char</span> c</span> =</span> sb</span>.</span>charAt</span>(</span>i</span>);</span>
            if</span> (</span>c</span> ==</span> '('</span>)</span> bal</span>++;</span>
            if</span> (</span>c</span> ==</span> ')'</span>)</span> bal</span>--;</span>
            if</span> (</span>bal</span> &lt;</span> 0</span>)</span> break</span>;</span>
        }</span>
        return</span> bal</span> ==</span> 0</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time Complexity: <span class="maths katex-rendered">O</mi>(</mo>N</mi>∗</mo>3</mn>N</mi></mrow></msup>)</mo></mrow><annotation encoding="application/x-tex">O(N * 3^{N})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.841331em;"></span><span class="strut bottom" style="height: 1.09133em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>∗</span><span class="mord mathrm">3</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathit mtight" style="margin-right: 0.10903em;">N</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>, where <span class="maths katex-rendered">N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.68333em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10903em;">N</span></span></span></span></span> is the length of the string.  For each asterisk we try 3 different values.  Thus, we could be checking the validity of up to <span class="maths katex-rendered">3</mn>N</mi></msup></mrow><annotation encoding="application/x-tex">3^N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.841331em;"></span><span class="strut bottom" style="height: 0.841331em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">3</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight" style="margin-right: 0.10903em;">N</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> strings.  Then, each check of validity is <span class="maths katex-rendered">O</mi>(</mo>N</mi>)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>)</span></span></span></span></span>.</p>
</li>

Space Complexity:  <span class="maths katex-rendered">O</mi>(</mo>N</mi>)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>)</span></span></span></span></span>, the space used by our character array.</p>
</li>
</ul>

<h4 id="approach-2-dynamic-programming-accepted">Approach #2: Dynamic Programming [Accepted]</h4>
Intuition and Algorithm</strong></p>
Let dp[i][j]</code> be true</code> if and only if the interval s[i], s[i+1], ..., s[j]</code> can be made valid.  Then dp[i][j]</code> is true only if:</p>


s[i]</code> is '*'</code>, and the interval s[i+1], s[i+2], ..., s[j]</code> can be made valid;</p>
</li>

or, s[i]</code> can be made to be '('</code>, and there is some k</code> in [i+1, j]</code> such that s[k]</code> can be made to be ')'</code>, plus the two intervals cut by s[k]</code> (s[i+1: k]</code> and s[k+1: j+1]</code>) can be made valid.</p>
</li>
</ul>
Python</strong></p>
</span>class</span> Solution</span>(</span>object</span>):</span>
    def</span> checkValidString</span>(</span>self</span>,</span> s</span>):</span>
        if</span> not</span> s</span>:</span> return</span> True</span>
        LEFTY</span>,</span> RIGHTY</span> =</span> '(*'</span>,</span> ')*'</span>

        n</span> =</span> len</span>(</span>s</span>)</span>
        dp</span> =</span> [[</span>False</span>]</span> *</span> n</span> for</span> _</span> in</span> s</span>]</span>
        for</span> i</span> in</span> xrange</span>(</span>n</span>):</span>
            if</span> s</span>[</span>i</span>]</span> ==</span> '*'</span>:</span>
                dp</span>[</span>i</span>][</span>i</span>]</span> =</span> True</span>
            if</span> i</span> &lt;</span> n</span>-</span>1</span> and</span> s</span>[</span>i</span>]</span> in</span> LEFTY</span> and</span> s</span>[</span>i</span>+</span>1</span>]</span> in</span> RIGHTY</span>:</span>
                dp</span>[</span>i</span>][</span>i</span>+</span>1</span>]</span> =</span> True</span>

        for</span> size</span> in</span> xrange</span>(</span>2</span>,</span> n</span>):</span>
            for</span> i</span> in</span> xrange</span>(</span>n</span> -</span> size</span>):</span>
                if</span> s</span>[</span>i</span>]</span> ==</span> '*'</span> and</span> dp</span>[</span>i</span>+</span>1</span>][</span>i</span>+</span>size</span>]:</span>
                    dp</span>[</span>i</span>][</span>i</span>+</span>size</span>]</span> =</span> True</span>
                elif</span> s</span>[</span>i</span>]</span> in</span> LEFTY</span>:</span>
                    for</span> k</span> in</span> xrange</span>(</span>i</span>+</span>1</span>,</span> i</span>+</span>size</span>+</span>1</span>):</span>
                        if</span> (</span>s</span>[</span>k</span>]</span> in</span> RIGHTY</span> and</span>
                                (</span>k</span> ==</span> i</span>+</span>1</span> or</span> dp</span>[</span>i</span>+</span>1</span>][</span>k</span>-</span>1</span>])</span> and</span>
                                (</span>k</span> ==</span> i</span>+</span>size</span> or</span> dp</span>[</span>k</span>+</span>1</span>][</span>i</span>+</span>size</span>])):</span>
                            dp</span>[</span>i</span>][</span>i</span>+</span>size</span>]</span> =</span> True</span>

        return</span> dp</span>[</span>0</span>][</span>-</span>1</span>]</span>
</pre></div>


Java</strong></p>
</span>class</span> Solution</span> {</span>
    public</span> boolean</span> checkValidString</span>(</span>String</span> s</span>)</span> {</span>
        int</span> n</span> =</span> s</span>.</span>length</span>();</span>
        if</span> (</span>n</span> ==</span> 0</span>)</span> return</span> true</span>;</span>
        boolean</span>[][]</span> dp</span> =</span> new</span> boolean</span>[</span>n</span>][</span>n</span>];</span>

        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> n</span>;</span> i</span>++)</span> {</span>
            if</span> (</span>s</span>.</span>charAt</span>(</span>i</span>)</span> ==</span> '*'</span>)</span> dp</span>[</span>i</span>][</span>i</span>]</span> =</span> true</span>;</span>
            if</span> (</span>i</span> &lt;</span> n</span>-</span>1</span> &amp;&amp;</span>
                    (</span>s</span>.</span>charAt</span>(</span>i</span>)</span> ==</span> '('</span> ||</span> s</span>.</span>charAt</span>(</span>i</span>)</span> ==</span> '*'</span>)</span> &amp;&amp;</span>
                    (</span>s</span>.</span>charAt</span>(</span>i</span>+</span>1</span>)</span> ==</span> ')'</span> ||</span> s</span>.</span>charAt</span>(</span>i</span>+</span>1</span>)</span> ==</span> '*'</span>))</span> {</span>
                dp</span>[</span>i</span>][</span>i</span>+</span>1</span>]</span> =</span> true</span>;</span>
            }</span>
        }</span>

        for</span> (</span>int</span> size</span> =</span> 2</span>;</span> size</span> &lt;</span> n</span>;</span> size</span>++)</span> {</span>
            for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> +</span> size</span> &lt;</span> n</span>;</span> i</span>++)</span> {</span>
                if</span> (</span>s</span>.</span>charAt</span>(</span>i</span>)</span> ==</span> '*'</span> &amp;&amp;</span> dp</span>[</span>i</span>+</span>1</span>][</span>i</span>+</span>size</span>]</span> ==</span> true</span>)</span> {</span>
                    dp</span>[</span>i</span>][</span>i</span>+</span>size</span>]</span> =</span> true</span>;</span>
                }</span> else</span> if</span> (</span>s</span>.</span>charAt</span>(</span>i</span>)</span> ==</span> '('</span> ||</span> s</span>.</span>charAt</span>(</span>i</span>)</span> ==</span> '*'</span>)</span> {</span>
                    for</span> (</span>int</span> k</span> =</span> i</span>+</span>1</span>;</span> k</span> &lt;=</span> i</span>+</span>size</span>;</span> k</span>++)</span> {</span>
                        if</span> ((</span>s</span>.</span>charAt</span>(</span>k</span>)</span> ==</span> ')'</span> ||</span> s</span>.</span>charAt</span>(</span>k</span>)</span> ==</span> '*'</span>)</span> &amp;&amp;</span>
                                (</span>k</span> ==</span> i</span>+</span>1</span> ||</span> dp</span>[</span>i</span>+</span>1</span>][</span>k</span>-</span>1</span>])</span> &amp;&amp;</span>
                                (</span>k</span> ==</span> i</span>+</span>size</span> ||</span> dp</span>[</span>k</span>+</span>1</span>][</span>i</span>+</span>size</span>]))</span> {</span>
                            dp</span>[</span>i</span>][</span>i</span>+</span>size</span>]</span> =</span> true</span>;</span>
                        }</span>
                    }</span>
                }</span>
            }</span>
        }</span>
        return</span> dp</span>[</span>0</span>][</span>n</span>-</span>1</span>];</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time Complexity: <span class="maths katex-rendered">O</mi>(</mo>N</mi>3</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(N^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>, where <span class="maths katex-rendered">N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.68333em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10903em;">N</span></span></span></span></span> is the length of the string.  There are <span class="maths katex-rendered">O</mi>(</mo>N</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span> states corresponding to entries of dp</code>, and we do an average of <span class="maths katex-rendered">O</mi>(</mo>N</mi>)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>)</span></span></span></span></span> work on each state.</p>
</li>

Space Complexity:  <span class="maths katex-rendered">O</mi>(</mo>N</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>, the space used to store intermediate results in dp</code>.</p>
</li>
</ul>

<h4 id="approach-3-greedy-accepted">Approach #3: Greedy [Accepted]</h4>
Intuition</strong></p>
When checking whether the string is valid, we only cared about the "balance</code>": the number of extra, open left brackets as we parsed through the string.  For example, when checking whether '(()())' is valid, we had a balance of 1, 2, 1, 2, 1, 0</code> as we parse through the string: '('</code> has 1 left bracket, '(('</code> has 2, '(()'</code> has 1, and so on.  This means that after parsing the first i</code> symbols, (which may include asterisks,) we only need to keep track of what the balance</code> could be.</p>
For example, if we have string '(***)'</code>, then as we parse each symbol, the set of possible values for the balance</code> is [1]</code> for '('</code>; [0, 1, 2]</code> for '(*'</code>; [0, 1, 2, 3]</code> for '(**'</code>; [0, 1, 2, 3, 4]</code> for '(***'</code>, and [0, 1, 2, 3]</code> for '(***)'</code>.</p>
Furthermore, we can prove these states always form a contiguous interval.  Thus, we only need to know the left and right bounds of this interval.  That is, we would keep those intermediate states described above as [lo, hi] = [1, 1], [0, 2], [0, 3], [0, 4], [0, 3]</code>.</p>
Algorithm</strong></p>
Let lo, hi</code> respectively be the smallest and largest possible number of open left brackets after processing the current character in the string.</p>
If we encounter a left bracket (c == '('</code>), then lo++</code>, otherwise we could write a right bracket, so lo--</code>.  If we encounter what can be a left bracket (c != ')'</code>), then hi++</code>, otherwise we must write a right bracket, so hi--</code>.  If hi &lt; 0</code>, then the current prefix can't be made valid no matter what our choices are.  Also, we can never have less than 0</code> open left brackets.  At the end, we should check that we can have exactly 0 open left brackets.</p>
Python</strong></p>
</span>class</span> Solution</span>(</span>object</span>):</span>
    def</span> checkValidString</span>(</span>self</span>,</span> s</span>):</span>
        lo</span> =</span> hi</span> =</span> 0</span>
        for</span> c</span> in</span> s</span>:</span>
            lo</span> +=</span> 1</span> if</span> c</span> ==</span> '('</span> else</span> -</span>1</span>
            hi</span> +=</span> 1</span> if</span> c</span> !=</span> ')'</span> else</span> -</span>1</span>
            if</span> hi</span> &lt;</span> 0</span>:</span> break</span>
            lo</span> =</span> max</span>(</span>lo</span>,</span> 0</span>)</span>

        return</span> lo</span> ==</span> 0</span>
</pre></div>


Java</strong></p>
</span>class</span> Solution</span> {</span>
    public</span> boolean</span> checkValidString</span>(</span>String</span> s</span>)</span> {</span>
       int</span> lo</span> =</span> 0</span>,</span> hi</span> =</span> 0</span>;</span>
       for</span> (</span>char</span> c</span>:</span> s</span>.</span>toCharArray</span>())</span> {</span>
           lo</span> +=</span> c</span> ==</span> '('</span> ?</span> 1</span> :</span> -</span>1</span>;</span>
           hi</span> +=</span> c</span> !=</span> ')'</span> ?</span> 1</span> :</span> -</span>1</span>;</span>
           if</span> (</span>hi</span> &lt;</span> 0</span>)</span> break</span>;</span>
           lo</span> =</span> Math</span>.</span>max</span>(</span>lo</span>,</span> 0</span>);</span>
       }</span>
       return</span> lo</span> ==</span> 0</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time Complexity: <span class="maths katex-rendered">O</mi>(</mo>N</mi>)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>)</span></span></span></span></span>, where <span class="maths katex-rendered">N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.68333em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10903em;">N</span></span></span></span></span> is the length of the string.  We iterate through the string once.</p>
</li>

Space Complexity:  <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>, the space used by our lo</code> and hi</code> pointers.  However, creating a new character array will take <span class="maths katex-rendered">O</mi>(</mo>N</mi>)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>)</span></span></span></span></span> space.</p>
</li>
</ul>