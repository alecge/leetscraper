<div class="toc hide">

<a href="#solution">Solution</a>
<a href="#approach-1-brute-force-time-limit-exceeded">Approach #1 Brute Force [Time Limit Exceeded]</a></li>
<a href="#approach-2-binary-search-accepted">Approach #2 Binary Search [Accepted]</a></li>
<a href="#approach-3-ternary-search-accepted">Approach #3 Ternary Search [Accepted]</a></li>
</ul>
</li>
<a href="#follow-up">Follow up</a>
<a href="#comparisons-between-binary-search-and-ternary-search">Comparisons between Binary Search and Ternary Search</a></li>
</ul>
</li>
</ul>
</div>
Solution</h2>

<h4 id="approach-1-brute-force-time-limit-exceeded">Approach #1 Brute Force [Time Limit Exceeded]</h4>
We check every number from 1 to n-1 and pass it to the <span class="maths katex-rendered">g</mi>u</mi>e</mi>s</mi>s</mi></mrow><annotation encoding="application/x-tex">guess</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">u</span><span class="mord mathit">e</span><span class="mord mathit">s</span><span class="mord mathit">s</span></span></span></span></span> function. The number
for which a 0 is returned is the required answer.</p>
Java</strong></p>
</span>/* The guess API is defined in the parent class GuessGame.</span>
   @param num, your guess</span>
   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0</span>
      int guess(int num); */</span>

public</span> class</span> Solution</span> extends</span> GuessGame</span> {</span>
    public</span> int</span> guessNumber</span>(</span>int</span> n</span>)</span> {</span>
        for</span> (</span>int</span> i</span> =</span> 1</span>;</span> i</span> &lt;</span> n</span>;</span> i</span>++)</span>
            if</span> (</span>guess</span>(</span>i</span>)</span> ==</span> 0</span>)</span>
                return</span> i</span>;</span>
        return</span> n</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>

Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. We scan all the numbers from 1 to n.</li>
Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. No extra space is used.</li>
</ul>

<h4 id="approach-2-binary-search-accepted">Approach #2 Binary Search [Accepted]</h4>
Algorithm</strong></p>
We can apply Binary Search to find the given number. We start with the mid
number. We pass that number to the <span class="maths katex-rendered">g</mi>u</mi>e</mi>s</mi>s</mi></mrow><annotation encoding="application/x-tex">guess</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">u</span><span class="mord mathit">e</span><span class="mord mathit">s</span><span class="mord mathit">s</span></span></span></span></span> function. If it returns a -1, it implies that the guessed number is larger than the required one. Thus, we use Binary Search for numbers lower than itself. Similarly, if it returns a 1, we use Binary Search
 for numbers higher than itself.</p>
Java</strong></p>
</span>/* The guess API is defined in the parent class GuessGame.</span>
   @param num, your guess</span>
   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0</span>
      int guess(int num); */</span>

public</span> class</span> Solution</span> extends</span> GuessGame</span> {</span>
    public</span> int</span> guessNumber</span>(</span>int</span> n</span>)</span> {</span>
        int</span> low</span> =</span> 1</span>;</span>
        int</span> high</span> =</span> n</span>;</span>
        while</span> (</span>low</span> &lt;=</span> high</span>)</span> {</span>
            int</span> mid</span> =</span> low</span> +</span> (</span>high</span> -</span> low</span>)</span> /</span> 2</span>;</span>
            int</span> res</span> =</span> guess</span>(</span>mid</span>);</span>
            if</span> (</span>res</span> ==</span> 0</span>)</span>
                return</span> mid</span>;</span>
            else</span> if</span> (</span>res</span> &lt;</span> 0</span>)</span>
                high</span> =</span> mid</span> -</span> 1</span>;</span>
            else</span>
                low</span> =</span> mid</span> +</span> 1</span>;</span>
        }</span>
        return</span> -</span>1</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>

Time complexity : <span class="maths katex-rendered">O</mi>(</mo>log</mi>2</mn></msub>n</mi>)</mo></mrow><annotation encoding="application/x-tex">Obig(log_2 nbig)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.85em;"></span><span class="strut bottom" style="height: 1.20001em; vertical-align: -0.35001em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mord style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing size1">(</span></span>lo<span style="margin-right: 0.01389em;">g</span></span><span class="" style="top: 0.24444em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">n</span><span class="mord style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing size1">)</span></span></span></span></span></span>. Binary Search is used.</li>
Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. No extra space is used.</li>
</ul>

<h4 id="approach-3-ternary-search-accepted">Approach #3 Ternary Search [Accepted]</h4>
Algorithm</strong></p>
In Binary Search, we choose the middle element as the pivot in splitting. In Ternary Search, we choose two pivots (say <span class="maths katex-rendered">m</mi>1</mn></mrow><annotation encoding="application/x-tex">m1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathrm">1</span></span></span></span></span> and <span class="maths katex-rendered">m</mi>2</mn></mrow><annotation encoding="application/x-tex">m2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathrm">2</span></span></span></span></span>) such that the given range is divided into three equal parts. If the required number <span class="maths katex-rendered">n</mi>u</mi>m</mi></mrow><annotation encoding="application/x-tex">num</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span></span></span></span></span> is less than <span class="maths katex-rendered">m</mi>1</mn></mrow><annotation encoding="application/x-tex">m1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathrm">1</span></span></span></span></span> then we apply ternary search on the left segment of <span class="maths katex-rendered">m</mi>1</mn></mrow><annotation encoding="application/x-tex">m1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathrm">1</span></span></span></span></span>. If <span class="maths katex-rendered">n</mi>u</mi>m</mi></mrow><annotation encoding="application/x-tex">num</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span></span></span></span></span> lies between <span class="maths katex-rendered">m</mi>1</mn></mrow><annotation encoding="application/x-tex">m1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathrm">1</span></span></span></span></span> and <span class="maths katex-rendered">m</mi>2</mn></mrow><annotation encoding="application/x-tex">m2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathrm">2</span></span></span></span></span>, we apply ternary search between <span class="maths katex-rendered">m</mi>1</mn></mrow><annotation encoding="application/x-tex">m1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathrm">1</span></span></span></span></span> and <span class="maths katex-rendered">m</mi>2</mn></mrow><annotation encoding="application/x-tex">m2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathrm">2</span></span></span></span></span>. Otherwise we will search in the segment right to <span class="maths katex-rendered">m</mi>2</mn></mrow><annotation encoding="application/x-tex">m2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathrm">2</span></span></span></span></span>.</p>
Java</strong></p>
</span>/* The guess API is defined in the parent class GuessGame.</span>
   @param num, your guess</span>
   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0</span>
      int guess(int num); */</span>

public</span> class</span> Solution</span> extends</span> GuessGame</span> {</span>
    public</span> int</span> guessNumber</span>(</span>int</span> n</span>)</span> {</span>
        int</span> low</span> =</span> 1</span>;</span>
        int</span> high</span> =</span> n</span>;</span>
        while</span> (</span>low</span> &lt;=</span> high</span>)</span> {</span>
            int</span> mid1</span> =</span> low</span> +</span> (</span>high</span> -</span> low</span>)</span> /</span> 3</span>;</span>
            int</span> mid2</span> =</span> high</span> -</span> (</span>high</span> -</span> low</span>)</span> /</span> 3</span>;</span>
            int</span> res1</span> =</span> guess</span>(</span>mid1</span>);</span>
            int</span> res2</span> =</span> guess</span>(</span>mid2</span>);</span>
            if</span> (</span>res1</span> ==</span> 0</span>)</span>
                return</span> mid1</span>;</span>
            if</span> (</span>res2</span> ==</span> 0</span>)</span>
                return</span> mid2</span>;</span>
            else</span> if</span> (</span>res1</span> &lt;</span> 0</span>)</span>
                high</span> =</span> mid1</span> -</span> 1</span>;</span>
            else</span> if</span> (</span>res2</span> &gt;</span> 0</span>)</span>
                low</span> =</span> mid2</span> +</span> 1</span>;</span>
            else</span> {</span>
                low</span> =</span> mid1</span> +</span> 1</span>;</span>
                high</span> =</span> mid2</span> -</span> 1</span>;</span>
            }</span>
        }</span>
        return</span> -</span>1</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>

Time complexity : <span class="maths katex-rendered">O</mi>(</mo>log</mi>3</mn></msub>n</mi>)</mo></mrow><annotation encoding="application/x-tex">Obig(log_3 n big)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.85em;"></span><span class="strut bottom" style="height: 1.20001em; vertical-align: -0.35001em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mord style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing size1">(</span></span>lo<span style="margin-right: 0.01389em;">g</span></span><span class="" style="top: 0.24444em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">n</span><span class="mord style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing size1">)</span></span></span></span></span></span>. Ternary Search is used.</li>
Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. No extra space is used.</li>
</ul>

Follow up</h2>
It seems that ternary search is able to terminate earlier compared to binary search. But why is binary search more widely used?</p>
<h4 id="comparisons-between-binary-search-and-ternary-search">Comparisons between Binary Search and Ternary Search</h4>
Ternary Search is worse than Binary Search. The following outlines the recursive formula to count comparisons of Binary Search in the worst case.</p>

<p class="maths katex-rendered">
begin{align*}
T(n) &amp;= Tbigg(frac{n}{2}  bigg) + 2, quad T(1) = 1 
Tbigg(frac{n}{2}  bigg) &amp;= Tbigg(frac{n}{2^2}  bigg) + 2 

therefore{} quad T(n) &amp;= Tbigg(frac{n}{2^2}  bigg) + 2 times 2 
&amp;= Tbigg(frac{n}{2^3}  bigg) + 3 times 2 
&amp;= ldots 
&amp;= Tbigg(frac{n}{2^{log_2 n}}  bigg) + 2 log_2 n 
&amp;= T(1) + 2 log_2 n 
&amp;= 1 + 2 log_2 n
end{align*}
</span><script type="math/tex; mode=display">
begin{align*}
T(n) &= Tbigg(frac{n}{2}  bigg) + 2, quad T(1) = 1 
Tbigg(frac{n}{2}  bigg) &= Tbigg(frac{n}{2^2}  bigg) + 2 

therefore{} quad T(n) &= Tbigg(frac{n}{2^2}  bigg) + 2 times 2 
&= Tbigg(frac{n}{2^3}  bigg) + 3 times 2 
&= ldots 
&= Tbigg(frac{n}{2^{log_2 n}}  bigg) + 2 log_2 n 
&= T(1) + 2 log_2 n 
&= 1 + 2 log_2 n
end{align*}
</script></p>
</p>
The following outlines the recursive formula to count comparisons of Ternary Search in the worst case.</p>

<p class="maths katex-rendered">[
begin{align*}
T(n) &amp;= Tbigg(frac{n}{3}  bigg) + 4, quad T(1) = 1 
Tbigg(frac{n}{3}  bigg) &amp;= Tbigg(frac{n}{3^2}  bigg) + 4 

therefore{} quad T(n) &amp;= Tbigg(frac{n}{3^2}  bigg) + 2 times 4 
&amp;= Tbigg(frac{n}{3^3}  bigg) + 3 times 4 
&amp;= ldots 
&amp;= Tbigg(frac{n}{3^{log_3 n}}  bigg) + 4 log_3 n 
&amp;= T(1) + 4 log_3 n 
&amp;= 1 + 4 log_3 n
end{align*}
]</p>
</p>
As shown above, the total comparisons in the worst case for ternary and binary search are <span class="maths katex-rendered">1</mn>+</mo>4</mn>log</mi>3</mn></msub>n</mi></mrow><annotation encoding="application/x-tex">1 + 4 log_3 n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.93888em; vertical-align: -0.24444em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span>+</span><span class="mord mathrm">4</span>lo<span style="margin-right: 0.01389em;">g</span></span><span class="" style="top: 0.24444em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">n</span></span></span></span></span> and <span class="maths katex-rendered">1</mn>+</mo>2</mn>log</mi>2</mn></msub>n</mi></mrow><annotation encoding="application/x-tex">1 + 2 log_2 n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.93888em; vertical-align: -0.24444em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span>+</span><span class="mord mathrm">2</span>lo<span style="margin-right: 0.01389em;">g</span></span><span class="" style="top: 0.24444em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">n</span></span></span></span></span> comparisons respectively. To determine which is larger, we can just look at the expression <span class="maths katex-rendered">2</mn>log</mi>3</mn></msub>n</mi></mrow><annotation encoding="application/x-tex">2 log_3 n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.93888em; vertical-align: -0.24444em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span>lo<span style="margin-right: 0.01389em;">g</span></span><span class="" style="top: 0.24444em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">n</span></span></span></span></span> and <span class="maths katex-rendered">log</mi>2</mn></msub>n</mi></mrow><annotation encoding="application/x-tex">log_2 n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.93888em; vertical-align: -0.24444em;"></span><span class="base textstyle uncramped">lo<span style="margin-right: 0.01389em;">g</span></span><span class="" style="top: 0.24444em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">n</span></span></span></span></span> . The expression <span class="maths katex-rendered">2</mn>log</mi>3</mn></msub>n</mi></mrow><annotation encoding="application/x-tex">2 log_3 n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.93888em; vertical-align: -0.24444em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span>lo<span style="margin-right: 0.01389em;">g</span></span><span class="" style="top: 0.24444em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">n</span></span></span></span></span> can be written as <span class="maths katex-rendered">2</mn></mrow>log</mi>2</mn></msub>3</mn></mrow></mfrac>×</mo>log</mi>2</mn></msub>n</mi></mrow><annotation encoding="application/x-tex">frac{2}{log_2 3} times log_2 n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.845108em;"></span><span class="strut bottom" style="height: 1.37592em; vertical-align: -0.530808em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="mopen sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord scriptstyle cramped mtight"><span class="mop mtight"><span class="mop mtight">lo<span style="margin-right: 0.01389em;">g</span></span><span class="" style="top: 0.26544em; margin-right: 0.0714286em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathrm mtight">3</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span>×</span>lo<span style="margin-right: 0.01389em;">g</span></span><span class="" style="top: 0.24444em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">n</span></span></span></span></span> . Since the value of <span class="maths katex-rendered">2</mn></mrow>log</mi>2</mn></msub>3</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">frac{2}{log_2 3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.845108em;"></span><span class="strut bottom" style="height: 1.37592em; vertical-align: -0.530808em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="mopen sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord scriptstyle cramped mtight"><span class="mop mtight"><span class="mop mtight">lo<span style="margin-right: 0.01389em;">g</span></span><span class="" style="top: 0.26544em; margin-right: 0.0714286em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathrm mtight">3</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></span> is greater than one, Ternary Search does more comparisons than Binary Search in the worst case.</p>
Analysis written by: <a href="https://leetcode.com/vinod23">@vinod23</a></p>