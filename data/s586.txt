<div class="toc hide">

<a href="#solution">Solution</a>
<a href="#approach-1-brute-force-time-limit-exceeded">Approach #1 Brute Force [Time Limit Exceeded]</a></li>
<a href="#approach-2-using-hashmap-accepted">Approach #2 Using HashMap [Accepted]</a></li>
</ul>
</li>
</ul>
</div>
Solution</h2>

<h4 id="approach-1-brute-force-time-limit-exceeded">Approach #1 Brute Force [Time Limit Exceeded]</h4>
Algorithm</strong></p>
For the brute force solution, firstly we obtain the directory paths, the filenames and file contents separately by appropriately splitting the elements of the <span class="maths katex-rendered">p</mi>a</mi>t</mi>h</mi>s</mi></mrow><annotation encoding="application/x-tex">paths</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="mord mathit">a</span><span class="mord mathit">t</span><span class="mord mathit">h</span><span class="mord mathit">s</span></span></span></span></span> list. While doing so, we keep on creating a <span class="maths katex-rendered">l</mi>i</mi>s</mi>t</mi></mrow><annotation encoding="application/x-tex">list</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathit">t</span></span></span></span></span> which contains the full path of every file along with the contents of the file. The <span class="maths katex-rendered">l</mi>i</mi>s</mi>t</mi></mrow><annotation encoding="application/x-tex">list</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathit">t</span></span></span></span></span> contains data in the form <span class="maths katex-rendered">[</mo>[</mo>f</mi>i</mi>l</mi>e</mi>1</mn></msub>_</mi>f</mi>u</mi>l</mi>l</mi>_</mi>p</mi>a</mi>t</mi>h</mi>,</mo>f</mi>i</mi>l</mi>e</mi>1</mn></msub>_</mi>c</mi>o</mi>n</mi>t</mi>e</mi>n</mi>t</mi>s</mi>]</mo>,</mo>[</mo>f</mi>i</mi>l</mi>e</mi>2</mn></msub>_</mi>f</mi>u</mi>l</mi>l</mi>_</mi>p</mi>a</mi>t</mi>h</mi>,</mo>f</mi>i</mi>l</mi>e</mi>2</mn></msub>_</mi>c</mi>o</mi>n</mi>t</mi>e</mi>n</mi>t</mi>s</mi>]</mo>.</mi>.</mi>.</mi>,</mo>[</mo>f</mi>i</mi>l</mi>e</mi>n</mi></msub>_</mi>f</mi>u</mi>l</mi>l</mi>_</mi>p</mi>a</mi>t</mi>h</mi>,</mo>f</mi>i</mi>l</mi>e</mi>n</mi></msub>_</mi>c</mi>o</mi>n</mi>t</mi>e</mi>n</mi>t</mi>s</mi>]</mo>]</mo></mrow><annotation encoding="application/x-tex">[ [file_1_full_path, file_1_contents], [file_2_full_path, file_2_contents]..., [file_n_full_path, file_n_contents] ]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1.06em; vertical-align: -0.31em;"></span><span class="base textstyle uncramped">[</span>[</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathrm" style="margin-right: 0.02778em;">_</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">u</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathrm" style="margin-right: 0.02778em;">_</span><span class="mord mathit">p</span><span class="mord mathit">a</span><span class="mord mathit">t</span><span class="mord mathit">h</span>,</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathrm" style="margin-right: 0.02778em;">_</span><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">n</span><span class="mord mathit">t</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit">t</span><span class="mord mathit">s</span>]</span>,</span>[</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathrm" style="margin-right: 0.02778em;">_</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">u</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathrm" style="margin-right: 0.02778em;">_</span><span class="mord mathit">p</span><span class="mord mathit">a</span><span class="mord mathit">t</span><span class="mord mathit">h</span>,</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathrm" style="margin-right: 0.02778em;">_</span><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">n</span><span class="mord mathit">t</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit">t</span><span class="mord mathit">s</span>]</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span>,</span>[</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathit mtight">n</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathrm" style="margin-right: 0.02778em;">_</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">u</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathrm" style="margin-right: 0.02778em;">_</span><span class="mord mathit">p</span><span class="mord mathit">a</span><span class="mord mathit">t</span><span class="mord mathit">h</span>,</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathit mtight">n</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathrm" style="margin-right: 0.02778em;">_</span><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">n</span><span class="mord mathit">t</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit">t</span><span class="mord mathit">s</span>]</span>]</span></span></span></span></span>.</p>
Once this is done, we iterate over this <span class="maths katex-rendered">l</mi>i</mi>s</mi>t</mi></mrow><annotation encoding="application/x-tex">list</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathit">t</span></span></span></span></span>. For every element <span class="maths katex-rendered">i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span></span> chosen from the list, we iterate over the whole <span class="maths katex-rendered">l</mi>i</mi>s</mi>t</mi></mrow><annotation encoding="application/x-tex">list</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathit">t</span></span></span></span></span> to find another element <span class="maths katex-rendered">j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.85396em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05724em;">j</span></span></span></span></span> whose file contents are the same as the <span class="maths katex-rendered">i</mi>t</mi>h</mi></mrow></msup></mrow><annotation encoding="application/x-tex">i^{th}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.849108em;"></span><span class="strut bottom" style="height: 0.849108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathit mtight">t</span><span class="mord mathit mtight">h</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> element. For every such element found, we put the <span class="maths katex-rendered">j</mi>t</mi>h</mi></mrow></msup></mrow><annotation encoding="application/x-tex">j^{th}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.849108em;"></span><span class="strut bottom" style="height: 1.04355em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05724em;">j</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathit mtight">t</span><span class="mord mathit mtight">h</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> element's file path in a temporary list <span class="maths katex-rendered">l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span></span></span></span></span> and we also mark the <span class="maths katex-rendered">j</mi>t</mi>h</mi></mrow></msup></mrow><annotation encoding="application/x-tex">j^{th}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.849108em;"></span><span class="strut bottom" style="height: 1.04355em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05724em;">j</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathit mtight">t</span><span class="mord mathit mtight">h</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> element as visited so that this element isn't considered again in the future. Thus, when we reach the end of the array for every <span class="maths katex-rendered">i</mi>t</mi>h</mi></mrow></msup></mrow><annotation encoding="application/x-tex">i^{th}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.849108em;"></span><span class="strut bottom" style="height: 0.849108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathit mtight">t</span><span class="mord mathit mtight">h</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> element, we obtain a list of file paths in <span class="maths katex-rendered">l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span></span></span></span></span>, which have the same contents as the file corresponding to the <span class="maths katex-rendered">i</mi>t</mi>h</mi></mrow></msup></mrow><annotation encoding="application/x-tex">i^{th}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.849108em;"></span><span class="strut bottom" style="height: 0.849108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathit mtight">t</span><span class="mord mathit mtight">h</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> element. If this list isn't empty, it indicates that there exists content duplicate to the <span class="maths katex-rendered">i</mi>t</mi>h</mi></mrow></msup></mrow><annotation encoding="application/x-tex">i^{th}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.849108em;"></span><span class="strut bottom" style="height: 0.849108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathit mtight">t</span><span class="mord mathit mtight">h</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> element. Thus, we also need to put the <span class="maths katex-rendered">i</mi>t</mi>h</mi></mrow></msup></mrow><annotation encoding="application/x-tex">i^{th}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.849108em;"></span><span class="strut bottom" style="height: 0.849108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathit mtight">t</span><span class="mord mathit mtight">h</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> element's file path in the <span class="maths katex-rendered">l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span></span></span></span></span>. </p>
At the end of each iteration, we put this list <span class="maths katex-rendered">l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span></span></span></span></span> obtained in the resultant list <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> and reset the list <span class="maths katex-rendered">l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span></span></span></span></span> for finding the duplicates of the next element.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> List</span> &lt;</span> List</span> &lt;</span> String</span> &gt;&gt;</span> findDuplicate</span>(</span>String</span>[]</span> paths</span>)</span> {</span>
        List</span> &lt;</span> String</span>[]</span> &gt;</span> list</span> =</span> new</span> ArrayList</span> &lt;</span> &gt;</span> ();</span>
        for</span> (</span>String</span> path</span>:</span> paths</span>)</span> {</span>
            String</span>[]</span> values</span> =</span> path</span>.</span>split</span>(</span>" "</span>);</span>
            for</span> (</span>int</span> i</span> =</span> 1</span>;</span> i</span> &lt;</span> values</span>.</span>length</span>;</span> i</span>++)</span> {</span>
                String</span>[]</span> name_cont</span> =</span> values</span>[</span>i</span>].</span>split</span>(</span>"("</span>);</span>
                name_cont</span>[</span>1</span>]</span> =</span> name_cont</span>[</span>1</span>].</span>replace</span>(</span>")"</span>,</span> ""</span>);</span>
                list</span>.</span>add</span>(</span>new</span> String</span>[]</span> {</span>
                    values</span>[</span>0</span>]</span> +</span> "/"</span> +</span> name_cont</span>[</span>0</span>],</span> name_cont</span>[</span>1</span>]</span>
                });</span>
            }</span>
        }</span>
        boolean</span>[]</span> visited</span> =</span> new</span> boolean</span>[</span>list</span>.</span>size</span>()];</span>
        List</span> &lt;</span> List</span> &lt;</span> String</span> &gt;&gt;</span> res</span> =</span> new</span> ArrayList</span> &lt;</span> &gt;</span> ();</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> list</span>.</span>size</span>()</span> -</span> 1</span>;</span> i</span>++)</span> {</span>
            if</span> (</span>visited</span>[</span>i</span>])</span>
                continue</span>;</span>
            List</span> &lt;</span> String</span> &gt;</span> l</span> =</span> new</span> ArrayList</span> &lt;</span> &gt;</span> ();</span>
            for</span> (</span>int</span> j</span> =</span> i</span> +</span> 1</span>;</span> j</span> &lt;</span> list</span>.</span>size</span>();</span> j</span>++)</span> {</span>
                if</span> (</span>list</span>.</span>get</span>(</span>i</span>)[</span>1</span>].</span>equals</span>(</span>list</span>.</span>get</span>(</span>j</span>)[</span>1</span>]))</span> {</span>
                    l</span>.</span>add</span>(</span>list</span>.</span>get</span>(</span>j</span>)[</span>0</span>]);</span>
                    visited</span>[</span>j</span>]</span> =</span> true</span>;</span>
                }</span>
            }</span>
            if</span> (</span>l</span>.</span>size</span>()</span> &gt;</span> 0</span>)</span> {</span>
                l</span>.</span>add</span>(</span>list</span>.</span>get</span>(</span>i</span>)[</span>0</span>]);</span>
                res</span>.</span>add</span>(</span>l</span>);</span>
            }</span>
        }</span>
        return</span> res</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>∗</mo>x</mi>+</mo>f</mi>2</mn></msup>∗</mo>s</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n*x + f^2*s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>∗</span><span class="mord mathit">x</span>+</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>∗</span><span class="mord mathit">s</span>)</span></span></span></span></span>. Creation of <span class="maths katex-rendered">l</mi>i</mi>s</mi>t</mi></mrow><annotation encoding="application/x-tex">list</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathit">t</span></span></span></span></span> will take <span class="maths katex-rendered">O</mi>(</mo>n</mi>∗</mo>x</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n*x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>∗</span><span class="mord mathit">x</span>)</span></span></span></span></span>, where n is the number of directories and x is the average string length. Every file is compared with every other file. Let <span class="maths katex-rendered">f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10764em;">f</span></span></span></span></span> files are there with average size of <span class="maths katex-rendered">s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span></span></span></span></span>, then files comparision will take <span class="maths katex-rendered">O</mi>(</mo>f</mi>2</mn></msup>∗</mo>s</mi>)</mo></mrow><annotation encoding="application/x-tex">O(f^2*s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>∗</span><span class="mord mathit">s</span>)</span></span></span></span></span>, equals can take <span class="maths katex-rendered">O</mi>(</mo>s</mi>)</mo></mrow><annotation encoding="application/x-tex">O(s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">s</span>)</span></span></span></span></span>. Here, Worst case will be when all files are unique.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>∗</mo>x</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n*x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>∗</span><span class="mord mathit">x</span>)</span></span></span></span></span>. Size of lists <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> and <span class="maths katex-rendered">l</mi>i</mi>s</mi>t</mi></mrow><annotation encoding="application/x-tex">list</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathit">t</span></span></span></span></span> can grow upto <span class="maths katex-rendered">n</mi>∗</mo>x</mi></mrow><annotation encoding="application/x-tex">n*x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.46528em;"></span><span class="strut bottom" style="height: 0.46528em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span>∗</span><span class="mord mathit">x</span></span></span></span></span>.</p>
</li>
</ul>

<h4 id="approach-2-using-hashmap-accepted">Approach #2 Using HashMap [Accepted]</h4>
In this approach, firstly we obtain the directory paths, the file names and their contents separately by appropriately splitting each string in the given <span class="maths katex-rendered">p</mi>a</mi>t</mi>h</mi>s</mi></mrow><annotation encoding="application/x-tex">paths</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="mord mathit">a</span><span class="mord mathit">t</span><span class="mord mathit">h</span><span class="mord mathit">s</span></span></span></span></span> list. In order to find the files with duplicate contents, we make use of a HashMap <span class="maths katex-rendered">m</mi>a</mi>p</mi></mrow><annotation encoding="application/x-tex">map</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">p</span></span></span></span></span>, which stores the data in the form <span class="maths katex-rendered">(</mo>c</mi>o</mi>n</mi>t</mi>e</mi>n</mi>t</mi>s</mi>,</mo>l</mi>i</mi>s</mi>t</mi>_</mi>o</mi>f</mi>_</mi>f</mi>i</mi>l</mi>e</mi>_</mi>p</mi>a</mi>t</mi>h</mi>s</mi>_</mi>w</mi>i</mi>t</mi>h</mi>_</mi>t</mi>h</mi>i</mi>s</mi>_</mi>c</mi>o</mi>n</mi>t</mi>e</mi>n</mi>t</mi>)</mo></mrow><annotation encoding="application/x-tex">(contents, list_of_file_paths_with_this_content)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1.06em; vertical-align: -0.31em;"></span><span class="base textstyle uncramped">(</span><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">n</span><span class="mord mathit">t</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit">t</span><span class="mord mathit">s</span>,</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathrm" style="margin-right: 0.02778em;">_</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathrm" style="margin-right: 0.02778em;">_</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathrm" style="margin-right: 0.02778em;">_</span><span class="mord mathit">p</span><span class="mord mathit">a</span><span class="mord mathit">t</span><span class="mord mathit">h</span><span class="mord mathit">s</span><span class="mord mathrm" style="margin-right: 0.02778em;">_</span><span class="mord mathit" style="margin-right: 0.02691em;">w</span><span class="mord mathit">i</span><span class="mord mathit">t</span><span class="mord mathit">h</span><span class="mord mathrm" style="margin-right: 0.02778em;">_</span><span class="mord mathit">t</span><span class="mord mathit">h</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathrm" style="margin-right: 0.02778em;">_</span><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">n</span><span class="mord mathit">t</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit">t</span>)</span></span></span></span></span>. Thus, for every file's contents, we check if the same content already exist in the hashmap. If so, we add the current file's path to the list of files corresponding to the current contents. Otherwise, we create a new entry in the <span class="maths katex-rendered">m</mi>a</mi>p</mi></mrow><annotation encoding="application/x-tex">map</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">p</span></span></span></span></span>, with the current contents as the key and the value being a list with only one entry(the current file's path).</p>
At the end, we find out the contents corresponding to which atleast two file paths exist. We obtain the resultant list <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span>, which is a list of lists containing these file paths corresponding to the same contents.</p>
The following animation illustrates the process for a clearer understanding.</p>
<div class="diaporama" style="width: 1000px; height: 563px;"><div class="initial-play play-container"><div class="fa fa-play"></div></div></canvas></div><div class="control-panel" style="width: 940px;"><div class="control-group dia-back fa fa-step-backward"></div><div class="toggle-play control-group fa fa-play"></div><div class="control-group fa fa-step-forward"></div></div>1 / 8</div></div></div>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> List</span> &lt;</span> List</span> &lt;</span> String</span> &gt;&gt;</span> findDuplicate</span>(</span>String</span>[]</span> paths</span>)</span> {</span>
        HashMap</span> &lt;</span> String</span>,</span> List</span> &lt;</span> String</span> &gt;&gt;</span> map</span> =</span> new</span> HashMap</span> &lt;</span> &gt;</span> ();</span>
        for</span> (</span>String</span> path</span>:</span> paths</span>)</span> {</span>
            String</span>[]</span> values</span> =</span> path</span>.</span>split</span>(</span>" "</span>);</span>
            for</span> (</span>int</span> i</span> =</span> 1</span>;</span> i</span> &lt;</span> values</span>.</span>length</span>;</span> i</span>++)</span> {</span>
                String</span>[]</span> name_cont</span> =</span> values</span>[</span>i</span>].</span>split</span>(</span>"("</span>);</span>
                name_cont</span>[</span>1</span>]</span> =</span> name_cont</span>[</span>1</span>].</span>replace</span>(</span>")"</span>,</span> ""</span>);</span>
                List</span> &lt;</span> String</span> &gt;</span> list</span> =</span> map</span>.</span>getOrDefault</span>(</span>name_cont</span>[</span>1</span>],</span> new</span> ArrayList</span> &lt;</span> String</span> &gt;</span> ());</span>
                list</span>.</span>add</span>(</span>values</span>[</span>0</span>]</span> +</span> "/"</span> +</span> name_cont</span>[</span>0</span>]);</span>
                map</span>.</span>put</span>(</span>name_cont</span>[</span>1</span>],</span> list</span>);</span>
            }</span>
        }</span>
        List</span> &lt;</span> List</span> &lt;</span> String</span> &gt;&gt;</span> res</span> =</span> new</span> ArrayList</span> &lt;</span> &gt;</span> ();</span>
        for</span> (</span>String</span> key</span>:</span> map</span>.</span>keySet</span>())</span> {</span>
            if</span> (</span>map</span>.</span>get</span>(</span>key</span>).</span>size</span>()</span> &gt;</span> 1</span>)</span>
                res</span>.</span>add</span>(</span>map</span>.</span>get</span>(</span>key</span>));</span>
        }</span>
        return</span> res</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>∗</mo>x</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n*x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>∗</span><span class="mord mathit">x</span>)</span></span></span></span></span>. <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> strings of average length <span class="maths katex-rendered">x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span></span> is parsed.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>∗</mo>x</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n*x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>∗</span><span class="mord mathit">x</span>)</span></span></span></span></span>. <span class="maths katex-rendered">m</mi>a</mi>p</mi></mrow><annotation encoding="application/x-tex">map</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">p</span></span></span></span></span> and <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> size grows upto <span class="maths katex-rendered">n</mi>∗</mo>x</mi></mrow><annotation encoding="application/x-tex">n*x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.46528em;"></span><span class="strut bottom" style="height: 0.46528em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span>∗</span><span class="mord mathit">x</span></span></span></span></span>.</p>
</li>
</ul>

Analysis written by: <a href="https://leetcode.com/vinod23">@vinod23</a></p>