<div class="toc hide">

<a href="#solution">Solution</a>
<a href="#approach-1-list-operation-time-limit-exceeded">Approach #1 List operation [Time Limit Exceeded]</a></li>
<a href="#approach-2-hash-table-accepted">Approach #2 Hash Table [Accepted]</a></li>
<a href="#approach-3-math-accepted">Approach #3 Math [Accepted]</a></li>
<a href="#approach-4-bit-manipulation-accepted">Approach #4 Bit Manipulation [Accepted]</a></li>
</ul>
</li>
</ul>
</div>
Solution</h2>

<h4 id="approach-1-list-operation-time-limit-exceeded">Approach #1 List operation [Time Limit Exceeded]</h4>
Algorithm</strong></p>

Iterate over all the elements in <span class="maths katex-rendered">n</mi>u</mi>m</mi>s</mi></mtext></mrow><annotation encoding="application/x-tex">text{nums}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">nums</span></span></span></span></span></span>
</li>
If some number in <span class="maths katex-rendered">n</mi>u</mi>m</mi>s</mi></mtext></mrow><annotation encoding="application/x-tex">text{nums}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">nums</span></span></span></span></span></span> is new to array, append it</li>
If some number is already in the array, remove it</li>
</ol>
Python</strong></p>
</span>class</span> Solution</span>(</span>object</span>):</span>
    def</span> singleNumber</span>(</span>self</span>,</span> nums</span>):</span>
        """</span>
        :type nums: List[int]</span>
        :rtype: int</span>
        """</span>
        no_duplicate_list</span> =</span> []</span>
        for</span> i</span> in</span> nums</span>:</span>
            if</span> i</span> not</span> in</span> no_duplicate_list</span>:</span>
                no_duplicate_list</span>.</span>append</span>(</span>i</span>)</span>
            else</span>:</span>
                no_duplicate_list</span>.</span>remove</span>(</span>i</span>)</span>
        return</span> no_duplicate_list</span>.</span>pop</span>()</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>. We iterate through <span class="maths katex-rendered">n</mi>u</mi>m</mi>s</mi></mtext></mrow><annotation encoding="application/x-tex">text{nums}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">nums</span></span></span></span></span></span>, taking <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> time. We search the whole list to find whether there is duplicate number, taking <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> time. Because search is in the for</code> loop, so we have to multiply both time complexities which is <span class="maths katex-rendered">O</mi>(</mo>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>.  We need a list of size <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> to contain elements in <span class="maths katex-rendered">n</mi>u</mi>m</mi>s</mi></mtext></mrow><annotation encoding="application/x-tex">text{nums}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">nums</span></span></span></span></span></span>.</p>
</li>
</ul>

<h4 id="approach-2-hash-table-accepted">Approach #2 Hash Table [Accepted]</h4>
Algorithm</strong></p>
We use hash table to avoid the <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> time required for searching the elements.</p>

Iterate through all elements in <span class="maths katex-rendered">n</mi>u</mi>m</mi>s</mi></mtext></mrow><annotation encoding="application/x-tex">text{nums}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">nums</span></span></span></span></span></span>
</li>
Try if <span class="maths katex-rendered">h</mi>a</mi>s</mi>h</mi>_</mi>t</mi>a</mi>b</mi>l</mi>e</mi></mrow><annotation encoding="application/x-tex">hash_table</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 1.00444em; vertical-align: -0.31em;"></span><span class="base textstyle uncramped"><span class="mord mathit">h</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">h</span><span class="mord mathrm" style="margin-right: 0.02778em;">_</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit">b</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span></span></span></span></span> has the key for pop</code></li>
If not, set up key/value pair</li>
In the end, there is only one element in <span class="maths katex-rendered">h</mi>a</mi>s</mi>h</mi>_</mi>t</mi>a</mi>b</mi>l</mi>e</mi></mrow><annotation encoding="application/x-tex">hash_table</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 1.00444em; vertical-align: -0.31em;"></span><span class="base textstyle uncramped"><span class="mord mathit">h</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">h</span><span class="mord mathrm" style="margin-right: 0.02778em;">_</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit">b</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span></span></span></span></span>, so use popitem</code> to get it</li>
</ol>
Python</strong></p>
</span>class</span> Solution</span>(</span>object</span>):</span>
    def</span> singleNumber</span>(</span>self</span>,</span> nums</span>):</span>
        """</span>
        :type nums: List[int]</span>
        :rtype: int</span>
        """</span>
        hash_table</span> =</span> {}</span>
        for</span> i</span> in</span> nums</span>:</span>
            try</span>:</span>
                hash_table</span>.</span>pop</span>(</span>i</span>)</span>
            except</span>:</span>
                hash_table</span>[</span>i</span>]</span> =</span> 1</span>
        return</span> hash_table</span>.</span>popitem</span>()[</span>0</span>]</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>∗</mo>1</mn>)</mo>=</mo>O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n * 1) = O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>∗</span><span class="mord mathrm">1</span>)</span>=</span><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>.  Time complexity of for</code> loop is <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. Time complexity of hash table(dictionary in python) operation pop</code> is <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. The space required by <span class="maths katex-rendered">h</mi>a</mi>s</mi>h</mi>_</mi>t</mi>a</mi>b</mi>l</mi>e</mi></mrow><annotation encoding="application/x-tex">hash_table</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 1.00444em; vertical-align: -0.31em;"></span><span class="base textstyle uncramped"><span class="mord mathit">h</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">h</span><span class="mord mathrm" style="margin-right: 0.02778em;">_</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit">b</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span></span></span></span></span> is equal to the number of elements in <span class="maths katex-rendered">n</mi>u</mi>m</mi>s</mi></mtext></mrow><annotation encoding="application/x-tex">text{nums}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">nums</span></span></span></span></span></span>.</p>
</li>
</ul>

<h4 id="approach-3-math-accepted">Approach #3 Math [Accepted]</h4>
Concept</strong></p>

<span class="maths katex-rendered">2</mn>∗</mo>(</mo>a</mi>+</mo>b</mi>+</mo>c</mi>)</mo>−</mo>(</mo>a</mi>+</mo>a</mi>+</mo>b</mi>+</mo>b</mi>+</mo>c</mi>)</mo>=</mo>c</mi></mrow><annotation encoding="application/x-tex">2 * (a + b + c) - (a + a + b + b + c) = c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span>∗</span>(</span><span class="mord mathit">a</span>+</span><span class="mord mathit">b</span>+</span><span class="mord mathit">c</span>)</span>−</span>(</span><span class="mord mathit">a</span>+</span><span class="mord mathit">a</span>+</span><span class="mord mathit">b</span>+</span><span class="mord mathit">b</span>+</span><span class="mord mathit">c</span>)</span>=</span><span class="mord mathit">c</span></span></span></span></span>
</p>
Python</strong></p>
</span>class</span> Solution</span>(</span>object</span>):</span>
    def</span> singleNumber</span>(</span>self</span>,</span> nums</span>):</span>
        """</span>
        :type nums: List[int]</span>
        :rtype: int</span>
        """</span>
        return</span> 2</span> *</span> sum</span>(</span>set</span>(</span>nums</span>))</span> -</span> sum</span>(</span>nums</span>)</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>+</mo>n</mi>)</mo>=</mo>O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n + n) = O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>+</span><span class="mord mathit">n</span>)</span>=</span><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. sum</code> will call next</code> to iterate through <span class="maths katex-rendered">n</mi>u</mi>m</mi>s</mi></mtext></mrow><annotation encoding="application/x-tex">text{nums}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">nums</span></span></span></span></span></span>.
We can see it as sum(list(i, for i in nums))</code> which means the time complexity is <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> because of the number of elements(<span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>) in <span class="maths katex-rendered">n</mi>u</mi>m</mi>s</mi></mtext></mrow><annotation encoding="application/x-tex">text{nums}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">nums</span></span></span></span></span></span>.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>+</mo>n</mi>)</mo>=</mo>O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n + n) = O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>+</span><span class="mord mathit">n</span>)</span>=</span><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. set</code> needs space for the elements in nums</code></p>
</li>
</ul>

<h4 id="approach-4-bit-manipulation-accepted">Approach #4 Bit Manipulation [Accepted]</h4>
Concept</strong></p>

If we take XOR of zero and some bit, it will return that bit

<span class="maths katex-rendered">a</mi>⊕</mo>0</mn>=</mo>a</mi></mrow><annotation encoding="application/x-tex">a oplus 0 = a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span>⊕</span><span class="mord mathrm">0</span>=</span><span class="mord mathit">a</span></span></span></span></span>
</li>
</ul>
</li>
If we take XOR of two same bits, it will return 0

<span class="maths katex-rendered">a</mi>⊕</mo>a</mi>=</mo>0</mn></mrow><annotation encoding="application/x-tex">a oplus a = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span>⊕</span><span class="mord mathit">a</span>=</span><span class="mord mathrm">0</span></span></span></span></span>
</li>
</ul>
</li>

<span class="maths katex-rendered">a</mi>⊕</mo>b</mi>⊕</mo>a</mi>=</mo>(</mo>a</mi>⊕</mo>a</mi>)</mo>⊕</mo>b</mi>=</mo>0</mn>⊕</mo>b</mi>=</mo>b</mi></mrow><annotation encoding="application/x-tex">a oplus b oplus a = (a oplus a) oplus b = 0 oplus b = b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span>⊕</span><span class="mord mathit">b</span>⊕</span><span class="mord mathit">a</span>=</span>(</span><span class="mord mathit">a</span>⊕</span><span class="mord mathit">a</span>)</span>⊕</span><span class="mord mathit">b</span>=</span><span class="mord mathrm">0</span>⊕</span><span class="mord mathit">b</span>=</span><span class="mord mathit">b</span></span></span></span></span>
</li>
</ul>
So we can XOR all bits together to find the unique number.</p>
Python</strong></p>
</span>class</span> Solution</span>(</span>object</span>):</span>
    def</span> singleNumber</span>(</span>self</span>,</span> nums</span>):</span>
        """</span>
        :type nums: List[int]</span>
        :rtype: int</span>
        """</span>
        a</span> =</span> 0</span>
        for</span> i</span> in</span> nums</span>:</span>
            a</span> ^=</span> i</span>
        return</span> a</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>.  We only iterate through <span class="maths katex-rendered">n</mi>u</mi>m</mi>s</mi></mtext></mrow><annotation encoding="application/x-tex">text{nums}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">nums</span></span></span></span></span></span>, so the time complexity is the number of elements in <span class="maths katex-rendered">n</mi>u</mi>m</mi>s</mi></mtext></mrow><annotation encoding="application/x-tex">text{nums}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">nums</span></span></span></span></span></span>.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>.</p>
</li>
</ul>

Analysis written by: <a href="https://leetcode.com/Ambition_Wang">@Ambition_Wang</a></p>