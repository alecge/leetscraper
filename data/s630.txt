<div class="toc hide">

<a href="#solution">Solution</a>
<a href="#approach-1-recursive-solutionaccepted">Approach #1 Recursive Solution[Accepted]</a></li>
<a href="#approach-2-using-queuebfsaccepted">Approach #2 Using queue(BFS)[Accepted]</a></li>
</ul>
</li>
</ul>
</div>
Solution</h2>

<h4 id="approach-1-recursive-solutionaccepted">Approach #1 Recursive Solution[Accepted]</h4>
We start by initializing a <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> array with the dimensions being <span class="maths katex-rendered">h</mi>e</mi>i</mi>g</mi>h</mi>t</mi></mrow><annotation encoding="application/x-tex">height</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">h</span><span class="mord mathit">e</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span></span></span></span></span>x<span class="maths katex-rendered">2</mn>h</mi>e</mi>i</mi>g</mi>h</mi>t</mi></mrow></msup>−</mo>1</mn></mrow><annotation encoding="application/x-tex">2^{height}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.849108em;"></span><span class="strut bottom" style="height: 0.932438em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathit mtight">h</span><span class="mord mathit mtight">e</span><span class="mord mathit mtight">i</span><span class="mord mathit mtight" style="margin-right: 0.03588em;">g</span><span class="mord mathit mtight">h</span><span class="mord mathit mtight">t</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>−</span><span class="mord mathrm">1</span></span></span></span></span>. Here, <span class="maths katex-rendered">h</mi>e</mi>i</mi>g</mi>h</mi>t</mi></mrow><annotation encoding="application/x-tex">height</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">h</span><span class="mord mathit">e</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span></span></span></span></span> refers to the number of levels in the given tree. In order to fill this <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> array with the required elements, initially, we fill the complete array with ""</code> .  After this we make use of a recursive function fill(res, root, i, l, r)</code> which fills the <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> array such that the current element has to be filled in <span class="maths katex-rendered">i</mi>t</mi>h</mi></mrow></msup></mrow><annotation encoding="application/x-tex">i^{th}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.849108em;"></span><span class="strut bottom" style="height: 0.849108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathit mtight">t</span><span class="mord mathit mtight">h</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> row, and the column being the middle of the indices <span class="maths katex-rendered">l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span></span></span></span></span> and <span class="maths katex-rendered">r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span></span></span></span></span>, where <span class="maths katex-rendered">l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span></span></span></span></span> and <span class="maths katex-rendered">r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span></span></span></span></span> refer to the left and the right boundaries of the columns in which the current element can be filled.</p>
In every recursive call, we do as follows:</p>


If we've reached the end of the tree, i.e. if root==null, return.</p>
</li>

Determine the column in which the current element(<span class="maths katex-rendered">r</mi>o</mi>o</mi>t</mi></mrow><annotation encoding="application/x-tex">root</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord mathit">t</span></span></span></span></span>) needs to be filled, which is the middle of <span class="maths katex-rendered">l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span></span></span></span></span> and <span class="maths katex-rendered">r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span></span></span></span></span>, given by say, <span class="maths katex-rendered">j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.85396em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05724em;">j</span></span></span></span></span>. The row number is same as <span class="maths katex-rendered">i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span></span>. Put the current element at <span class="maths katex-rendered">r</mi>e</mi>s</mi>[</mo>i</mi>]</mo>[</mo>j</mi>]</mo></mrow><annotation encoding="application/x-tex">res[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span>[</span><span class="mord mathit">i</span>]</span>[</span><span class="mord mathit" style="margin-right: 0.05724em;">j</span>]</span></span></span></span></span>.</p>
</li>

Make the recursive call for the left child of the <span class="maths katex-rendered">r</mi>o</mi>o</mi>t</mi></mrow><annotation encoding="application/x-tex">root</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord mathit">t</span></span></span></span></span> using fill(res, root.left, i + 1, l, (l + r) / 2)</code>.</p>
</li>

Make the recursive call for the right child of the <span class="maths katex-rendered">r</mi>o</mi>o</mi>t</mi></mrow><annotation encoding="application/x-tex">root</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord mathit">t</span></span></span></span></span> using fill(res, root.right, i + 1, (l + r + 1) / 2, r)</code>.</p>
</li>
</ol>
Note, that in the last two recursive calls, we update the row number(level of the tree). This ensures that the child nodes fit into the correct row. We also update the column boundaries appropriately based on the <span class="maths katex-rendered">l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span></span></span></span></span> and <span class="maths katex-rendered">r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span></span></span></span></span> values.</p>
Further, to determine the <span class="maths katex-rendered">h</mi>e</mi>i</mi>g</mi>h</mi>t</mi></mrow><annotation encoding="application/x-tex">height</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">h</span><span class="mord mathit">e</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span></span></span></span></span> also, we make use of recursive funtion getHeight(root)</code>, which returns the height of the tree starting from the <span class="maths katex-rendered">r</mi>o</mi>o</mi>t</mi></mrow><annotation encoding="application/x-tex">root</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord mathit">t</span></span></span></span></span> node. We traverse into all the branches possible in the tree recursively and find the depth of the longest branch.</p>
At the end, we convert the <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> array into the required list format, before returning the results.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> List</span>&lt;</span>List</span>&lt;</span>String</span>&gt;&gt;</span> printTree</span>(</span>TreeNode</span> root</span>)</span> {</span>
        int</span> height</span> =</span> getHeight</span>(</span>root</span>);</span>
        String</span>[][]</span> res</span> =</span> new</span> String</span>[</span>height</span>][(</span>1</span> &lt;&lt;</span> height</span>)</span> -</span> 1</span>];</span>
        for</span>(</span>String</span>[]</span> arr</span>:</span>res</span>)</span>
            Arrays</span>.</span>fill</span>(</span>arr</span>,</span>""</span>);</span>
        List</span>&lt;</span>List</span>&lt;</span>String</span>&gt;&gt;</span> ans</span> =</span> new</span> ArrayList</span>&lt;&gt;();</span>
        fill</span>(</span>res</span>,</span> root</span>,</span> 0</span>,</span> 0</span>,</span> res</span>[</span>0</span>].</span>length</span>);</span>
        for</span>(</span>String</span>[]</span> arr</span>:</span>res</span>)</span>
            ans</span>.</span>add</span>(</span>Arrays</span>.</span>asList</span>(</span>arr</span>));</span>
        return</span> ans</span>;</span>
    }</span>
    public</span> void</span> fill</span>(</span>String</span>[][]</span> res</span>,</span> TreeNode</span> root</span>,</span> int</span> i</span>,</span> int</span> l</span>,</span> int</span> r</span>)</span> {</span>
        if</span> (</span>root</span> ==</span> null</span>)</span>
            return</span>;</span>
        res</span>[</span>i</span>][(</span>l</span> +</span> r</span>)</span> /</span> 2</span>]</span> =</span> ""</span> +</span> root</span>.</span>val</span>;</span>
        fill</span>(</span>res</span>,</span> root</span>.</span>left</span>,</span> i</span> +</span> 1</span>,</span> l</span>,</span> (</span>l</span> +</span> r</span>)</span> /</span> 2</span>);</span>
        fill</span>(</span>res</span>,</span> root</span>.</span>right</span>,</span> i</span> +</span> 1</span>,</span> (</span>l</span> +</span> r</span> +</span> 1</span>)</span> /</span> 2</span>,</span> r</span>);</span>
    }</span>
    public</span> int</span> getHeight</span>(</span>TreeNode</span> root</span>)</span> {</span>
        if</span> (</span>root</span> ==</span> null</span>)</span>
            return</span> 0</span>;</span>
        return</span> 1</span> +</span> Math</span>.</span>max</span>(</span>getHeight</span>(</span>root</span>.</span>left</span>),</span> getHeight</span>(</span>root</span>.</span>right</span>));</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>h</mi>∗</mo>2</mn>h</mi></msup>)</mo></mrow><annotation encoding="application/x-tex">O(h*2^h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.849108em;"></span><span class="strut bottom" style="height: 1.09911em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">h</span>∗</span><span class="mord mathrm">2</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight">h</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>. We need to fill the <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> array of size <span class="maths katex-rendered">h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">h</span></span></span></span></span>x<span class="maths katex-rendered">2</mn>h</mi></msup>−</mo>1</mn></mrow><annotation encoding="application/x-tex">2^h - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.849108em;"></span><span class="strut bottom" style="height: 0.932438em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight">h</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>−</span><span class="mord mathrm">1</span></span></span></span></span>. Here, <span class="maths katex-rendered">h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">h</span></span></span></span></span> refers to the height of the given tree.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>h</mi>∗</mo>2</mn>h</mi></msup>)</mo></mrow><annotation encoding="application/x-tex">O(h*2^h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.849108em;"></span><span class="strut bottom" style="height: 1.09911em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">h</span>∗</span><span class="mord mathrm">2</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight">h</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>.  <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> array of size <span class="maths katex-rendered">h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">h</span></span></span></span></span>x<span class="maths katex-rendered">2</mn>h</mi></msup>−</mo>1</mn></mrow><annotation encoding="application/x-tex">2^h - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.849108em;"></span><span class="strut bottom" style="height: 0.932438em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight">h</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>−</span><span class="mord mathrm">1</span></span></span></span></span> is used.</p>
</li>
</ul>

<h4 id="approach-2-using-queuebfsaccepted">Approach #2 Using queue(BFS)[Accepted]</h4>
Algorithm</strong></p>
We can also solve the problem by making use of Breadth First Search's idea. For this, we make use of a class <span class="maths katex-rendered">P</mi>a</mi>r</mi>a</mi>m</mi>s</mi></mrow><annotation encoding="application/x-tex">Params</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.68333em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.13889em;">P</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">a</span><span class="mord mathit">m</span><span class="mord mathit">s</span></span></span></span></span> which stores the parameters of a <span class="maths katex-rendered">n</mi>o</mi>d</mi>e</mi></mrow><annotation encoding="application/x-tex">node</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mathit">e</span></span></span></span></span> of  the tree, including its value, its level in the tree(<span class="maths katex-rendered">i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span></span>), and the left(<span class="maths katex-rendered">l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span></span></span></span></span>) and right(<span class="maths katex-rendered">r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span></span></span></span></span>) boundaries of the columns in which this element can be filled in the result to be returned.</p>
We start by initializing a <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> array as in the previous approach. After this, we add the parametrized <span class="maths katex-rendered">r</mi>o</mi>o</mi>t</mi></mrow><annotation encoding="application/x-tex">root</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord mathit">t</span></span></span></span></span> of the tree into a <span class="maths katex-rendered">q</mi>u</mi>e</mi>u</mi>e</mi></mrow><annotation encoding="application/x-tex">queue</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">q</span><span class="mord mathit">u</span><span class="mord mathit">e</span><span class="mord mathit">u</span><span class="mord mathit">e</span></span></span></span></span>. After this, we do the following at every step.</p>


Remove an element, $$p$,  from the front of the <span class="maths katex-rendered">q</mi>u</mi>e</mi>u</mi>e</mi></mrow><annotation encoding="application/x-tex">queue</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">q</span><span class="mord mathit">u</span><span class="mord mathit">e</span><span class="mord mathit">u</span><span class="mord mathit">e</span></span></span></span></span>. </p>
</li>

Add this element at its correct position in the <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> array given by <span class="maths katex-rendered">r</mi>e</mi>s</mi>[</mo>p</mi>.</mi>i</mi>]</mo>[</mo>(</mo>p</mi>.</mi>l</mi>+</mo>p</mi>.</mi>r</mi>)</mo>/</mi>2</mn>]</mo></mrow><annotation encoding="application/x-tex">res[p.i][(p.l + p.r) / 2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span>[</span><span class="mord mathit">p</span><span class="mord mathrm">.</span><span class="mord mathit">i</span>]</span>[</span>(</span><span class="mord mathit">p</span><span class="mord mathrm">.</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span>+</span><span class="mord mathit">p</span><span class="mord mathrm">.</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span>)</span><span class="mord mathrm">/</span><span class="mord mathrm">2</span>]</span></span></span></span></span>. Here, the values <span class="maths katex-rendered">i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span></span>, <span class="maths katex-rendered">l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span></span></span></span></span> and <span class="maths katex-rendered">r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span></span></span></span></span> refer to the column/level number, and the left and right boundaries permissible for putting the current node into <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span>. These are obtained from the node's parameters, which have been associated with it before putting it into the <span class="maths katex-rendered">q</mi>u</mi>e</mi>u</mi>e</mi></mrow><annotation encoding="application/x-tex">queue</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">q</span><span class="mord mathit">u</span><span class="mord mathit">e</span><span class="mord mathit">u</span><span class="mord mathit">e</span></span></span></span></span>.</p>
</li>

If the left child of <span class="maths katex-rendered">p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span></span></span></span></span> exists, put it at the back of the <span class="maths katex-rendered">q</mi>u</mi>e</mi>u</mi>e</mi></mrow><annotation encoding="application/x-tex">queue</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">q</span><span class="mord mathit">u</span><span class="mord mathit">e</span><span class="mord mathit">u</span><span class="mord mathit">e</span></span></span></span></span>, in a parametized form, by appropriately updating the level as the next level and the boundaries permissible as well.</p>
</li>

If the right child of <span class="maths katex-rendered">p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span></span></span></span></span> exists, put it at the back of the <span class="maths katex-rendered">q</mi>u</mi>e</mi>u</mi>e</mi></mrow><annotation encoding="application/x-tex">queue</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">q</span><span class="mord mathit">u</span><span class="mord mathit">e</span><span class="mord mathit">u</span><span class="mord mathit">e</span></span></span></span></span>, in a parametized form, by appropriately updating the level as the next level and the boundaries permissible as well.</p>
</li>

Continue steps 1. to 4. till the <span class="maths katex-rendered">q</mi>u</mi>e</mi>u</mi>e</mi></mrow><annotation encoding="application/x-tex">queue</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">q</span><span class="mord mathit">u</span><span class="mord mathit">e</span><span class="mord mathit">u</span><span class="mord mathit">e</span></span></span></span></span> becomes empty. </p>
</li>
</ol>
At the end, we again convert the <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> array into the required list format, before returning the results.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span>
/**</span>
 * Definition for a binary tree node.</span>
 * public class TreeNode {</span>
 *     int val;</span>
 *     TreeNode left;</span>
 *     TreeNode right;</span>
 *     TreeNode(int x) { val = x; }</span>
 * }</span>
 */</span>
public</span> class</span> Solution</span> {</span>
    class</span> Params</span> {</span>
        Params</span>(</span>TreeNode</span> n</span>,</span> int</span> ii</span>,</span> int</span> ll</span>,</span> int</span> rr</span>)</span> {</span>
            root</span> =</span> n</span>;</span>
            i</span> =</span> ii</span>;</span>
            l</span> =</span> ll</span>;</span>
            r</span> =</span> rr</span>;</span>
        }</span>
        TreeNode</span> root</span>;</span>
        int</span> i</span>,</span> l</span>,</span> r</span>;</span>
    }</span>
    public</span> List</span> &lt;</span> List</span> &lt;</span> String</span> &gt;&gt;</span> printTree</span>(</span>TreeNode</span> root</span>)</span> {</span>
        int</span> height</span> =</span> getHeight</span>(</span>root</span>);</span>
        System</span>.</span>out</span>.</span>println</span>(</span>height</span>);</span>
        String</span>[][]</span> res</span> =</span> new</span> String</span>[</span>height</span>][(</span>1</span> &lt;&lt;</span> height</span>)</span> -</span> 1</span>];</span>
        for</span> (</span>String</span>[]</span> arr</span>:</span> res</span>)</span>
            Arrays</span>.</span>fill</span>(</span>arr</span>,</span> ""</span>);</span>
        List</span> &lt;</span> List</span> &lt;</span> String</span> &gt;&gt;</span> ans</span> =</span> new</span> ArrayList</span> &lt;</span> &gt;</span> ();</span>
        fill</span>(</span>res</span>,</span> root</span>,</span> 0</span>,</span> 0</span>,</span> res</span>[</span>0</span>].</span>length</span>);</span>
        for</span> (</span>String</span>[]</span> arr</span>:</span> res</span>)</span>
            ans</span>.</span>add</span>(</span>Arrays</span>.</span>asList</span>(</span>arr</span>));</span>
        return</span> ans</span>;</span>
    }</span>
    public</span> void</span> fill</span>(</span>String</span>[][]</span> res</span>,</span> TreeNode</span> root</span>,</span> int</span> i</span>,</span> int</span> l</span>,</span> int</span> r</span>)</span> {</span>
        Queue</span> &lt;</span> Params</span> &gt;</span> queue</span> =</span> new</span> LinkedList</span>();</span>
        queue</span>.</span>add</span>(</span>new</span> Params</span>(</span>root</span>,</span> 0</span>,</span> 0</span>,</span> res</span>[</span>0</span>].</span>length</span>));</span>
        while</span> (!</span>queue</span>.</span>isEmpty</span>())</span> {</span>
            Params</span> p</span> =</span> queue</span>.</span>remove</span>();</span>
            res</span>[</span>p</span>.</span>i</span>][(</span>p</span>.</span>l</span> +</span> p</span>.</span>r</span>)</span> /</span> 2</span>]</span> =</span> ""</span> +</span> p</span>.</span>root</span>.</span>val</span>;</span>
            if</span> (</span>p</span>.</span>root</span>.</span>left</span> !=</span> null</span>)</span>
                queue</span>.</span>add</span>(</span>new</span> Params</span>(</span>p</span>.</span>root</span>.</span>left</span>,</span> p</span>.</span>i</span> +</span> 1</span>,</span> p</span>.</span>l</span>,</span> (</span>p</span>.</span>l</span> +</span> p</span>.</span>r</span>)</span> /</span> 2</span>));</span>
            if</span> (</span>p</span>.</span>root</span>.</span>right</span> !=</span> null</span>)</span>
                queue</span>.</span>add</span>(</span>new</span> Params</span>(</span>p</span>.</span>root</span>.</span>right</span>,</span> p</span>.</span>i</span> +</span> 1</span>,</span> (</span>p</span>.</span>l</span> +</span> p</span>.</span>r</span> +</span> 1</span>)</span> /</span> 2</span>,</span> p</span>.</span>r</span>));</span>
        }</span>
    }</span>
    public</span> int</span> getHeight</span>(</span>TreeNode</span> root</span>)</span> {</span>
        Queue</span> &lt;</span> TreeNode</span> &gt;</span> queue</span> =</span> new</span> LinkedList</span>();</span>
        queue</span>.</span>add</span>(</span>root</span>);</span>
        int</span> height</span> =</span> 0</span>;</span>
        while</span> (!</span>queue</span>.</span>isEmpty</span>())</span> {</span>
            height</span>++;</span>
            Queue</span> &lt;</span> TreeNode</span> &gt;</span> temp</span> =</span> new</span> LinkedList</span>();</span>
            while</span> (!</span>queue</span>.</span>isEmpty</span>())</span> {</span>
                TreeNode</span> node</span> =</span> queue</span>.</span>remove</span>();</span>
                if</span> (</span>node</span>.</span>left</span> !=</span> null</span>)</span>
                    temp</span>.</span>add</span>(</span>node</span>.</span>left</span>);</span>
                if</span> (</span>node</span>.</span>right</span> !=</span> null</span>)</span>
                    temp</span>.</span>add</span>(</span>node</span>.</span>right</span>);</span>
            }</span>
            queue</span> =</span> temp</span>;</span>
        }</span>
        return</span> height</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>h</mi>∗</mo>2</mn>h</mi></msup>)</mo></mrow><annotation encoding="application/x-tex">O(h*2^h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.849108em;"></span><span class="strut bottom" style="height: 1.09911em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">h</span>∗</span><span class="mord mathrm">2</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight">h</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>. We need to fill the <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> array of size <span class="maths katex-rendered">h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">h</span></span></span></span></span>x<span class="maths katex-rendered">2</mn>h</mi></msup>−</mo>1</mn></mrow><annotation encoding="application/x-tex">2^h - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.849108em;"></span><span class="strut bottom" style="height: 0.932438em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight">h</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>−</span><span class="mord mathrm">1</span></span></span></span></span>. Here, <span class="maths katex-rendered">h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">h</span></span></span></span></span> refers to the height of the given tree.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>h</mi>∗</mo>2</mn>h</mi></msup>)</mo></mrow><annotation encoding="application/x-tex">O(h*2^h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.849108em;"></span><span class="strut bottom" style="height: 1.09911em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">h</span>∗</span><span class="mord mathrm">2</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight">h</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>.  <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> array of size <span class="maths katex-rendered">h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">h</span></span></span></span></span>x<span class="maths katex-rendered">2</mn>h</mi></msup>−</mo>1</mn></mrow><annotation encoding="application/x-tex">2^h - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.849108em;"></span><span class="strut bottom" style="height: 0.932438em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight">h</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>−</span><span class="mord mathrm">1</span></span></span></span></span> is used.</p>
</li>
</ul>

Analysis written by: <a href="https://leetcode.com/vinod23">@vinod23</a></p>