<div class="toc hide">

<a href="#summary">Summary</a></li>
<a href="#hints">Hints</a></li>
<a href="#solution">Solution</a>
<a href="#approach-1-two-pointers-accepted">Approach #1 (Two Pointers) [Accepted]</a></li>
<a href="#approach-2-two-pointers-when-elements-to-remove-are-rare-accepted">Approach #2 (Two Pointers - when elements to remove are rare) [Accepted]</a></li>
</ul>
</li>
</ul>
</div>
Summary</h2>
This is a pretty easy problem, but one may get confused by the term "in-place" and thought it is impossible to remove an element from the array without making a copy of the array.</p>
Hints</h2>

Try two pointers.</li>
Did you use the property of "the order of elements can be changed"?</li>
What happens when the elements to remove are rare?</li>
</ol>
Solution</h2>

<h4 id="approach-1-two-pointers-accepted">Approach #1 (Two Pointers) [Accepted]</h4>
Intuition</strong></p>
Since question asked us to remove all elements of the given value in-place, we have to handle it with <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span> extra space. How to solve it? We can keep two pointers <span class="maths katex-rendered">i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span></span> and <span class="maths katex-rendered">j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.85396em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05724em;">j</span></span></span></span></span>, where <span class="maths katex-rendered">i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span></span> is the slow-runner while <span class="maths katex-rendered">j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.85396em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05724em;">j</span></span></span></span></span> is the fast-runner.</p>
Algorithm</strong></p>
When <span class="maths katex-rendered">n</mi>u</mi>m</mi>s</mi>[</mo>j</mi>]</mo></mrow><annotation encoding="application/x-tex">nums[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mord mathit">s</span>[</span><span class="mord mathit" style="margin-right: 0.05724em;">j</span>]</span></span></span></span></span> equals to the given value, skip this element by incrementing <span class="maths katex-rendered">j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.85396em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05724em;">j</span></span></span></span></span>. As long as <span class="maths katex-rendered">n</mi>u</mi>m</mi>s</mi>[</mo>j</mi>]</mo>≠</mo>v</mi>a</mi>l</mi></mrow><annotation encoding="application/x-tex">nums[j] neq val</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mord mathit">s</span>[</span><span class="mord mathit" style="margin-right: 0.05724em;">j</span>]</span>≠</span><span class="mord mathit" style="margin-right: 0.03588em;">v</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span></span></span></span></span>, we copy <span class="maths katex-rendered">n</mi>u</mi>m</mi>s</mi>[</mo>j</mi>]</mo></mrow><annotation encoding="application/x-tex">nums[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mord mathit">s</span>[</span><span class="mord mathit" style="margin-right: 0.05724em;">j</span>]</span></span></span></span></span> to <span class="maths katex-rendered">n</mi>u</mi>m</mi>s</mi>[</mo>i</mi>]</mo></mrow><annotation encoding="application/x-tex">nums[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mord mathit">s</span>[</span><span class="mord mathit">i</span>]</span></span></span></span></span> and increment both indexes at the same time. Repeat the process until <span class="maths katex-rendered">j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.85396em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05724em;">j</span></span></span></span></span> reaches the end of the array and the new length is <span class="maths katex-rendered">i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span></span>.</p>
This solution is very similar to the solution to <a href="https://leetcode.com/articles/remove-duplicates-sorted-array/">Remove Duplicates from Sorted Array</a>.</p>
</span>public</span> int</span> removeElement</span>(</span>int</span>[]</span> nums</span>,</span> int</span> val</span>)</span> {</span>
    int</span> i</span> =</span> 0</span>;</span>
    for</span> (</span>int</span> j</span> =</span> 0</span>;</span> j</span> &lt;</span> nums</span>.</span>length</span>;</span> j</span>++)</span> {</span>
        if</span> (</span>nums</span>[</span>j</span>]</span> !=</span> val</span>)</span> {</span>
            nums</span>[</span>i</span>]</span> =</span> nums</span>[</span>j</span>];</span>
            i</span>++;</span>
        }</span>
    }</span>
    return</span> i</span>;</span>
}</span>
</pre></div>


Complexity analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>.
Assume the array has a total of <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> elements, both <span class="maths katex-rendered">i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span></span> and <span class="maths katex-rendered">j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.85396em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05724em;">j</span></span></span></span></span> traverse at most <span class="maths katex-rendered">2</mn>n</mi></mrow><annotation encoding="application/x-tex">2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathit">n</span></span></span></span></span> steps.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>.</p>
</li>
</ul>

<h4 id="approach-2-two-pointers-when-elements-to-remove-are-rare-accepted">Approach #2 (Two Pointers - when elements to remove are rare) [Accepted]</h4>
Intuition</strong></p>
Now consider cases where the array contains few elements to remove. For example, <span class="maths katex-rendered">n</mi>u</mi>m</mi>s</mi>=</mo>[</mo>1</mn>,</mo>2</mn>,</mo>3</mn>,</mo>5</mn>,</mo>4</mn>]</mo>,</mo>v</mi>a</mi>l</mi>=</mo>4</mn></mrow><annotation encoding="application/x-tex">nums = [1,2,3,5,4], val = 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mord mathit">s</span>=</span>[</span><span class="mord mathrm">1</span>,</span><span class="mord mathrm">2</span>,</span><span class="mord mathrm">3</span>,</span><span class="mord mathrm">5</span>,</span><span class="mord mathrm">4</span>]</span>,</span><span class="mord mathit" style="margin-right: 0.03588em;">v</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span>=</span><span class="mord mathrm">4</span></span></span></span></span>. The previous algorithm will do unnecessary copy operation of the first four elements. Another example is <span class="maths katex-rendered">n</mi>u</mi>m</mi>s</mi>=</mo>[</mo>4</mn>,</mo>1</mn>,</mo>2</mn>,</mo>3</mn>,</mo>5</mn>]</mo>,</mo>v</mi>a</mi>l</mi>=</mo>4</mn></mrow><annotation encoding="application/x-tex">nums = [4,1,2,3,5], val = 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mord mathit">s</span>=</span>[</span><span class="mord mathrm">4</span>,</span><span class="mord mathrm">1</span>,</span><span class="mord mathrm">2</span>,</span><span class="mord mathrm">3</span>,</span><span class="mord mathrm">5</span>]</span>,</span><span class="mord mathit" style="margin-right: 0.03588em;">v</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span>=</span><span class="mord mathrm">4</span></span></span></span></span>. It seems unnecessary to move elements <span class="maths katex-rendered">[</mo>1</mn>,</mo>2</mn>,</mo>3</mn>,</mo>5</mn>]</mo></mrow><annotation encoding="application/x-tex">[1,2,3,5]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped">[</span><span class="mord mathrm">1</span>,</span><span class="mord mathrm">2</span>,</span><span class="mord mathrm">3</span>,</span><span class="mord mathrm">5</span>]</span></span></span></span></span> one step left as the problem description mentions that the order of elements could be changed.</p>
Algorithm</strong></p>
When we encounter <span class="maths katex-rendered">n</mi>u</mi>m</mi>s</mi>[</mo>i</mi>]</mo>=</mo>v</mi>a</mi>l</mi></mrow><annotation encoding="application/x-tex">nums[i] = val</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mord mathit">s</span>[</span><span class="mord mathit">i</span>]</span>=</span><span class="mord mathit" style="margin-right: 0.03588em;">v</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span></span></span></span></span>, we can swap the current element out with the last element and dispose the last one. This essentially reduces the array's size by 1.</p>
Note that the last element that was swapped in could be the value you want to remove itself. But don't worry, in the next iteration we will still check this element.</p>
</span>public</span> int</span> removeElement</span>(</span>int</span>[]</span> nums</span>,</span> int</span> val</span>)</span> {</span>
    int</span> i</span> =</span> 0</span>;</span>
    int</span> n</span> =</span> nums</span>.</span>length</span>;</span>
    while</span> (</span>i</span> &lt;</span> n</span>)</span> {</span>
        if</span> (</span>nums</span>[</span>i</span>]</span> ==</span> val</span>)</span> {</span>
            nums</span>[</span>i</span>]</span> =</span> nums</span>[</span>n</span> -</span> 1</span>];</span>
            // reduce array size by one</span>
            n</span>--;</span>
        }</span> else</span> {</span>
            i</span>++;</span>
        }</span>
    }</span>
    return</span> n</span>;</span>
}</span>
</pre></div>


Complexity analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>.
Both <span class="maths katex-rendered">i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span></span> and <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> traverse at most <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> steps. In this approach, the number of assignment operation is equal to the number of elements to remove. So it is more efficient if elements to remove are rare.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>.</p>
</li>
</ul>
Analysis written by @feelxia, revised by @1337c0d3r.</p>