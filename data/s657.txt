<h4 id="approach-1-stack-accepted">Approach #1: Stack [Accepted]</h4>
Intuition and Algorithm</strong></p>
Let's maintain the value of each valid round on a stack as we process the data.  A stack is ideal since we only deal with operations involving the last or second-last valid round.</p>
Python</strong></p>
</span>class</span> Solution</span>(</span>object</span>):</span>
    def</span> calPoints</span>(</span>self</span>,</span> ops</span>):</span>
        stack</span> =</span> []</span>
        for</span> op</span> in</span> ops</span>:</span>
            if</span> op</span> ==</span> '+'</span>:</span>
                stack</span>.</span>append</span>(</span>stack</span>[</span>-</span>1</span>]</span> +</span> stack</span>[</span>-</span>2</span>])</span>
            elif</span> op</span> ==</span> 'C'</span>:</span>
                stack</span>.</span>pop</span>()</span>
            elif</span> op</span> ==</span> 'D'</span>:</span>
                stack</span>.</span>append</span>(</span>2</span> *</span> stack</span>[</span>-</span>1</span>])</span>
            else</span>:</span>
                stack</span>.</span>append</span>(</span>int</span>(</span>op</span>))</span>

        return</span> sum</span>(</span>stack</span>)</span>
</pre></div>


Java</strong></p>
</span>class</span> Solution</span> {</span>
    public</span> int</span> calPoints</span>(</span>String</span>[]</span> ops</span>)</span> {</span>
        Stack</span>&lt;</span>Integer</span>&gt;</span> stack</span> =</span> new</span> Stack</span>();</span>

        for</span>(</span>String</span> op</span> :</span> ops</span>)</span> {</span>
            if</span> (</span>op</span>.</span>equals</span>(</span>"+"</span>))</span> {</span>
                int</span> top</span> =</span> stack</span>.</span>pop</span>();</span>
                int</span> newtop</span> =</span> top</span> +</span> stack</span>.</span>peek</span>();</span>
                stack</span>.</span>push</span>(</span>top</span>);</span>
                stack</span>.</span>push</span>(</span>newtop</span>);</span>
            }</span> else</span> if</span> (</span>op</span>.</span>equals</span>(</span>"C"</span>))</span> {</span>
                stack</span>.</span>pop</span>();</span>
            }</span> else</span> if</span> (</span>op</span>.</span>equals</span>(</span>"D"</span>))</span> {</span>
                stack</span>.</span>push</span>(</span>2</span> *</span> stack</span>.</span>peek</span>());</span>
            }</span> else</span> {</span>
                stack</span>.</span>push</span>(</span>Integer</span>.</span>valueOf</span>(</span>op</span>));</span>
            }</span>
        }</span>

        int</span> ans</span> =</span> 0</span>;</span>
        for</span>(</span>int</span> score</span> :</span> stack</span>)</span> ans</span> +=</span> score</span>;</span>
        return</span> ans</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time Complexity: <span class="maths katex-rendered">O</mi>(</mo>N</mi>)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>)</span></span></span></span></span>, where <span class="maths katex-rendered">N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.68333em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10903em;">N</span></span></span></span></span> is the length of ops</code>.  We parse through every element in the given array once, and do <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span> work for each element.</p>
</li>

Space Complexity: <span class="maths katex-rendered">O</mi>(</mo>N</mi>)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>)</span></span></span></span></span>, the space used to store our stack</code>.</p>
</li>
</ul>