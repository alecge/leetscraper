Solution
Approach #1 Recursive Solution[Accepted]
We start by initializing a
res
res array with the dimensions being
height
heightx
2^{height}-1
2
height
−1. Here,
height
height refers to the number of levels in the given tree. In order to fill this
res
res array with the required elements, initially, we fill the complete array with "" . After this we make use of a recursive function fill(res, root, i, l, r) which fills the
res
res array such that the current element has to be filled in
i^{th}
i
th
row, and the column being the middle of the indices
l
l and
r
r, where
l
l and
r
r refer to the left and the right boundaries of the columns in which the current element can be filled.
In every recursive call, we do as follows:
If we've reached the end of the tree, i.e. if root==null, return.
Determine the column in which the current element(
root
root) needs to be filled, which is the middle of
l
l and
r
r, given by say,
j
j. The row number is same as
i
i. Put the current element at
res[i][j]
res[i][j].
Make the recursive call for the left child of the
root
root using fill(res, root.left, i + 1, l, (l + r) / 2).
Make the recursive call for the right child of the
root
root using fill(res, root.right, i + 1, (l + r + 1) / 2, r).
Note, that in the last two recursive calls, we update the row number(level of the tree). This ensures that the child nodes fit into the correct row. We also update the column boundaries appropriately based on the
l
l and
r
r values.
Further, to determine the
height
height also, we make use of recursive funtion getHeight(root), which returns the height of the tree starting from the
root
root node. We traverse into all the branches possible in the tree recursively and find the depth of the longest branch.
At the end, we convert the
res
res array into the required list format, before returning the results.
Java
public class Solution {
    public List<List<String>> printTree(TreeNode root) {
        int height = getHeight(root);
        String[][] res = new String[height][(1 << height) - 1];
        for(String[] arr:res)
            Arrays.fill(arr,"");
        List<List<String>> ans = new ArrayList<>();
        fill(res, root, 0, 0, res[0].length);
        for(String[] arr:res)
            ans.add(Arrays.asList(arr));
        return ans;
    }
    public void fill(String[][] res, TreeNode root, int i, int l, int r) {
        if (root == null)
            return;
        res[i][(l + r) / 2] = "" + root.val;
        fill(res, root.left, i + 1, l, (l + r) / 2);
        fill(res, root.right, i + 1, (l + r + 1) / 2, r);
    }
    public int getHeight(TreeNode root) {
        if (root == null)
            return 0;
        return 1 + Math.max(getHeight(root.left), getHeight(root.right));
    }
}
Complexity Analysis
Time complexity :
O(h*2^h)
O(h∗2
h
). We need to fill the
res
res array of size
h
hx
2^h - 1
2
h
−1. Here,
h
h refers to the height of the given tree.
Space complexity :
O(h*2^h)
O(h∗2
h
).
res
res array of size
h
hx
2^h - 1
2
h
−1 is used.
Approach #2 Using queue(BFS)[Accepted]
Algorithm
We can also solve the problem by making use of Breadth First Search's idea. For this, we make use of a class
Params
Params which stores the parameters of a
node
node of the tree, including its value, its level in the tree(
i
i), and the left(
l
l) and right(
r
r) boundaries of the columns in which this element can be filled in the result to be returned.
We start by initializing a
res
res array as in the previous approach. After this, we add the parametrized
root
root of the tree into a
queue
queue. After this, we do the following at every step.
Remove an element, $$p$, from the front of the
queue
queue.
Add this element at its correct position in the
res
res array given by
res[p.i][(p.l + p.r) / 2]
res[p.i][(p.l+p.r)/2]. Here, the values
i
i,
l
l and
r
r refer to the column/level number, and the left and right boundaries permissible for putting the current node into
res
res. These are obtained from the node's parameters, which have been associated with it before putting it into the
queue
queue.
If the left child of
p
p exists, put it at the back of the
queue
queue, in a parametized form, by appropriately updating the level as the next level and the boundaries permissible as well.
If the right child of
p
p exists, put it at the back of the
queue
queue, in a parametized form, by appropriately updating the level as the next level and the boundaries permissible as well.
Continue steps 1. to 4. till the
queue
queue becomes empty.
At the end, we again convert the
res
res array into the required list format, before returning the results.
Java
public class Solution
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    class Params {
        Params(TreeNode n, int ii, int ll, int rr) {
            root = n;
            i = ii;
            l = ll;
            r = rr;
        }
        TreeNode root;
        int i, l, r;
    }
    public List < List < String >> printTree(TreeNode root) {
        int height = getHeight(root);
        System.out.println(height);
        String[][] res = new String[height][(1 << height) - 1];
        for (String[] arr: res)
            Arrays.fill(arr, "");
        List < List < String >> ans = new ArrayList < > ();
        fill(res, root, 0, 0, res[0].length);
        for (String[] arr: res)
            ans.add(Arrays.asList(arr));
        return ans;
    }
    public void fill(String[][] res, TreeNode root, int i, int l, int r) {
        Queue < Params > queue = new LinkedList();
        queue.add(new Params(root, 0, 0, res[0].length));
        while (!queue.isEmpty()) {
            Params p = queue.remove();
            res[p.i][(p.l + p.r) / 2] = "" + p.root.val;
            if (p.root.left != null)
                queue.add(new Params(p.root.left, p.i + 1, p.l, (p.l + p.r) / 2));
            if (p.root.right != null)
                queue.add(new Params(p.root.right, p.i + 1, (p.l + p.r + 1) / 2, p.r));
        }
    }
    public int getHeight(TreeNode root) {
        Queue < TreeNode > queue = new LinkedList();
        queue.add(root);
        int height = 0;
        while (!queue.isEmpty()) {
            height++;
            Queue < TreeNode > temp = new LinkedList();
            while (!queue.isEmpty()) {
                TreeNode node = queue.remove();
                if (node.left != null)
                    temp.add(node.left);
                if (node.right != null)
                    temp.add(node.right);
            }
            queue = temp;
        }
        return height;
    }
}
Complexity Analysis
Time complexity :
O(h*2^h)
O(h∗2
h
). We need to fill the
res
res array of size
h
hx
2^h - 1
2
h
−1. Here,
h
h refers to the height of the given tree.
Space complexity :
O(h*2^h)
O(h∗2
h
).
res
res array of size
h
hx
2^h - 1
2
h
−1 is used.
Analysis written by: @vinod23