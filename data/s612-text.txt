Solution
Approach #1 Using Stack [Time Limit Exceeded]
Before starting off with the solution, let's discuss a simple idea. Suppose we have three functions
func_1
func
1
,
func_2
func
2
and
func_3
func
3
such that
func_1
func
1
calls
func_2
func
2
and then
func_2
func
2
calls
func_3
func
3
. In this case,
func_3
func
3
starts at the end and ends first,
func_2
func
2
starts at 2nd position and ends at the 2nd last step. Similarly,
func_1
func
1
starts first and ends at the last position. Thus, we can conclude that the function which is entered at the end finishes first and the one which is entered first ends at the last position.
From the above discussion, we can conclude that we can make use of a
stack
stack to solve the given problem. We can start by pushing the first function's id from the given
logs
logs list onto the array. We also keep a track of the current
time
time. We also make use of a
res
res array, such that
res[i]
res[i] is to keep a track of the exclusive time spent by the Fucntion with function id
i
i till the current time.
Now, we can move on to the next function in
logs
logs. The start/end time of the next function will obviously be larger than the start time of the function on the
stack
stack. We keep on incrementing the current
time
time and the exclusive time for the function on the top of the
stack
stack till the current time becomes equal to the start/end time of the next function in the
logs
logs list.
Thus, now, we've reached a point, where the control shifts from the last function to a new function, due to a function call(indicated by a start label for the next function), or the last function could exit(indicated by the end label for the next function). Thus, we can no longer continue with the same old function.
If the next function includes a start label, we push this function on the top of the
stack
stack, since the last function would need to be revisited again in the future. On the other hand, if the next function includes an end label, it means the last function on the top of the
stack
stack is terminating.
We also know that an end label indicates that this function executes till the end of the given time. Thus, we need to increment the current
time
time and the exclusive time of the last function as well to account for this fact. Now, we can remove(pop) this function from the
stack
stack. We can continue this process for every function in the
logs
logs list.
At the end, the
res
res array gives the exclusive times for each function.
Summarizing the above process, we need to do the following:
Push the function id of the first function in the
logs
logs list on the
stack
stack.
Keep incrementing the exlusive time(along with the current time) corresponding to the function on the top of the
stack
stack(in the
res
res array), till the current time equals the start/end time corresponding to the next function in the
logs
logs list.
If the next function has a 'start' label, push this function's id onto the stack. Otherwise, increment the last function's exclusive time(along with the current time), and pop the function id from the top of the stack.
Repeat steps 2 and 3 till all the functions in the
logs
logs list have been considered.
Return the resultant exlcusive time(
res
res).
Java
public class Solution {
    public int[] exclusiveTime(int n, List < String > logs) {
        Stack < Integer > stack = new Stack < > ();
        int[] res = new int[n];
        String[] s = logs.get(0).split(":");
        stack.push(Integer.parseInt(s[0]));
        int i = 1, time = Integer.parseInt(s[2]);
        while (i < logs.size()) {
            s = logs.get(i).split(":");
            while (time < Integer.parseInt(s[2])) {
                res[stack.peek()]++;
                time++;
            }
            if (s[1].equals("start"))
                stack.push(Integer.parseInt(s[0]));
            else {
                res[stack.peek()]++;
                time++;
                stack.pop();
            }
            i++;
        }
        return res;
    }
}
Complexity Analysis
Time complexity :
O(t)
O(t). We increment the time till all the functions are done with the execution. Here,
t
t refers to the end time of the last function in the
logs
logs list.
Space complexity :
O(n)
O(n). The
stack
stack can grow upto a depth of atmost
n/2
n/2. Here,
n
n refers to the number of elements in the given
logs
logs list.
Approach #2 Better Approach [Accepted]
Algorithm
In the last approach, for every function on the top of the
stack
stack, we incremented the current time and the exclusive time of this same function till the current time became equal to the start/end time of the next function.
Instead of doing this incrementing step by step, we can directly use the difference between the next function's start/stop time and the current function's start/stop time. The rest of the process remains the same as in the last approach.
The following animation illustrates the process.
1 / 8
Java
public class Solution {
    public int[] exclusiveTime(int n, List < String > logs) {
        Stack < Integer > stack = new Stack < > ();
        int[] res = new int[n];
        String[] s = logs.get(0).split(":");
        stack.push(Integer.parseInt(s[0]));
        int i = 1, prev = Integer.parseInt(s[2]);
        while (i < logs.size()) {
            s = logs.get(i).split(":");
            if (s[1].equals("start")) {
                if (!stack.isEmpty())
                    res[stack.peek()] += Integer.parseInt(s[2]) - prev;
                stack.push(Integer.parseInt(s[0]));
                prev = Integer.parseInt(s[2]);
            } else {
                res[stack.peek()] += Integer.parseInt(s[2]) - prev + 1;
                stack.pop();
                prev = Integer.parseInt(s[2]) + 1;
            }
            i++;
        }
        return res;
    }
}
Complexity Analysis
Time complexity :
O(n)
O(n). We iterate over the entire
logs
logs array just once. Here,
n
n refers to the number of elements in the
logs
logs list.
Space complexity : The
stack
stack can grow upto a depth of atmost
n/2
n/2. Here,
n
n refers to the number of elements in the given
logs
logs list.
Analysis written by: @vinod23