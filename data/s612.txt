<div class="toc hide">

<a href="#solution">Solution</a>
<a href="#approach-1-using-stack-time-limit-exceeded">Approach #1 Using Stack [Time Limit Exceeded]</a></li>
<a href="#approach-2-better-approach-accepted">Approach #2 Better Approach [Accepted]</a></li>
</ul>
</li>
</ul>
</div>
Solution</h2>

<h4 id="approach-1-using-stack-time-limit-exceeded">Approach #1 Using Stack [Time Limit Exceeded]</h4>
Before starting off with the solution, let's discuss a simple idea. Suppose we have three functions <span class="maths katex-rendered">f</mi>u</mi>n</mi>c</mi>1</mn></msub></mrow><annotation encoding="application/x-tex">func_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">u</span><span class="mord mathit">n</span><span class="mord mathit">c</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>, <span class="maths katex-rendered">f</mi>u</mi>n</mi>c</mi>2</mn></msub></mrow><annotation encoding="application/x-tex">func_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">u</span><span class="mord mathit">n</span><span class="mord mathit">c</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> and <span class="maths katex-rendered">f</mi>u</mi>n</mi>c</mi>3</mn></msub></mrow><annotation encoding="application/x-tex">func_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">u</span><span class="mord mathit">n</span><span class="mord mathit">c</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> such that <span class="maths katex-rendered">f</mi>u</mi>n</mi>c</mi>1</mn></msub></mrow><annotation encoding="application/x-tex">func_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">u</span><span class="mord mathit">n</span><span class="mord mathit">c</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> calls <span class="maths katex-rendered">f</mi>u</mi>n</mi>c</mi>2</mn></msub></mrow><annotation encoding="application/x-tex">func_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">u</span><span class="mord mathit">n</span><span class="mord mathit">c</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> and then <span class="maths katex-rendered">f</mi>u</mi>n</mi>c</mi>2</mn></msub></mrow><annotation encoding="application/x-tex">func_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">u</span><span class="mord mathit">n</span><span class="mord mathit">c</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> calls <span class="maths katex-rendered">f</mi>u</mi>n</mi>c</mi>3</mn></msub></mrow><annotation encoding="application/x-tex">func_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">u</span><span class="mord mathit">n</span><span class="mord mathit">c</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>. In this case, <span class="maths katex-rendered">f</mi>u</mi>n</mi>c</mi>3</mn></msub></mrow><annotation encoding="application/x-tex">func_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">u</span><span class="mord mathit">n</span><span class="mord mathit">c</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> starts at the end and ends first, <span class="maths katex-rendered">f</mi>u</mi>n</mi>c</mi>2</mn></msub></mrow><annotation encoding="application/x-tex">func_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">u</span><span class="mord mathit">n</span><span class="mord mathit">c</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> starts at 2nd position and ends at the 2nd last step. Similarly, <span class="maths katex-rendered">f</mi>u</mi>n</mi>c</mi>1</mn></msub></mrow><annotation encoding="application/x-tex">func_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">u</span><span class="mord mathit">n</span><span class="mord mathit">c</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> starts first and ends at the last position. Thus, we can conclude that the function which is entered at the end finishes first and the one which is entered first ends at the last position. </p>
From the above discussion, we can conclude that we can make use of a <span class="maths katex-rendered">s</mi>t</mi>a</mi>c</mi>k</mi></mrow><annotation encoding="application/x-tex">stack</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit">c</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> to solve the given problem. We can start by pushing the first function's id from the given <span class="maths katex-rendered">l</mi>o</mi>g</mi>s</mi></mrow><annotation encoding="application/x-tex">logs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">s</span></span></span></span></span> list onto the array. We also keep a track of the current <span class="maths katex-rendered">t</mi>i</mi>m</mi>e</mi></mrow><annotation encoding="application/x-tex">time</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">t</span><span class="mord mathit">i</span><span class="mord mathit">m</span><span class="mord mathit">e</span></span></span></span></span>. We also make use of a <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> array, such that <span class="maths katex-rendered">r</mi>e</mi>s</mi>[</mo>i</mi>]</mo></mrow><annotation encoding="application/x-tex">res[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span>[</span><span class="mord mathit">i</span>]</span></span></span></span></span> is to keep a track of the exclusive time spent by the Fucntion with function id <span class="maths katex-rendered">i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span></span> till the current time. </p>
Now, we can move on to the next function in <span class="maths katex-rendered">l</mi>o</mi>g</mi>s</mi></mrow><annotation encoding="application/x-tex">logs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">s</span></span></span></span></span>. The start/end time of the next function will obviously be larger than the start time of the function on the <span class="maths katex-rendered">s</mi>t</mi>a</mi>c</mi>k</mi></mrow><annotation encoding="application/x-tex">stack</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit">c</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>. We keep on incrementing the current <span class="maths katex-rendered">t</mi>i</mi>m</mi>e</mi></mrow><annotation encoding="application/x-tex">time</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">t</span><span class="mord mathit">i</span><span class="mord mathit">m</span><span class="mord mathit">e</span></span></span></span></span> and the exclusive time for the function on the top of the <span class="maths katex-rendered">s</mi>t</mi>a</mi>c</mi>k</mi></mrow><annotation encoding="application/x-tex">stack</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit">c</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> till the current time becomes equal to the start/end time of the next function in the <span class="maths katex-rendered">l</mi>o</mi>g</mi>s</mi></mrow><annotation encoding="application/x-tex">logs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">s</span></span></span></span></span> list. </p>
Thus, now, we've reached a point, where the control shifts from the last function to a new function, due to a function call(indicated by a start label for the next function), or the last function could exit(indicated by the end label for the next function). Thus, we can no longer continue with the same old function. </p>
If the next function includes a start label, we push this function on the top of the <span class="maths katex-rendered">s</mi>t</mi>a</mi>c</mi>k</mi></mrow><annotation encoding="application/x-tex">stack</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit">c</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>, since the last function would need to be revisited again in the future. On the other hand, if the next function includes an end label, it means the last function on the top of the <span class="maths katex-rendered">s</mi>t</mi>a</mi>c</mi>k</mi></mrow><annotation encoding="application/x-tex">stack</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit">c</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> is terminating.</p>
We also know that an end label indicates that this function executes till the end of the given time. Thus, we need to increment the current <span class="maths katex-rendered">t</mi>i</mi>m</mi>e</mi></mrow><annotation encoding="application/x-tex">time</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">t</span><span class="mord mathit">i</span><span class="mord mathit">m</span><span class="mord mathit">e</span></span></span></span></span> and the exclusive time of the last function as well to account for this fact. Now, we can remove(pop) this function from the <span class="maths katex-rendered">s</mi>t</mi>a</mi>c</mi>k</mi></mrow><annotation encoding="application/x-tex">stack</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit">c</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>.  We can continue this process for every function in the <span class="maths katex-rendered">l</mi>o</mi>g</mi>s</mi></mrow><annotation encoding="application/x-tex">logs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">s</span></span></span></span></span> list. </p>
At the end, the <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> array gives the exclusive times for each function.</p>
Summarizing the above process, we need to do the following:</p>


Push the function id of the first function in the <span class="maths katex-rendered">l</mi>o</mi>g</mi>s</mi></mrow><annotation encoding="application/x-tex">logs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">s</span></span></span></span></span> list on the <span class="maths katex-rendered">s</mi>t</mi>a</mi>c</mi>k</mi></mrow><annotation encoding="application/x-tex">stack</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit">c</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>.</p>
</li>

Keep incrementing the exlusive time(along with the current time) corresponding to the function on the top of the <span class="maths katex-rendered">s</mi>t</mi>a</mi>c</mi>k</mi></mrow><annotation encoding="application/x-tex">stack</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit">c</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>(in the <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> array), till the current time equals the start/end time corresponding to the next function in the <span class="maths katex-rendered">l</mi>o</mi>g</mi>s</mi></mrow><annotation encoding="application/x-tex">logs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">s</span></span></span></span></span> list.</p>
</li>

If the next function has a 'start' label, push this function's id onto the stack. Otherwise, increment the last function's exclusive time(along with the current time), and pop the function id from the top of the stack.</p>
</li>

Repeat steps 2 and 3 till all the functions in the <span class="maths katex-rendered">l</mi>o</mi>g</mi>s</mi></mrow><annotation encoding="application/x-tex">logs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">s</span></span></span></span></span> list have been considered.</p>
</li>

Return the resultant exlcusive time(<span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span>).</p>
</li>
</ol>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> int</span>[]</span> exclusiveTime</span>(</span>int</span> n</span>,</span> List</span> &lt;</span> String</span> &gt;</span> logs</span>)</span> {</span>
        Stack</span> &lt;</span> Integer</span> &gt;</span> stack</span> =</span> new</span> Stack</span> &lt;</span> &gt;</span> ();</span>
        int</span>[]</span> res</span> =</span> new</span> int</span>[</span>n</span>];</span>
        String</span>[]</span> s</span> =</span> logs</span>.</span>get</span>(</span>0</span>).</span>split</span>(</span>":"</span>);</span>
        stack</span>.</span>push</span>(</span>Integer</span>.</span>parseInt</span>(</span>s</span>[</span>0</span>]));</span>
        int</span> i</span> =</span> 1</span>,</span> time</span> =</span> Integer</span>.</span>parseInt</span>(</span>s</span>[</span>2</span>]);</span>
        while</span> (</span>i</span> &lt;</span> logs</span>.</span>size</span>())</span> {</span>
            s</span> =</span> logs</span>.</span>get</span>(</span>i</span>).</span>split</span>(</span>":"</span>);</span>
            while</span> (</span>time</span> &lt;</span> Integer</span>.</span>parseInt</span>(</span>s</span>[</span>2</span>]))</span> {</span>
                res</span>[</span>stack</span>.</span>peek</span>()]++;</span>
                time</span>++;</span>
            }</span>
            if</span> (</span>s</span>[</span>1</span>].</span>equals</span>(</span>"start"</span>))</span>
                stack</span>.</span>push</span>(</span>Integer</span>.</span>parseInt</span>(</span>s</span>[</span>0</span>]));</span>
            else</span> {</span>
                res</span>[</span>stack</span>.</span>peek</span>()]++;</span>
                time</span>++;</span>
                stack</span>.</span>pop</span>();</span>
            }</span>
            i</span>++;</span>
        }</span>
        return</span> res</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>t</mi>)</mo></mrow><annotation encoding="application/x-tex">O(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">t</span>)</span></span></span></span></span>. We increment the time till all the functions are done with the execution. Here, <span class="maths katex-rendered">t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">t</span></span></span></span></span> refers to the end time of the last function in the <span class="maths katex-rendered">l</mi>o</mi>g</mi>s</mi></mrow><annotation encoding="application/x-tex">logs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">s</span></span></span></span></span> list.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. The <span class="maths katex-rendered">s</mi>t</mi>a</mi>c</mi>k</mi></mrow><annotation encoding="application/x-tex">stack</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit">c</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> can grow upto a depth of atmost <span class="maths katex-rendered">n</mi>/</mi>2</mn></mrow><annotation encoding="application/x-tex">n/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mord mathrm">/</span><span class="mord mathrm">2</span></span></span></span></span>. Here, <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> refers to the number of elements in the given <span class="maths katex-rendered">l</mi>o</mi>g</mi>s</mi></mrow><annotation encoding="application/x-tex">logs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">s</span></span></span></span></span> list.</p>
</li>
</ul>

<h4 id="approach-2-better-approach-accepted">Approach #2 Better Approach [Accepted]</h4>
Algorithm</strong></p>
In the last approach, for every function on the top of the <span class="maths katex-rendered">s</mi>t</mi>a</mi>c</mi>k</mi></mrow><annotation encoding="application/x-tex">stack</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit">c</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>, we incremented the current time and the exclusive time of this same function till the current time became equal to the start/end time of the next function. </p>
Instead of doing this incrementing step by step, we can directly use the difference between the next function's start/stop time and the current function's start/stop time. The rest of the process remains the same as in the last approach. </p>
The following animation illustrates the process.</p>
<div class="diaporama" style="width: 1000px; height: 563px;"><div class="initial-play play-container"><div class="fa fa-play"></div></div></canvas></div><div class="control-panel" style="width: 940px;"><div class="control-group dia-back fa fa-step-backward"></div><div class="toggle-play control-group fa fa-play"></div><div class="control-group fa fa-step-forward"></div></div>1 / 8</div></div></div>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> int</span>[]</span> exclusiveTime</span>(</span>int</span> n</span>,</span> List</span> &lt;</span> String</span> &gt;</span> logs</span>)</span> {</span>
        Stack</span> &lt;</span> Integer</span> &gt;</span> stack</span> =</span> new</span> Stack</span> &lt;</span> &gt;</span> ();</span>
        int</span>[]</span> res</span> =</span> new</span> int</span>[</span>n</span>];</span>
        String</span>[]</span> s</span> =</span> logs</span>.</span>get</span>(</span>0</span>).</span>split</span>(</span>":"</span>);</span>
        stack</span>.</span>push</span>(</span>Integer</span>.</span>parseInt</span>(</span>s</span>[</span>0</span>]));</span>
        int</span> i</span> =</span> 1</span>,</span> prev</span> =</span> Integer</span>.</span>parseInt</span>(</span>s</span>[</span>2</span>]);</span>
        while</span> (</span>i</span> &lt;</span> logs</span>.</span>size</span>())</span> {</span>
            s</span> =</span> logs</span>.</span>get</span>(</span>i</span>).</span>split</span>(</span>":"</span>);</span>
            if</span> (</span>s</span>[</span>1</span>].</span>equals</span>(</span>"start"</span>))</span> {</span>
                if</span> (!</span>stack</span>.</span>isEmpty</span>())</span>
                    res</span>[</span>stack</span>.</span>peek</span>()]</span> +=</span> Integer</span>.</span>parseInt</span>(</span>s</span>[</span>2</span>])</span> -</span> prev</span>;</span>
                stack</span>.</span>push</span>(</span>Integer</span>.</span>parseInt</span>(</span>s</span>[</span>0</span>]));</span>
                prev</span> =</span> Integer</span>.</span>parseInt</span>(</span>s</span>[</span>2</span>]);</span>
            }</span> else</span> {</span>
                res</span>[</span>stack</span>.</span>peek</span>()]</span> +=</span> Integer</span>.</span>parseInt</span>(</span>s</span>[</span>2</span>])</span> -</span> prev</span> +</span> 1</span>;</span>
                stack</span>.</span>pop</span>();</span>
                prev</span> =</span> Integer</span>.</span>parseInt</span>(</span>s</span>[</span>2</span>])</span> +</span> 1</span>;</span>
            }</span>
            i</span>++;</span>
        }</span>
        return</span> res</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. We iterate over the entire <span class="maths katex-rendered">l</mi>o</mi>g</mi>s</mi></mrow><annotation encoding="application/x-tex">logs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">s</span></span></span></span></span> array just once. Here, <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> refers to the number of elements in the <span class="maths katex-rendered">l</mi>o</mi>g</mi>s</mi></mrow><annotation encoding="application/x-tex">logs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">s</span></span></span></span></span> list.</p>
</li>

Space complexity : The <span class="maths katex-rendered">s</mi>t</mi>a</mi>c</mi>k</mi></mrow><annotation encoding="application/x-tex">stack</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit">c</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> can grow upto a depth of atmost <span class="maths katex-rendered">n</mi>/</mi>2</mn></mrow><annotation encoding="application/x-tex">n/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mord mathrm">/</span><span class="mord mathrm">2</span></span></span></span></span>. Here, <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> refers to the number of elements in the given <span class="maths katex-rendered">l</mi>o</mi>g</mi>s</mi></mrow><annotation encoding="application/x-tex">logs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">s</span></span></span></span></span> list.</p>
</li>
</ul>

Analysis written by: <a href="https://leetcode.com/vinod23">@vinod23</a></p>