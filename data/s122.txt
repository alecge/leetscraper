<div class="toc hide">

<a href="#summary">Summary</a></li>
<a href="#solution">Solution</a>
<a href="#approach-1-brute-force-time-limit-exceeded">Approach #1 Brute Force [Time Limit Exceeded]</a></li>
<a href="#approach-2-peak-valley-approach-accepted">Approach #2 (Peak Valley Approach) [Accepted]</a></li>
<a href="#approach-3-simple-one-pass-accepted">Approach #3 (Simple One Pass) [Accepted]</a></li>
</ul>
</li>
</ul>
</div>
Summary</h2>
We have to determine the maximum profit that can be obtained by making the transactions (no limit on the number of transactions done). For this we need to find out those sets of buying and selling prices which together lead to the maximization of profit.</p>
Solution</h2>

<h4 id="approach-1-brute-force-time-limit-exceeded">Approach #1 Brute Force [Time Limit Exceeded]</h4>
In this case, we simply calculate the profit corresponding to all the possible sets of transactions and find out the maximum profit out of them.</p>
Java</strong></p>
</span>class</span> Solution</span> {</span>
    public</span> int</span> maxProfit</span>(</span>int</span>[]</span> prices</span>)</span> {</span>
        return</span> calculate</span>(</span>prices</span>,</span> 0</span>);</span>
    }</span>

    public</span> int</span> calculate</span>(</span>int</span> prices</span>[],</span> int</span> s</span>)</span> {</span>
        if</span> (</span>s</span> &gt;=</span> prices</span>.</span>length</span>)</span>
            return</span> 0</span>;</span>
        int</span> max</span> =</span> 0</span>;</span>
        for</span> (</span>int</span> start</span> =</span> s</span>;</span> start</span> &lt;</span> prices</span>.</span>length</span>;</span> start</span>++)</span> {</span>
            int</span> maxprofit</span> =</span> 0</span>;</span>
            for</span> (</span>int</span> i</span> =</span> start</span> +</span> 1</span>;</span> i</span> &lt;</span> prices</span>.</span>length</span>;</span> i</span>++)</span> {</span>
                if</span> (</span>prices</span>[</span>start</span>]</span> &lt;</span> prices</span>[</span>i</span>])</span> {</span>
                    int</span> profit</span> =</span> calculate</span>(</span>prices</span>,</span> i</span> +</span> 1</span>)</span> +</span> prices</span>[</span>i</span>]</span> -</span> prices</span>[</span>start</span>];</span>
                    if</span> (</span>profit</span> &gt;</span> maxprofit</span>)</span>
                        maxprofit</span> =</span> profit</span>;</span>
                }</span>
            }</span>
            if</span> (</span>maxprofit</span> &gt;</span> max</span>)</span>
                max</span> =</span> maxprofit</span>;</span>
        }</span>
        return</span> max</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>

Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>n</mi></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight">n</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>. Recursive function is called <span class="maths katex-rendered">n</mi>n</mi></msup></mrow><annotation encoding="application/x-tex">n^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.664392em;"></span><span class="strut bottom" style="height: 0.664392em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathit mtight">n</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> times.</li>
Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. Depth of recursion is <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>.</li>
</ul>

<h4 id="approach-2-peak-valley-approach-accepted">Approach #2 (Peak Valley Approach) [Accepted]</h4>
Algorithm</strong></p>
Say the given array is:</p>
[7, 1, 5, 3, 6, 4].</p>
If we plot the numbers of the given array on a graph, we get:</p>
<img alt="Profit Graph" src="https://leetcode.com/media/original_images/122_maxprofit_1.PNG" width="539px"></p>
If we analyze the graph, we notice that the points of interest are the consecutive valleys and peaks.</p>
Mathematically speaking:
<p class="maths katex-rendered">T</mi>o</mi>t</mi>a</mi>l</mi>P</mi>r</mi>o</mi>f</mi>i</mi>t</mi>=</mo>∑</mo>i</mi></mrow></msub>(</mo>h</mi>e</mi>i</mi>g</mi>h</mi>t</mi>(</mo>p</mi>e</mi>a</mi>k</mi>i</mi></msub>)</mo>−</mo>h</mi>e</mi>i</mi>g</mi>h</mi>t</mi>(</mo>v</mi>a</mi>l</mi>l</mi>e</mi>y</mi>i</mi></msub>)</mo>)</mo></mrow><annotation encoding="application/x-tex">
Total Profit= sum_{i}(height(peak_i)-height(valley_i))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 1.05001em;"></span><span class="strut bottom" style="height: 2.32767em; vertical-align: -1.27767em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right: 0.13889em;">T</span><span class="mord mathit">o</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit" style="margin-right: 0.13889em;">P</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">i</span><span class="mord mathit">t</span>=</span><span class="mop op-limits"><span class="" style="top: 1.17767em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord scriptstyle cramped mtight"><span class="mord mathit mtight">i</span></span></span></span><span class="" style="top: -5e-06em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class=""><span class="mop op-symbol large-op">∑</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span>(</span><span class="mord mathit">h</span><span class="mord mathit">e</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span>(</span><span class="mord mathit">p</span><span class="mord mathit">e</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.03148em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathit mtight">i</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span>−</span><span class="mord mathit">h</span><span class="mord mathit">e</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span>(</span><span class="mord mathit" style="margin-right: 0.03588em;">v</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right: 0.03588em;">y</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathit mtight">i</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span>)</span></span></span></span></span></p>
</p>
The key point is we need to consider every peak immediately following a valley to maximize the profit. In case we skip one of the peaks (trying to obtain more profit), we will end up losing the profit over one of the transactions leading to an overall lesser profit.</p>
For example, in the above case, if we skip <span class="maths katex-rendered">p</mi>e</mi>a</mi>k</mi>i</mi></msub></mrow><annotation encoding="application/x-tex">peak_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="mord mathit">e</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.03148em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathit mtight">i</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> and <span class="maths katex-rendered">v</mi>a</mi>l</mi>l</mi>e</mi>y</mi>j</mi></msub></mrow><annotation encoding="application/x-tex">valley_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.980548em; vertical-align: -0.286108em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">v</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right: 0.03588em;">y</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathit mtight" style="margin-right: 0.05724em;">j</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> trying to obtain more profit by considering points with more difference in heights, the net profit obtained will always be lesser than the one obtained by including them, since <span class="maths katex-rendered">C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.68333em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.07153em;">C</span></span></span></span></span> will always be lesser than <span class="maths katex-rendered">A</mi>+</mo>B</mi></mrow><annotation encoding="application/x-tex">A+B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.76666em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">A</span>+</span><span class="mord mathit" style="margin-right: 0.05017em;">B</span></span></span></span></span>.</p>
Java</strong></p>
</span>class</span> Solution</span> {</span>
    public</span> int</span> maxProfit</span>(</span>int</span>[]</span> prices</span>)</span> {</span>
        int</span> i</span> =</span> 0</span>;</span>
        int</span> valley</span> =</span> prices</span>[</span>0</span>];</span>
        int</span> peak</span> =</span> prices</span>[</span>0</span>];</span>
        int</span> maxprofit</span> =</span> 0</span>;</span>
        while</span> (</span>i</span> &lt;</span> prices</span>.</span>length</span> -</span> 1</span>)</span> {</span>
            while</span> (</span>i</span> &lt;</span> prices</span>.</span>length</span> -</span> 1</span> &amp;&amp;</span> prices</span>[</span>i</span>]</span> &gt;=</span> prices</span>[</span>i</span> +</span> 1</span>])</span>
                i</span>++;</span>
            valley</span> =</span> prices</span>[</span>i</span>];</span>
            while</span> (</span>i</span> &lt;</span> prices</span>.</span>length</span> -</span> 1</span> &amp;&amp;</span> prices</span>[</span>i</span>]</span> &lt;=</span> prices</span>[</span>i</span> +</span> 1</span>])</span>
                i</span>++;</span>
            peak</span> =</span> prices</span>[</span>i</span>];</span>
            maxprofit</span> +=</span> peak</span> -</span> valley</span>;</span>
        }</span>
        return</span> maxprofit</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. Single pass.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. Constant space required.</p>
</li>
</ul>

<h4 id="approach-3-simple-one-pass-accepted">Approach #3 (Simple One Pass) [Accepted]</h4>
Algorithm</strong></p>
This solution follows the logic used in Approach 2 itself, but with only a slight variation. In this case, instead of looking for every peak following a valley, we can simply go on crawling over the slope and keep on adding the profit obtained from every consecutive transaction. In the end,we will be using the peaks and valleys effectively, but we need not track the costs corresponding to the peaks and valleys along with the maximum profit, but we can directly keep on adding the difference between the consecutive numbers of the array if the second number is larger than the first one, and at the total sum we obtain will be the maximum profit. This approach will simplify the solution.
This can be made clearer by taking this example:</p>
[1, 7, 2, 3, 6, 7, 6, 7]</p>
The graph corresponding to this array is:</p>
<img alt="Profit Graph" src="https://leetcode.com/media/original_images/122_maxprofit_2.PNG" width="539px"></p>
From the above graph, we can observe that the sum <span class="maths katex-rendered">A</mi>+</mo>B</mi>+</mo>C</mi></mrow><annotation encoding="application/x-tex">A+B+C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.76666em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">A</span>+</span><span class="mord mathit" style="margin-right: 0.05017em;">B</span>+</span><span class="mord mathit" style="margin-right: 0.07153em;">C</span></span></span></span></span> is equal to the difference <span class="maths katex-rendered">D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.68333em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">D</span></span></span></span></span> corresponding to the difference between the heights of the consecutive peak and valley.</p>
Java</strong></p>
</span>class</span> Solution</span> {</span>
    public</span> int</span> maxProfit</span>(</span>int</span>[]</span> prices</span>)</span> {</span>
        int</span> maxprofit</span> =</span> 0</span>;</span>
        for</span> (</span>int</span> i</span> =</span> 1</span>;</span> i</span> &lt;</span> prices</span>.</span>length</span>;</span> i</span>++)</span> {</span>
            if</span> (</span>prices</span>[</span>i</span>]</span> &gt;</span> prices</span>[</span>i</span> -</span> 1</span>])</span>
                maxprofit</span> +=</span> prices</span>[</span>i</span>]</span> -</span> prices</span>[</span>i</span> -</span> 1</span>];</span>
        }</span>
        return</span> maxprofit</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. Single pass.</p>
</li>

Space complexity: <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. Constant space needed.</p>
</li>
</ul>
Analysis written by: <a href="https://leetcode.com/vinod23">@vinod23</a></p>