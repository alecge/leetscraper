<div class="toc hide">

<a href="#solution">Solution</a>
<a href="#approach-1-using-hashsetaccepted">Approach #1 Using HashSet[Accepted]</a></li>
<a href="#approach-2-using-bfs-and-hashset-accepted">Approach #2 Using BFS and HashSet [Accepted]</a></li>
<a href="#approach-3-using-bst-accepted">Approach #3 Using BST [Accepted]</a></li>
</ul>
</li>
</ul>
</div>
Solution</h2>

<h4 id="approach-1-using-hashsetaccepted">Approach #1 Using HashSet[Accepted]</h4>
The simplest solution will be to traverse over the whole tree and consider every possible pair of nodes to determine if they can form the required sum <span class="maths katex-rendered">k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>. But, we can improve the process if we look at a little catch here.</p>
If the sum of two elements <span class="maths katex-rendered">x</mi>+</mo>y</mi></mrow><annotation encoding="application/x-tex">x + y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.58333em;"></span><span class="strut bottom" style="height: 0.77777em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span>+</span><span class="mord mathit" style="margin-right: 0.03588em;">y</span></span></span></span></span> equals <span class="maths katex-rendered">k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>, and we already know that <span class="maths katex-rendered">x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span></span> exists in the given tree, we only need to check if an element <span class="maths katex-rendered">y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">y</span></span></span></span></span> exists in the given tree, such that <span class="maths katex-rendered">y</mi>=</mo>k</mi>−</mo>x</mi></mrow><annotation encoding="application/x-tex">y = k - x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">y</span>=</span><span class="mord mathit" style="margin-right: 0.03148em;">k</span>−</span><span class="mord mathit">x</span></span></span></span></span>. Based on this simple catch, we can traverse the tree in both the directions(left child and right child) at every step. We keep a track of the elements which have been found so far during the tree traversal, by putting them into a <span class="maths katex-rendered">s</mi>e</mi>t</mi></mrow><annotation encoding="application/x-tex">set</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">e</span><span class="mord mathit">t</span></span></span></span></span>. </p>
For every current node with a value of <span class="maths katex-rendered">p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span></span></span></span></span>, we check if <span class="maths katex-rendered">k</mi>−</mo>p</mi></mrow><annotation encoding="application/x-tex">k-p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span>−</span><span class="mord mathit">p</span></span></span></span></span> already exists in the array. If so, we can conclude that the sum <span class="maths katex-rendered">k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> can be formed by using the two elements from the given tree. Otherwise, we put this value <span class="maths katex-rendered">p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span></span></span></span></span> into the <span class="maths katex-rendered">s</mi>e</mi>t</mi></mrow><annotation encoding="application/x-tex">set</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">e</span><span class="mord mathit">t</span></span></span></span></span>.</p>
If even after the whole tree's traversal, no such element <span class="maths katex-rendered">p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span></span></span></span></span> can be found, the sum <span class="maths katex-rendered">k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> can't be formed by using any two elements.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> boolean</span> findTarget</span>(</span>TreeNode</span> root</span>,</span> int</span> k</span>)</span> {</span>
        Set</span> &lt;</span> Integer</span> &gt;</span> set</span> =</span> new</span> HashSet</span>();</span>
        return</span> find</span>(</span>root</span>,</span> k</span>,</span> set</span>);</span>
    }</span>
    public</span> boolean</span> find</span>(</span>TreeNode</span> root</span>,</span> int</span> k</span>,</span> Set</span> &lt;</span> Integer</span> &gt;</span> set</span>)</span> {</span>
        if</span> (</span>root</span> ==</span> null</span>)</span>
            return</span> false</span>;</span>
        if</span> (</span>set</span>.</span>contains</span>(</span>k</span> -</span> root</span>.</span>val</span>))</span>
            return</span> true</span>;</span>
        set</span>.</span>add</span>(</span>root</span>.</span>val</span>);</span>
        return</span> find</span>(</span>root</span>.</span>left</span>,</span> k</span>,</span> set</span>)</span> ||</span> find</span>(</span>root</span>.</span>right</span>,</span> k</span>,</span> set</span>);</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. The entire tree is traversed only once in the worst case. Here, <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> refers to the number of nodes in the given tree.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. The size of the <span class="maths katex-rendered">s</mi>e</mi>t</mi></mrow><annotation encoding="application/x-tex">set</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">e</span><span class="mord mathit">t</span></span></span></span></span> can grow upto <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> in the worst case.</p>
</li>
</ul>

<h4 id="approach-2-using-bfs-and-hashset-accepted">Approach #2 Using BFS and HashSet [Accepted]</h4>
Algorithm</strong></p>
In this approach, the idea of using the <span class="maths katex-rendered">s</mi>e</mi>t</mi></mrow><annotation encoding="application/x-tex">set</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">e</span><span class="mord mathit">t</span></span></span></span></span> is the same as in the last approach. But, we can carry on the traversal in a Breadth First Search manner, which is a very common traversal method used in Trees. The way BFS is used can be summarized as given below. We start by putting the root node into a <span class="maths katex-rendered">q</mi>u</mi>e</mi>u</mi>e</mi></mrow><annotation encoding="application/x-tex">queue</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">q</span><span class="mord mathit">u</span><span class="mord mathit">e</span><span class="mord mathit">u</span><span class="mord mathit">e</span></span></span></span></span>. We also maintain a <span class="maths katex-rendered">s</mi>e</mi>t</mi></mrow><annotation encoding="application/x-tex">set</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">e</span><span class="mord mathit">t</span></span></span></span></span> similar to the last approach. Then, at every step, we do as follows:</p>


Remove an element, <span class="maths katex-rendered">p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span></span></span></span></span>,  from the front of the <span class="maths katex-rendered">q</mi>u</mi>e</mi>u</mi>e</mi></mrow><annotation encoding="application/x-tex">queue</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">q</span><span class="mord mathit">u</span><span class="mord mathit">e</span><span class="mord mathit">u</span><span class="mord mathit">e</span></span></span></span></span>. </p>
</li>

Check if the element <span class="maths katex-rendered">k</mi>−</mo>p</mi></mrow><annotation encoding="application/x-tex">k-p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span>−</span><span class="mord mathit">p</span></span></span></span></span> already exists in the <span class="maths katex-rendered">s</mi>e</mi>t</mi></mrow><annotation encoding="application/x-tex">set</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">e</span><span class="mord mathit">t</span></span></span></span></span>. If so, return True.</p>
</li>

Otherwise, add this element, <span class="maths katex-rendered">p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span></span></span></span></span> to the <span class="maths katex-rendered">s</mi>e</mi>t</mi></mrow><annotation encoding="application/x-tex">set</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">e</span><span class="mord mathit">t</span></span></span></span></span>. Further, add the right and the left child nodes of the current node to the back of the <span class="maths katex-rendered">q</mi>u</mi>e</mi>u</mi>e</mi></mrow><annotation encoding="application/x-tex">queue</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">q</span><span class="mord mathit">u</span><span class="mord mathit">e</span><span class="mord mathit">u</span><span class="mord mathit">e</span></span></span></span></span>.</p>
</li>

Continue steps 1. to 3. till the <span class="maths katex-rendered">q</mi>u</mi>e</mi>u</mi>e</mi></mrow><annotation encoding="application/x-tex">queue</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">q</span><span class="mord mathit">u</span><span class="mord mathit">e</span><span class="mord mathit">u</span><span class="mord mathit">e</span></span></span></span></span> becomes empty. </p>
</li>

Return false if the <span class="maths katex-rendered">q</mi>u</mi>e</mi>u</mi>e</mi></mrow><annotation encoding="application/x-tex">queue</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">q</span><span class="mord mathit">u</span><span class="mord mathit">e</span><span class="mord mathit">u</span><span class="mord mathit">e</span></span></span></span></span> becomes empty.</p>
</li>
</ol>
By following this process, we traverse the tree on a level by level basis. </p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> boolean</span> findTarget</span>(</span>TreeNode</span> root</span>,</span> int</span> k</span>)</span> {</span>
        Set</span> &lt;</span> Integer</span> &gt;</span> set</span> =</span> new</span> HashSet</span>();</span>
        Queue</span> &lt;</span> TreeNode</span> &gt;</span> queue</span> =</span> new</span> LinkedList</span>();</span>
        queue</span>.</span>add</span>(</span>root</span>);</span>
        while</span> (!</span>queue</span>.</span>isEmpty</span>())</span> {</span>
            if</span> (</span>queue</span>.</span>peek</span>()</span> !=</span> null</span>)</span> {</span>
                TreeNode</span> node</span> =</span> queue</span>.</span>remove</span>();</span>
                if</span> (</span>set</span>.</span>contains</span>(</span>k</span> -</span> node</span>.</span>val</span>))</span>
                    return</span> true</span>;</span>
                set</span>.</span>add</span>(</span>node</span>.</span>val</span>);</span>
                queue</span>.</span>add</span>(</span>node</span>.</span>right</span>);</span>
                queue</span>.</span>add</span>(</span>node</span>.</span>left</span>);</span>
            }</span> else</span>
                queue</span>.</span>remove</span>();</span>
        }</span>
        return</span> false</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. We need to traverse over the whole tree once in the worst case.  Here, <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> refers to the number of nodes in the given tree.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. The size of the <span class="maths katex-rendered">s</mi>e</mi>t</mi></mrow><annotation encoding="application/x-tex">set</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">e</span><span class="mord mathit">t</span></span></span></span></span> can grow atmost upto <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>. </p>
</li>
</ul>

<h4 id="approach-3-using-bst-accepted">Approach #3 Using BST [Accepted]</h4>
Algorithm</strong></p>
In this approach, we make use of the fact that the given tree is a Binary  Search Tree. Now, we know that the inorder traversal of a BST gives the nodes in ascending order. Thus, we do the inorder traversal of the given tree and put the results in a <span class="maths katex-rendered">l</mi>i</mi>s</mi>t</mi></mrow><annotation encoding="application/x-tex">list</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathit">t</span></span></span></span></span> which contains the nodes sorted in ascending order.</p>
Once this is done, we make use of two pointers <span class="maths katex-rendered">l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span></span></span></span></span> and <span class="maths katex-rendered">r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span></span></span></span></span> pointing to the beginning and the end of the sorted <span class="maths katex-rendered">l</mi>i</mi>s</mi>t</mi></mrow><annotation encoding="application/x-tex">list</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathit">t</span></span></span></span></span>. Then, we do as follows:</p>


Check if the sum of the elements pointed by <span class="maths katex-rendered">l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span></span></span></span></span> and <span class="maths katex-rendered">r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span></span></span></span></span> is equal to the required sum <span class="maths katex-rendered">k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>. If so, return a True immediately.</p>
</li>

Otherwise, if the sum of the current two elements is lesser than the required sum <span class="maths katex-rendered">k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>, update <span class="maths katex-rendered">l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span></span></span></span></span> to point to the next element. This is done, because, we need to increase the sum of the current elements, which can only be done by increasing the smaller number.</p>
</li>

Otherwise, if the sum of the current two elements is larger than the required sum <span class="maths katex-rendered">k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>, update <span class="maths katex-rendered">r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span></span></span></span></span> to point to the previous element. This is done, because, we need to decrease the sum of the current elements, which can only be done by reducing the larger number. </p>
</li>

Continue steps 1. to 3. till the left pointer <span class="maths katex-rendered">l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span></span></span></span></span> crosses the right pointer <span class="maths katex-rendered">r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span></span></span></span></span>.</p>
</li>

If the two pointers cross each other, return a False value.</p>
</li>
</ol>
Note that we need not increase the larger number or reduce the smaller number in any case. This happens because, in case, a number larger than the current <span class="maths katex-rendered">l</mi>i</mi>s</mi>t</mi>[</mo>r</mi>]</mo></mrow><annotation encoding="application/x-tex">list[r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathit">t</span>[</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span>]</span></span></span></span></span> is needed to form the required sum <span class="maths katex-rendered">k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span>, the right pointer could not have been reduced in the first place. The similar argument holds true for not reducing the smaller number as well.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> boolean</span> findTarget</span>(</span>TreeNode</span> root</span>,</span> int</span> k</span>)</span> {</span>
        List</span> &lt;</span> Integer</span> &gt;</span> list</span> =</span> new</span> ArrayList</span>();</span>
        inorder</span>(</span>root</span>,</span> list</span>);</span>
        int</span> l</span> =</span> 0</span>,</span> r</span> =</span> list</span>.</span>size</span>()</span> -</span> 1</span>;</span>
        while</span> (</span>l</span> &lt;</span> r</span>)</span> {</span>
            int</span> sum</span> =</span> list</span>.</span>get</span>(</span>l</span>)</span> +</span> list</span>.</span>get</span>(</span>r</span>);</span>
            if</span> (</span>sum</span> ==</span> k</span>)</span>
                return</span> true</span>;</span>
            if</span> (</span>sum</span> &lt;</span> k</span>)</span>
                l</span>++;</span>
            else</span>
                r</span>--;</span>
        }</span>
        return</span> false</span>;</span>
    }</span>
    public</span> void</span> inorder</span>(</span>TreeNode</span> root</span>,</span> List</span> &lt;</span> Integer</span> &gt;</span> list</span>)</span> {</span>
        if</span> (</span>root</span> ==</span> null</span>)</span>
            return</span>;</span>
        inorder</span>(</span>root</span>.</span>left</span>,</span> list</span>);</span>
        list</span>.</span>add</span>(</span>root</span>.</span>val</span>);</span>
        inorder</span>(</span>root</span>.</span>right</span>,</span> list</span>);</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. We need to traverse over the whole tree once to do the inorder traversal.  Here, <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> refers to the number of nodes in the given tree.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. The sorted <span class="maths katex-rendered">l</mi>i</mi>s</mi>t</mi></mrow><annotation encoding="application/x-tex">list</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathit">t</span></span></span></span></span> will contain <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> elements.</p>
</li>
</ul>

Analysis written by: <a href="https://leetcode.com/vinod23">@vinod23</a></p>