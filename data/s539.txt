<div class="toc hide">

<a href="#solution">Solution</a>
<a href="#approach-1-simple-solutionaccepted">Approach #1 Simple Solution[Accepted]</a></li>
<a href="#approach-2-without-using-pre-defined-split-and-reverse-function-accepted">Approach #2 Without using pre-defined split and reverse function [Accepted]</a></li>
<a href="#approach-3-using-stringbuilder-and-reverse-method-accepted">Approach #3 Using StringBuilder and reverse method [Accepted]</a></li>
</ul>
</li>
</ul>
</div>
Solution</h2>

<h4 id="approach-1-simple-solutionaccepted">Approach #1 Simple Solution[Accepted]</h4>
The first method is really simple. We simply split up the given string based on whitespaces and put the individual words in an array of strings. Then, we reverse each individual string and concatenate the result. We return the result after removing the additional whitespaces at the end.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> String</span> reverseWords</span>(</span>String</span> s</span>)</span> {</span>
        String</span> words</span>[]</span> =</span> s</span>.</span>split</span>(</span>" "</span>);</span>
        StringBuilder</span> res</span>=</span>new</span> StringBuilder</span>();</span>
        for</span> (</span>String</span> word</span>:</span> words</span>)</span>
            res</span>.</span>append</span>(</span>new</span> StringBuffer</span>(</span>word</span>).</span>reverse</span>().</span>toString</span>()</span> +</span> " "</span>);</span>
        return</span> res</span>.</span>toString</span>().</span>trim</span>();</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. where <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the length of the string.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> of size <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is used.</p>
</li>
</ul>

<h4 id="approach-2-without-using-pre-defined-split-and-reverse-function-accepted">Approach #2 Without using pre-defined split and reverse function [Accepted]</h4>
Algorithm</strong></p>
We can create our own split and reverse function. Split function splits the string based on the delimiter " "(space) and returns the array of words. Reverse function returns the string after reversing the characters.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> String</span> reverseWords</span>(</span>String</span> s</span>)</span> {</span>
        String</span> words</span>[]</span> =</span> split</span>(</span>s</span>);</span>
        StringBuilder</span> res</span>=</span>new</span> StringBuilder</span>();</span>
        for</span> (</span>String</span> word</span>:</span> words</span>)</span>
            res</span>.</span>append</span>(</span>reverse</span>(</span>word</span>)</span> +</span> " "</span>);</span>
        return</span> res</span>.</span>toString</span>().</span>trim</span>();</span>
    }</span>
    public</span> String</span>[]</span> split</span>(</span>String</span> s</span>)</span> {</span>
        ArrayList</span> &lt;</span> String</span> &gt;</span> words</span> =</span> new</span> ArrayList</span> &lt;</span> &gt;</span> ();</span>
        StringBuilder</span> word</span> =</span> new</span> StringBuilder</span>();</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> s</span>.</span>length</span>();</span> i</span>++)</span> {</span>
            if</span> (</span>s</span>.</span>charAt</span>(</span>i</span>)</span> ==</span> ' '</span>)</span> {</span>
                words</span>.</span>add</span>(</span>word</span>.</span>toString</span>());</span>
                word</span> =</span> new</span> StringBuilder</span>();</span>
            }</span> else</span>
                word</span>.</span>append</span>(</span> s</span>.</span>charAt</span>(</span>i</span>));</span>
        }</span>
        words</span>.</span>add</span>(</span>word</span>.</span>toString</span>());</span>
        return</span> words</span>.</span>toArray</span>(</span>new</span> String</span>[</span>words</span>.</span>size</span>()]);</span>
    }</span>
    public</span> String</span> reverse</span>(</span>String</span> s</span>)</span> {</span>
      StringBuilder</span> res</span>=</span>new</span> StringBuilder</span>();</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> s</span>.</span>length</span>();</span> i</span>++)</span>
            res</span>.</span>insert</span>(</span>0</span>,</span>s</span>.</span>charAt</span>(</span>i</span>));</span>
        return</span> res</span>.</span>toString</span>();</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>

Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. where <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the length of the string.</li>
Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> of size <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is used.</li>
</ul>

<h4 id="approach-3-using-stringbuilder-and-reverse-method-accepted">Approach #3 Using StringBuilder and reverse method [Accepted]</h4>
Algorithm</strong></p>
Instead of using split method, we can use temporary string <span class="maths katex-rendered">w</mi>o</mi>r</mi>d</mi></mrow><annotation encoding="application/x-tex">word</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02691em;">w</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">d</span></span></span></span></span> to store the word. We simply append the characters to the <span class="maths katex-rendered">w</mi>o</mi>r</mi>d</mi></mrow><annotation encoding="application/x-tex">word</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02691em;">w</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">d</span></span></span></span></span> until ' '</code> character is not found. On getting ' '</code> we append the reverse of the <span class="maths katex-rendered">w</mi>o</mi>r</mi>d</mi></mrow><annotation encoding="application/x-tex">word</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02691em;">w</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">d</span></span></span></span></span> to the resultant string <span class="maths katex-rendered">r</mi>e</mi>s</mi>u</mi>l</mi>t</mi></mrow><annotation encoding="application/x-tex">result</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span><span class="mord mathit">u</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">t</span></span></span></span></span>. Also after completion of loop , we still have to append the <span class="maths katex-rendered">r</mi>e</mi>v</mi>e</mi>r</mi>s</mi>e</mi></mrow><annotation encoding="application/x-tex">reverse</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right: 0.03588em;">v</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">s</span><span class="mord mathit">e</span></span></span></span></span> of the <span class="maths katex-rendered">w</mi>o</mi>r</mi>d</mi></mrow><annotation encoding="application/x-tex">word</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02691em;">w</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">d</span></span></span></span></span>(last word) to the <span class="maths katex-rendered">r</mi>e</mi>s</mi>u</mi>l</mi>t</mi></mrow><annotation encoding="application/x-tex">result</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span><span class="mord mathit">u</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">t</span></span></span></span></span> string. </p>
Below code is inspired by <a href="http://leetcode.com/apolloX">@ApolloX</a>.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> String</span> reverseWords</span>(</span>String</span> input</span>)</span> {</span>
        final</span> StringBuilder</span> result</span> =</span> new</span> StringBuilder</span>();</span>
        final</span> StringBuilder</span> word</span> =</span> new</span> StringBuilder</span>();</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> input</span>.</span>length</span>();</span> i</span>++)</span> {</span>
            if</span> (</span>input</span>.</span>charAt</span>(</span>i</span>)</span> !=</span> ' '</span>)</span> {</span>
                word</span>.</span>append</span>(</span>input</span>.</span>charAt</span>(</span>i</span>));</span>
            }</span> else</span> {</span>
                result</span>.</span>append</span>(</span>word</span>.</span>reverse</span>());</span>
                result</span>.</span>append</span>(</span>" "</span>);</span>
                word</span>.</span>setLength</span>(</span>0</span>);</span>
            }</span>
        }</span>
        result</span>.</span>append</span>(</span>word</span>.</span>reverse</span>());</span>
        return</span> result</span>.</span>toString</span>();</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>

Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. Single loop upto <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is there, where <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the length of the string.</li>
Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. <span class="maths katex-rendered">r</mi>e</mi>s</mi>u</mi>l</mi>t</mi></mrow><annotation encoding="application/x-tex">result</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span><span class="mord mathit">u</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">t</span></span></span></span></span> and <span class="maths katex-rendered">w</mi>o</mi>r</mi>d</mi></mrow><annotation encoding="application/x-tex">word</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02691em;">w</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">d</span></span></span></span></span> size will grow upto <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>.</li>
</ul>

Analysis written by: <a href="https://leetcode.com/vinod23">@vinod23</a></p>