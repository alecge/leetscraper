Solution
Approach #1 Recursive Solution[Accepted]
The current solution is very simple. We make use of a function construct(nums, l, r), which returns the maximum binary tree consisting of numbers within the indices
l
l and
r
r in the given
nums
nums array(excluding the
r^{th}
r
th
element).
The algorithm consists of the following steps:
Start with the function call construct(nums, 0, n). Here,
n
n refers to the number of elements in the given
nums
nums array.
Find the index,
max_i
max
i
, of the largest element in the current range of indices
(l:r-1)
(l:râˆ’1). Make this largest element, $
nums[max_i]
nums[max
i
] as the local root node.
Determine the left child using construct(nums, l, max_i). Doing this recursively finds the largest element in the subarray left to the current largest element.
Similarly, determine the right child using construct(nums, max_i + 1, r).
Return the root node to the calling function.
Java
public class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        return construct(nums, 0, nums.length);
    }
    public TreeNode construct(int[] nums, int l, int r) {
        if (l == r)
            return null;
        int max_i = max(nums, l, r);
        TreeNode root = new TreeNode(nums[max_i]);
        root.left = construct(nums, l, max_i);
        root.right = construct(nums, max_i + 1, r);
        return root;
    }
    public int max(int[] nums, int l, int r) {
        int max_i = l;
        for (int i = l; i < r; i++) {
            if (nums[max_i] < nums[i])
                max_i = i;
        }
        return max_i;
    }
}
Complexity Analysis
Time complexity :
O(n^2)
O(n
2
). The function construct is called
n
n times. At each level of the recursive tree, we traverse over all the
n
n elements to find the maximum element. In the average case, there will be a
log(n)
log(n) levels leading to a complexity of
O\big(nlog(n)\big)
O(nlog(n)). In the worst case, the depth of the recursive tree can grow upto
n
n, which happens in the case of a sorted
nums
nums array, giving a complexity of
O(n^2)
O(n
2
).
Space complexity :
O(n)
O(n). The size of the
set
set can grow upto
n
n in the worst case. In the average case, the size will be
log(n)
log(n) for
n
n elements in
nums
nums, giving an average case complexity of
O(log(n))
O(log(n))
Analysis written by: @vinod23