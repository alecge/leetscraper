<div class="toc hide">

<a href="#summary">Summary</a></li>
<a href="#solution">Solution</a>
<a href="#approach-1-hash-table-accepted">Approach #1 (Hash Table) [Accepted]</a></li>
<a href="#approach-2-two-pointers-accepted">Approach #2 (Two Pointers) [Accepted]</a></li>
</ul>
</li>
</ul>
</div>
Summary</h2>
This article is for beginners. It introduces the following ideas: Linked List, Hash Table and Two Pointers.</p>
Solution</h2>

<h4 id="approach-1-hash-table-accepted">Approach #1 (Hash Table) [Accepted]</h4>
Intuition</strong></p>
To detect if a list is cyclic, we can check whether a node had been visited before. A natural way is to use a hash table.</p>
Algorithm</strong></p>
We go through each node one by one and record each node's reference (or memory address) in a hash table. If the current node is null</code>, we have reached the end of the list and it must not be cyclic. If current nodeâ€™s reference is in the hash table, then return true.</p>
</span>public</span> boolean</span> hasCycle</span>(</span>ListNode</span> head</span>)</span> {</span>
    Set</span>&lt;</span>ListNode</span>&gt;</span> nodesSeen</span> =</span> new</span> HashSet</span>&lt;&gt;();</span>
    while</span> (</span>head</span> !=</span> null</span>)</span> {</span>
        if</span> (</span>nodesSeen</span>.</span>contains</span>(</span>head</span>))</span> {</span>
            return</span> true</span>;</span>
        }</span> else</span> {</span>
            nodesSeen</span>.</span>add</span>(</span>head</span>);</span>
        }</span>
        head</span> =</span> head</span>.</span>next</span>;</span>
    }</span>
    return</span> false</span>;</span>
}</span>
</pre></div>


Complexity analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>.
We visit each of the <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> elements in the list at most once. Adding a node to the hash table costs only <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span> time.</p>
</li>

Space complexity: <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>.
The space depends on the number of elements added to the hash table, which contains at most <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> elements.</p>
</li>
</ul>

<h4 id="approach-2-two-pointers-accepted">Approach #2 (Two Pointers) [Accepted]</h4>
Intuition</strong></p>
Imagine two runners running on a track at different speed. What happens when the track is actually a circle?</p>
Algorithm</strong></p>
The space complexity can be reduced to <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span> by considering two pointers at different speed</strong> - a slow pointer and a fast pointer. The slow pointer moves one step at a time while the fast pointer moves two steps at a time.</p>
If there is no cycle in the list, the fast pointer will eventually reach the end and we can return false in this case.</p>
Now consider a cyclic list and imagine the slow and fast pointers are two runners racing around a circle track. The fast runner will eventually meet the slow runner. Why? Consider this case (we name it case A) - The fast runner is just one step behind the slow runner. In the next iteration, they both increment one and two steps respectively and meet each other.</p>
How about other cases? For example, we have not considered cases where the fast runner is two or three steps behind the slow runner yet. This is simple, because in the next or next's next iteration, this case will be reduced to case A mentioned above.</p>
</span>public</span> boolean</span> hasCycle</span>(</span>ListNode</span> head</span>)</span> {</span>
    if</span> (</span>head</span> ==</span> null</span> ||</span> head</span>.</span>next</span> ==</span> null</span>)</span> {</span>
        return</span> false</span>;</span>
    }</span>
    ListNode</span> slow</span> =</span> head</span>;</span>
    ListNode</span> fast</span> =</span> head</span>.</span>next</span>;</span>
    while</span> (</span>slow</span> !=</span> fast</span>)</span> {</span>
        if</span> (</span>fast</span> ==</span> null</span> ||</span> fast</span>.</span>next</span> ==</span> null</span>)</span> {</span>
            return</span> false</span>;</span>
        }</span>
        slow</span> =</span> slow</span>.</span>next</span>;</span>
        fast</span> =</span> fast</span>.</span>next</span>.</span>next</span>;</span>
    }</span>
    return</span> true</span>;</span>
}</span>
</pre></div>


Complexity analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>.
Let us denote <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> as the total number of nodes in the linked list. To analyze its time complexity, we consider the following two cases separately.</p>


List has no cycle:</em></strong>
The fast pointer reaches the end first and the run time depends on the list's length, which is <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>.</p>
</li>

List has a cycle:</em></strong>
We break down the movement of the slow pointer into two steps, the non-cyclic part and the cyclic part:</p>


The slow pointer takes "non-cyclic length" steps to enter the cycle. At this point, the fast pointer has already reached the cycle. <span class="maths katex-rendered">N</mi>u</mi>m</mi>b</mi>e</mi>r</mi>&nbsp;</mtext>o</mi>f</mi>&nbsp;</mtext>i</mi>t</mi>e</mi>r</mi>a</mi>t</mi>i</mi>o</mi>n</mi>s</mi></mtext>=</mo>n</mi>o</mi>n</mi>-</mi>c</mi>y</mi>c</mi>l</mi>i</mi>c</mi>&nbsp;</mtext>l</mi>e</mi>n</mi>g</mi>t</mi>h</mi></mtext>=</mo>N</mi></mrow><annotation encoding="application/x-tex">text{Number of iterations} = text{non-cyclic length} = N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">Number&nbsp;of&nbsp;iterations</span></span>=</span><span class="mord text textstyle uncramped"><span class="mord mathrm">non-cyclic&nbsp;length</span></span>=</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span></span></span></span></span>
</p>
</li>

Both pointers are now in the cycle. Consider two runners running in a cycle - the fast runner moves 2 steps while the slow runner moves 1 steps at a time. Since the speed difference is 1, it takes <span class="maths katex-rendered">d</mi>i</mi>s</mi>t</mi>a</mi>n</mi>c</mi>e</mi>&nbsp;</mtext>b</mi>e</mi>t</mi>w</mi>e</mi>e</mi>n</mi>&nbsp;</mtext>t</mi>h</mi>e</mi>&nbsp;</mtext>2</mn>&nbsp;</mtext>r</mi>u</mi>n</mi>n</mi>e</mi>r</mi>s</mi></mtext></mrow>d</mi>i</mi>f</mi>f</mi>e</mi>r</mi>e</mi>n</mi>c</mi>e</mi>&nbsp;</mtext>o</mi>f</mi>&nbsp;</mtext>s</mi>p</mi>e</mi>e</mi>d</mi></mtext></mrow></mfrac></mrow><annotation encoding="application/x-tex">frac{text{distance between the 2 runners}}{text{difference of speed}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.880108em;"></span><span class="strut bottom" style="height: 1.36122em; vertical-align: -0.481108em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="mopen sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">â€‹</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord scriptstyle cramped mtight"><span class="mord text scriptstyle cramped mtight"><span class="mord mathrm mtight">difference&nbsp;of&nbsp;speed</span></span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">â€‹</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">â€‹</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord text scriptstyle uncramped mtight"><span class="mord mathrm mtight">distance&nbsp;between&nbsp;the&nbsp;2&nbsp;runners</span></span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">â€‹</span></span>â€‹</span></span></span><span class="mclose sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></span> loops for the fast runner to catch up with the slow runner. As the distance is at most "cyclic length K" and the speed difference is 1, we conclude that <span class="maths katex-rendered">N</mi>u</mi>m</mi>b</mi>e</mi>r</mi>&nbsp;</mtext>o</mi>f</mi>&nbsp;</mtext>i</mi>t</mi>e</mi>r</mi>a</mi>t</mi>i</mi>o</mi>n</mi>s</mi></mtext>=</mo>a</mi>l</mi>m</mi>o</mi>s</mi>t</mi>&nbsp;</mtext></mtext>â€˜</mi>â€˜</mi>c</mi>y</mi>c</mi>l</mi>i</mi>c</mi>&nbsp;</mtext>l</mi>e</mi>n</mi>g</mi>t</mi>h</mi>&nbsp;</mtext>K</mi></mtext>"</mi>.</mi></mrow><annotation encoding="application/x-tex">text{Number of iterations} = text{almost } `` text{cyclic length K} ".</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">Number&nbsp;of&nbsp;iterations</span></span>=</span><span class="mord text textstyle uncramped"><span class="mord mathrm">almost&nbsp;</span></span><span class="mord mathrm">â€˜</span><span class="mord mathrm">â€˜</span><span class="mord text textstyle uncramped"><span class="mord mathrm">cyclic&nbsp;length&nbsp;K</span></span><span class="mord mathrm">"</span><span class="mord mathrm">.</span></span></span></span></span>
</p>
</li>
</ol>
</li>
</ul>
Therefore, the worst case time complexity is <span class="maths katex-rendered">O</mi>(</mo>N</mi>+</mo>K</mi>)</mo></mrow><annotation encoding="application/x-tex">O(N+K)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>+</span><span class="mord mathit" style="margin-right: 0.07153em;">K</span>)</span></span></span></span></span>, which is <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>.
We only use two nodes (slow and fast) so the space complexity is <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>.</p>
</li>
</ul>
Analysis written by: @tianyi8, revised by @1337c0d3r.</p>