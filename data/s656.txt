<h4 id="approach-1-simulation-accepted">Approach #1: Simulation [Accepted]</h4>
Intuition and Algorithm</strong></p>
Simulate the clock going forward by one minute.  Each time it moves forward, if all the digits are allowed, then return the current time.</p>
The natural way to represent the time is as an integer t</code> in the range 0 &lt;= t &lt; 24 * 60</code>.  Then the hours are t / 60</code>, the minutes are t % 60</code>, and each digit of the hours and minutes can be found by hours / 10, hours % 10</code> etc.</p>
Python</strong></p>
</span>class</span> Solution</span>(</span>object</span>):</span>
    def</span> nextClosestTime</span>(</span>self</span>,</span> time</span>):</span>
        cur</span> =</span> 60</span> *</span> int</span>(</span>time</span>[:</span>2</span>])</span> +</span> int</span>(</span>time</span>[</span>3</span>:])</span>
        allowed</span> =</span> {</span>int</span>(</span>x</span>)</span> for</span> x</span> in</span> time</span> if</span> x</span> !=</span> ':'</span>}</span>
        while</span> True</span>:</span>
            cur</span> =</span> (</span>cur</span> +</span> 1</span>)</span> %</span> (</span>24</span> *</span> 60</span>)</span>
            if</span> all</span>(</span>digit</span> in</span> allowed</span>
                    for</span> block</span> in</span> divmod</span>(</span>cur</span>,</span> 60</span>)</span>
                    for</span> digit</span> in</span> divmod</span>(</span>block</span>,</span> 10</span>)):</span>
                return</span> "{:02d}:{:02d}"</span>.</span>format</span>(</span>*</span>divmod</span>(</span>cur</span>,</span> 60</span>))</span>
</pre></div>


Java</strong></p>
</span>class</span> Solution</span> {</span>
    public</span> String</span> nextClosestTime</span>(</span>String</span> time</span>)</span> {</span>
        int</span> cur</span> =</span> 60</span> *</span> Integer</span>.</span>parseInt</span>(</span>time</span>.</span>substring</span>(</span>0</span>,</span> 2</span>));</span>
        cur</span> +=</span> Integer</span>.</span>parseInt</span>(</span>time</span>.</span>substring</span>(</span>3</span>));</span>
        Set</span>&lt;</span>Integer</span>&gt;</span> allowed</span> =</span> new</span> HashSet</span>();</span>
        for</span> (</span>char</span> c</span>:</span> time</span>.</span>toCharArray</span>())</span> if</span> (</span>c</span> !=</span> ':'</span>)</span> {</span>
            allowed</span>.</span>add</span>(</span>c</span> -</span> '0'</span>);</span>
        }</span>

        while</span> (</span>true</span>)</span> {</span>
            cur</span> =</span> (</span>cur</span> +</span> 1</span>)</span> %</span> (</span>24</span> *</span> 60</span>);</span>
            int</span>[]</span> digits</span> =</span> new</span> int</span>[]{</span>cur</span> /</span> 60</span> /</span> 10</span>,</span> cur</span> /</span> 60</span> %</span> 10</span>,</span> cur</span> %</span> 60</span> /</span> 10</span>,</span> cur</span> %</span> 60</span> %</span> 10</span>};</span>
            search</span> :</span> {</span>
                for</span> (</span>int</span> d</span>:</span> digits</span>)</span> if</span> (!</span>allowed</span>.</span>contains</span>(</span>d</span>))</span> break</span> search</span>;</span>
                return</span> String</span>.</span>format</span>(</span>"%02d:%02d"</span>,</span> cur</span> /</span> 60</span>,</span> cur</span> %</span> 60</span>);</span>
            }</span>
        }</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time Complexity: <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>.  We try up to <span class="maths katex-rendered">2</mn>4</mn>∗</mo>6</mn>0</mn></mrow><annotation encoding="application/x-tex">24 * 60</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathrm">4</span>∗</span><span class="mord mathrm">6</span><span class="mord mathrm">0</span></span></span></span></span> possible times until we find the correct time.</p>
</li>

Space Complexity: <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>.</p>
</li>
</ul>

<h4 id="approach-2-build-from-allowed-digits-accepted">Approach #2: Build From Allowed Digits [Accepted]</h4>
Intuition and Algorithm</strong></p>
We have up to 4 different allowed digits, which naively gives us 4 * 4 * 4 * 4</code> possible times.  For each possible time, let's check that it can be displayed on a clock: ie., hours &lt; 24 and mins &lt; 60</code>.  The best possible time != start</code> is the one with the largest (time - start) % (24 * 60)</code>.  </p>
Also, we should make sure to handle cand_elapsed</code> carefully.  When our current candidate time cur</code> is equal to the given starting time, then cand_elapsed</code> will be 0</code> and we should handle this case appropriately.</p>
Python</strong></p>
</span>class</span> Solution</span>(</span>object</span>):</span>
    def</span> nextClosestTime</span>(</span>self</span>,</span> time</span>):</span>
        ans</span> =</span> start</span> =</span> 60</span> *</span> int</span>(</span>time</span>[:</span>2</span>])</span> +</span> int</span>(</span>time</span>[</span>3</span>:])</span>
        elapsed</span> =</span> 24</span> *</span> 60</span>
        allowed</span> =</span> {</span>int</span>(</span>x</span>)</span> for</span> x</span> in</span> time</span> if</span> x</span> !=</span> ':'</span>}</span>
        for</span> h1</span>,</span> h2</span>,</span> m1</span>,</span> m2</span> in</span> itertools</span>.</span>product</span>(</span>allowed</span>,</span> repeat</span> =</span> 4</span>):</span>
            hours</span>,</span> mins</span> =</span> 10</span> *</span> h1</span> +</span> h2</span>,</span> 10</span> *</span> m1</span> +</span> m2</span>
            if</span> hours</span> &lt;</span> 24</span> and</span> mins</span> &lt;</span> 60</span>:</span>
                cur</span> =</span> hours</span> *</span> 60</span> +</span> mins</span>
                cand_elapsed</span> =</span> (</span>cur</span> -</span> start</span>)</span> %</span> (</span>24</span> *</span> 60</span>)</span>
                if</span> 0</span> &lt;</span> cand_elapsed</span> &lt;</span> elapsed</span>:</span>
                    ans</span> =</span> cur</span>
                    elapsed</span> =</span> cand_elapsed</span>

        return</span> "{:02d}:{:02d}"</span>.</span>format</span>(</span>*</span>divmod</span>(</span>ans</span>,</span> 60</span>))</span>
</pre></div>


Java</strong></p>
</span>class</span> Solution</span> {</span>
    public</span> String</span> nextClosestTime</span>(</span>String</span> time</span>)</span> {</span>
        int</span> start</span> =</span> 60</span> *</span> Integer</span>.</span>parseInt</span>(</span>time</span>.</span>substring</span>(</span>0</span>,</span> 2</span>));</span>
        start</span> +=</span> Integer</span>.</span>parseInt</span>(</span>time</span>.</span>substring</span>(</span>3</span>));</span>
        int</span> ans</span> =</span> start</span>;</span>
        int</span> elapsed</span> =</span> 24</span> *</span> 60</span>;</span>
        Set</span>&lt;</span>Integer</span>&gt;</span> allowed</span> =</span> new</span> HashSet</span>();</span>
        for</span> (</span>char</span> c</span>:</span> time</span>.</span>toCharArray</span>())</span> if</span> (</span>c</span> !=</span> ':'</span>)</span> {</span>
            allowed</span>.</span>add</span>(</span>c</span> -</span> '0'</span>);</span>
        }</span>

        for</span> (</span>int</span> h1</span>:</span> allowed</span>)</span> for</span> (</span>int</span> h2</span>:</span> allowed</span>)</span> if</span> (</span>h1</span> *</span> 10</span> +</span> h2</span> &lt;</span> 24</span>)</span> {</span>
            for</span> (</span>int</span> m1</span>:</span> allowed</span>)</span> for</span> (</span>int</span> m2</span>:</span> allowed</span>)</span> if</span> (</span>m1</span> *</span> 10</span> +</span> m2</span> &lt;</span> 60</span>)</span> {</span>
                int</span> cur</span> =</span> 60</span> *</span> (</span>h1</span> *</span> 10</span> +</span> h2</span>)</span> +</span> (</span>m1</span> *</span> 10</span> +</span> m2</span>);</span>
                int</span> candElapsed</span> =</span> Math</span>.</span>floorMod</span>(</span>cur</span> -</span> start</span>,</span> 24</span> *</span> 60</span>);</span>
                if</span> (</span>0</span> &lt;</span> candElapsed</span> &amp;&amp;</span> candElapsed</span> &lt;</span> elapsed</span>)</span> {</span>
                    ans</span> =</span> cur</span>;</span>
                    elapsed</span> =</span> candElapsed</span>;</span>
                }</span>
            }</span>
        }</span>

        return</span> String</span>.</span>format</span>(</span>"%02d:%02d"</span>,</span> ans</span> /</span> 60</span>,</span> ans</span> %</span> 60</span>);</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time Complexity: <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>.  We all <span class="maths katex-rendered">4</mn>4</mn></msup></mrow><annotation encoding="application/x-tex">4^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.814108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">4</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">4</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> possible times and take the best one.</p>
</li>

Space Complexity: <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>.</p>
</li>
</ul>