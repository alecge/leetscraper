<div class="toc hide">

<a href="#summary">Summary</a></li>
<a href="#solution">Solution</a>
<a href="#approach-1-brute-force-time-limit-exceeded">Approach #1 Brute Force [Time Limit Exceeded]</a></li>
<a href="#approach-2-using-dynamic-programming-accepted">Approach #2 Using Dynamic Programming [Accepted]</a></li>
<a href="#approach-3-using-stack-accepted">Approach #3 Using Stack [Accepted]</a></li>
<a href="#approach-4-without-extra-space-accepted">Approach #4 Without extra space [Accepted]</a></li>
</ul>
</li>
</ul>
</div>
Summary</h2>
We need to determine the length of the largest valid substring of parentheses from a given string.</p>
Solution</h2>

<h4 id="approach-1-brute-force-time-limit-exceeded">Approach #1 Brute Force [Time Limit Exceeded]</h4>
Algorithm</strong></p>
In this approach, we consider every possible non-empty even length substring from the given string and check whether it's
a valid string of parentheses or not. In order to check the validity, we use the Stack's Method.</p>
Every time we
encounter a <span class="maths katex-rendered">‘</mi>(</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{‘(’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">‘(’</span></span></span></span></span></span>, we push it onto the stack. For every <span class="maths katex-rendered">‘</mi>)</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{‘)’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">‘)’</span></span></span></span></span></span> encountered, we pop a <span class="maths katex-rendered">‘</mi>(</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{‘(’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">‘(’</span></span></span></span></span></span> from the stack. If <span class="maths katex-rendered">‘</mi>(</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{‘(’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">‘(’</span></span></span></span></span></span> isn't
 available on the stack for popping at anytime or if stack contains some elements after processing complete substring, the substring of parentheses is invalid. In this way, we repeat the
 process for every possible substring and we keep on
  storing the length of the longest valid string found so far.</p>
</span>Example:
"((())"

(( --&gt; invalid
(( --&gt; invalid
() --&gt; valid, length=2
)) --&gt; invalid
((()--&gt; invalid
(())--&gt; valid, length=4
maxlength=4
</pre></div>


Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> boolean</span> isValid</span>(</span>String</span> s</span>)</span> {</span>
        Stack</span>&lt;</span>Character</span>&gt;</span> stack</span> =</span> new</span> Stack</span>&lt;</span>Character</span>&gt;();</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> s</span>.</span>length</span>();</span> i</span>++)</span> {</span>
            if</span> (</span>s</span>.</span>charAt</span>(</span>i</span>)</span> ==</span> '('</span>)</span> {</span>
                stack</span>.</span>push</span>(</span>'('</span>);</span>
            }</span> else</span> if</span> (!</span>stack</span>.</span>empty</span>()</span> &amp;&amp;</span> stack</span>.</span>peek</span>()</span> ==</span> '('</span>)</span> {</span>
                stack</span>.</span>pop</span>();</span>
            }</span> else</span> {</span>
                return</span> false</span>;</span>
            }</span>
        }</span>
        return</span> stack</span>.</span>empty</span>();</span>
    }</span>
    public</span> int</span> longestValidParentheses</span>(</span>String</span> s</span>)</span> {</span>
        int</span> maxlen</span> =</span> 0</span>;</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> s</span>.</span>length</span>();</span> i</span>++)</span> {</span>
            for</span> (</span>int</span> j</span> =</span> i</span> +</span> 2</span>;</span> j</span> &lt;=</span> s</span>.</span>length</span>();</span> j</span>+=</span>2</span>)</span> {</span>
                if</span> (</span>isValid</span>(</span>s</span>.</span>substring</span>(</span>i</span>,</span> j</span>)))</span> {</span>
                    maxlen</span> =</span> Math</span>.</span>max</span>(</span>maxlen</span>,</span> j</span> -</span> i</span>);</span>
                }</span>
            }</span>
        }</span>
        return</span> maxlen</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>3</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>. Generating every possible substring from a string of length <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> requires <span class="maths katex-rendered">O</mi>(</mo>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>. Checking validity of a string of length <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> requires <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. A stack of depth <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> will be required for the longest substring.</p>
</li>
</ul>

<h4 id="approach-2-using-dynamic-programming-accepted">Approach #2 Using Dynamic Programming [Accepted]</h4>
Algorithm</strong></p>
This problem can be solved by using Dynamic Programming. We make use of a <span class="maths katex-rendered">d</mi>p</mi></mtext></mrow><annotation encoding="application/x-tex">text{dp}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">dp</span></span></span></span></span></span> array where <span class="maths katex-rendered">i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span></span>th element of <span class="maths katex-rendered">d</mi>p</mi></mtext></mrow><annotation encoding="application/x-tex">text{dp}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">dp</span></span></span></span></span></span> represents the length of the longest valid substring ending at <span class="maths katex-rendered">i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span></span>th index. We initialize the complete <span class="maths katex-rendered">d</mi>p</mi></mtext></mrow><annotation encoding="application/x-tex">text{dp}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">dp</span></span></span></span></span></span> array with 0's. Now, it's obvious that the valid substrings must end with <span class="maths katex-rendered">‘</mi>)</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{‘)’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">‘)’</span></span></span></span></span></span>. This further leads to the conclusion that the substrings ending with <span class="maths katex-rendered">‘</mi>(</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{‘(’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">‘(’</span></span></span></span></span></span> will always contain '0' at their corresponding <span class="maths katex-rendered">d</mi>p</mi></mtext></mrow><annotation encoding="application/x-tex">text{dp}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">dp</span></span></span></span></span></span> indices. Thus, we update the <span class="maths katex-rendered">d</mi>p</mi></mtext></mrow><annotation encoding="application/x-tex">text{dp}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">dp</span></span></span></span></span></span> array only when <span class="maths katex-rendered">‘</mi>)</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{‘)’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">‘)’</span></span></span></span></span></span> is encountered.</p>
To fill <span class="maths katex-rendered">d</mi>p</mi></mtext></mrow><annotation encoding="application/x-tex">text{dp}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">dp</span></span></span></span></span></span> array we will check every two consecutive characters of the string and if</p>



<span class="maths katex-rendered">s</mi></mtext>[</mo>i</mi>]</mo>=</mo>‘</mi>)</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{s}[i] = text{‘)’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">s</span></span>[</span><span class="mord mathit">i</span>]</span>=</span><span class="mord text textstyle uncramped"><span class="mord mathrm">‘)’</span></span></span></span></span></span> and <span class="maths katex-rendered">s</mi></mtext>[</mo>i</mi>−</mo>1</mn>]</mo>=</mo>‘</mi>(</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{s}[i - 1] = text{‘(’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">s</span></span>[</span><span class="mord mathit">i</span>−</span><span class="mord mathrm">1</span>]</span>=</span><span class="mord text textstyle uncramped"><span class="mord mathrm">‘(’</span></span></span></span></span></span>, i.e. string looks like <span class="maths katex-rendered">‘</mi>‘</mi>.</mi>.</mi>.</mi>.</mi>.</mi>.</mi>.</mi>(</mo>)</mo>"</mi>⇒</mo></mrow><annotation encoding="application/x-tex">``.......()" Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">‘</span><span class="mord mathrm">‘</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span>(</span>)</span><span class="mord mathrm">"</span>⇒</span></span></span></span></span>
</p>

<p class="maths katex-rendered">d</mi>p</mi></mtext>[</mo>i</mi>]</mo>=</mo>d</mi>p</mi></mtext>[</mo>i</mi>−</mo>2</mn>]</mo>+</mo>2</mn></mrow><annotation encoding="application/x-tex">
text{dp}[i]=text{dp}[i-2]+2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord text displaystyle textstyle uncramped"><span class="mord mathrm">dp</span></span>[</span><span class="mord mathit">i</span>]</span>=</span><span class="mord text displaystyle textstyle uncramped"><span class="mord mathrm">dp</span></span>[</span><span class="mord mathit">i</span>−</span><span class="mord mathrm">2</span>]</span>+</span><span class="mord mathrm">2</span></span></span></span></span></p>
</p>
We do so because the ending "()" portion is a valid substring anyhow and leads to an increment of 2 in the length of the just previous valid substring's length.</p>
</li>


<span class="maths katex-rendered">s</mi></mtext>[</mo>i</mi>]</mo>=</mo>‘</mi>)</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{s}[i] = text{‘)’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">s</span></span>[</span><span class="mord mathit">i</span>]</span>=</span><span class="mord text textstyle uncramped"><span class="mord mathrm">‘)’</span></span></span></span></span></span> and <span class="maths katex-rendered">s</mi></mtext>[</mo>i</mi>−</mo>1</mn>]</mo>=</mo>‘</mi>)</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{s}[i - 1] = text{‘)’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">s</span></span>[</span><span class="mord mathit">i</span>−</span><span class="mord mathrm">1</span>]</span>=</span><span class="mord text textstyle uncramped"><span class="mord mathrm">‘)’</span></span></span></span></span></span>, i.e. string looks like <span class="maths katex-rendered">‘</mi>‘</mi>.</mi>.</mi>.</mi>.</mi>.</mi>.</mi>.</mi>)</mo>)</mo>"</mi>⇒</mo></mrow><annotation encoding="application/x-tex">``.......))" Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">‘</span><span class="mord mathrm">‘</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span>)</span>)</span><span class="mord mathrm">"</span>⇒</span></span></span></span></span>
</p>
if <span class="maths katex-rendered">s</mi></mtext>[</mo>i</mi>−</mo>d</mi>p</mi></mtext>[</mo>i</mi>−</mo>1</mn>]</mo>−</mo>1</mn>]</mo>=</mo>‘</mi>(</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{s}[i - text{dp}[i - 1] - 1] = text{‘(’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">s</span></span>[</span><span class="mord mathit">i</span>−</span><span class="mord text textstyle uncramped"><span class="mord mathrm">dp</span></span>[</span><span class="mord mathit">i</span>−</span><span class="mord mathrm">1</span>]</span>−</span><span class="mord mathrm">1</span>]</span>=</span><span class="mord text textstyle uncramped"><span class="mord mathrm">‘(’</span></span></span></span></span></span> then</p>

<p class="maths katex-rendered">d</mi>p</mi></mtext>[</mo>i</mi>]</mo>=</mo>d</mi>p</mi></mtext>[</mo>i</mi>−</mo>1</mn>]</mo>+</mo>d</mi>p</mi></mtext>[</mo>i</mi>−</mo>d</mi>p</mi></mtext>[</mo>i</mi>−</mo>1</mn>]</mo>−</mo>2</mn>]</mo>+</mo>2</mn></mrow><annotation encoding="application/x-tex">
text{dp}[i]=text{dp}[i-1]+text{dp}[i-text{dp}[i-1]-2]+2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord text displaystyle textstyle uncramped"><span class="mord mathrm">dp</span></span>[</span><span class="mord mathit">i</span>]</span>=</span><span class="mord text displaystyle textstyle uncramped"><span class="mord mathrm">dp</span></span>[</span><span class="mord mathit">i</span>−</span><span class="mord mathrm">1</span>]</span>+</span><span class="mord text displaystyle textstyle uncramped"><span class="mord mathrm">dp</span></span>[</span><span class="mord mathit">i</span>−</span><span class="mord text displaystyle textstyle uncramped"><span class="mord mathrm">dp</span></span>[</span><span class="mord mathit">i</span>−</span><span class="mord mathrm">1</span>]</span>−</span><span class="mord mathrm">2</span>]</span>+</span><span class="mord mathrm">2</span></span></span></span></span></p>
</p>
</li>
</ol>
The reason behind this is that if the 2nd last <span class="maths katex-rendered">‘</mi>)</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{‘)’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">‘)’</span></span></span></span></span></span> was a part of a valid substring (say <span class="maths katex-rendered">s</mi>u</mi>b</mi>s</mi></msub></mrow><annotation encoding="application/x-tex">sub_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">u</span><span class="mord mathit">b</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathit mtight">s</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>), for the last <span class="maths katex-rendered">‘</mi>)</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{‘)’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">‘)’</span></span></span></span></span></span> to be a part of a larger substring, there must be a corresponding starting <span class="maths katex-rendered">‘</mi>(</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{‘(’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">‘(’</span></span></span></span></span></span> which lies before the valid substring of which the 2nd last <span class="maths katex-rendered">‘</mi>)</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{‘)’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">‘)’</span></span></span></span></span></span> is a part (i.e. before <span class="maths katex-rendered">s</mi>u</mi>b</mi>s</mi></msub></mrow><annotation encoding="application/x-tex">sub_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">u</span><span class="mord mathit">b</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathit mtight">s</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>). Thus, if the character before <span class="maths katex-rendered">s</mi>u</mi>b</mi>s</mi></msub></mrow><annotation encoding="application/x-tex">sub_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">u</span><span class="mord mathit">b</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathit mtight">s</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> happens to be <span class="maths katex-rendered">‘</mi>(</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{‘(’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">‘(’</span></span></span></span></span></span>, we update the <span class="maths katex-rendered">d</mi>p</mi></mtext>[</mo>i</mi>]</mo></mrow><annotation encoding="application/x-tex">text{dp}[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">dp</span></span>[</span><span class="mord mathit">i</span>]</span></span></span></span></span> as an addition of <span class="maths katex-rendered">2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span></span></span></span></span> in the length of <span class="maths katex-rendered">s</mi>u</mi>b</mi>s</mi></msub></mrow><annotation encoding="application/x-tex">sub_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">u</span><span class="mord mathit">b</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathit mtight">s</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> which is <span class="maths katex-rendered">d</mi>p</mi></mtext>[</mo>i</mi>−</mo>1</mn>]</mo></mrow><annotation encoding="application/x-tex">text{dp}[i-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">dp</span></span>[</span><span class="mord mathit">i</span>−</span><span class="mord mathrm">1</span>]</span></span></span></span></span>. To this, we also add the length of the valid substring just before the term "(,sub_s,)" , i.e. <span class="maths katex-rendered">d</mi>p</mi></mtext>[</mo>i</mi>−</mo>d</mi>p</mi></mtext>[</mo>i</mi>−</mo>1</mn>]</mo>−</mo>2</mn>]</mo></mrow><annotation encoding="application/x-tex">text{dp}[i-text{dp}[i-1]-2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">dp</span></span>[</span><span class="mord mathit">i</span>−</span><span class="mord text textstyle uncramped"><span class="mord mathrm">dp</span></span>[</span><span class="mord mathit">i</span>−</span><span class="mord mathrm">1</span>]</span>−</span><span class="mord mathrm">2</span>]</span></span></span></span></span>.</p>
For better understanding of this method, see this example:</p>
<!--![Longest_Valid_Parenthesis](../Figures/32_LongestValidParenthesisDP.gif)-->

<div class="diaporama" style="width: 940px; height: 529px;"><div class="initial-play play-container"><div class="fa fa-play"></div></div><canvas width="940" height="529" style="width: 940px; height: 529px;"></canvas></div><div class="control-panel" style="width: 940px;"><div class="control-group dia-back fa fa-step-backward"></div><div class="toggle-play control-group fa fa-play"></div><div class="control-group fa fa-step-forward"></div></div>1 / 8</div></div></div>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> int</span> longestValidParentheses</span>(</span>String</span> s</span>)</span> {</span>
        int</span> maxans</span> =</span> 0</span>;</span>
        int</span> dp</span>[]</span> =</span> new</span> int</span>[</span>s</span>.</span>length</span>()];</span>
        for</span> (</span>int</span> i</span> =</span> 1</span>;</span> i</span> &lt;</span> s</span>.</span>length</span>();</span> i</span>++)</span> {</span>
            if</span> (</span>s</span>.</span>charAt</span>(</span>i</span>)</span> ==</span> ')'</span>)</span> {</span>
                if</span> (</span>s</span>.</span>charAt</span>(</span>i</span> -</span> 1</span>)</span> ==</span> '('</span>)</span> {</span>
                    dp</span>[</span>i</span>]</span> =</span> (</span>i</span> &gt;=</span> 2</span> ?</span> dp</span>[</span>i</span> -</span> 2</span>]</span> :</span> 0</span>)</span> +</span> 2</span>;</span>
                }</span> else</span> if</span> (</span>i</span> -</span> dp</span>[</span>i</span> -</span> 1</span>]</span> &gt;</span> 0</span> &amp;&amp;</span> s</span>.</span>charAt</span>(</span>i</span> -</span> dp</span>[</span>i</span> -</span> 1</span>]</span> -</span> 1</span>)</span> ==</span> '('</span>)</span> {</span>
                    dp</span>[</span>i</span>]</span> =</span> dp</span>[</span>i</span> -</span> 1</span>]</span> +</span> ((</span>i</span> -</span> dp</span>[</span>i</span> -</span> 1</span>])</span> &gt;=</span> 2</span> ?</span> dp</span>[</span>i</span> -</span> dp</span>[</span>i</span> -</span> 1</span>]</span> -</span> 2</span>]</span> :</span> 0</span>)</span> +</span> 2</span>;</span>
                }</span>
                maxans</span> =</span> Math</span>.</span>max</span>(</span>maxans</span>,</span> dp</span>[</span>i</span>]);</span>
            }</span>
        }</span>
        return</span> maxans</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. Single traversal of string to fill dp array is done.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. dp array of size <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is used.</p>
</li>
</ul>

<h4 id="approach-3-using-stack-accepted">Approach #3 Using Stack [Accepted]</h4>
Algorithm</strong></p>
Instead of finding every possible string and checking its validity, we can make use of stack while scanning
the given string to check if the string scanned so far is valid, and also the length of the longest valid string. In order to do so, we start by pushing <span class="maths katex-rendered">−</mo>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped">−</span><span class="mord mathrm">1</span></span></span></span></span> onto the stack.</p>
For every <span class="maths katex-rendered">‘</mi>(</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{‘(’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">‘(’</span></span></span></span></span></span> encountered, we push its index onto the stack.</p>
For every <span class="maths katex-rendered">‘</mi>)</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{‘)’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">‘)’</span></span></span></span></span></span> encountered, we pop the topmost element and subtract the current element's index from the top element of the stack, which gives the length of the currently encountered valid string of parentheses. If while popping the element, the stack becomes empty, we push the current element's index onto the stack. In this way, we keep on calculating the lengths of the valid substrings, and return the length of the longest valid string at the end.</p>
See this example for better understanding.</p>
<!--![Longest_Valid_Parenthesis](../Figures/32_LongestValidParenthesisSTACK.gif)-->

!?!../Documents/32_Longest_Valid_stack_new.json:1000,563!?!</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>

    public</span> int</span> longestValidParentheses</span>(</span>String</span> s</span>)</span> {</span>
        int</span> maxans</span> =</span> 0</span>;</span>
        Stack</span>&lt;</span>Integer</span>&gt;</span> stack</span> =</span> new</span> Stack</span>&lt;&gt;();</span>
        stack</span>.</span>push</span>(-</span>1</span>);</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> s</span>.</span>length</span>();</span> i</span>++)</span> {</span>
            if</span> (</span>s</span>.</span>charAt</span>(</span>i</span>)</span> ==</span> '('</span>)</span> {</span>
                stack</span>.</span>push</span>(</span>i</span>);</span>
            }</span> else</span> {</span>
                stack</span>.</span>pop</span>();</span>
                if</span> (</span>stack</span>.</span>empty</span>())</span> {</span>
                    stack</span>.</span>push</span>(</span>i</span>);</span>
                }</span> else</span> {</span>
                    maxans</span> =</span> Math</span>.</span>max</span>(</span>maxans</span>,</span> i</span> -</span> stack</span>.</span>peek</span>());</span>
                }</span>
            }</span>
        }</span>
        return</span> maxans</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the length of the given string..</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. The size of stack can go up to <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>.</p>
</li>
</ul>

<h4 id="approach-4-without-extra-space-accepted">Approach #4 Without extra space [Accepted]</h4>
Algorithm</strong></p>
In this approach, we make use of two counters <span class="maths katex-rendered">l</mi>e</mi>f</mi>t</mi></mrow><annotation encoding="application/x-tex">left</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">t</span></span></span></span></span> and <span class="maths katex-rendered">r</mi>i</mi>g</mi>h</mi>t</mi></mrow><annotation encoding="application/x-tex">right</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span></span></span></span></span>. First, we start traversing the string from the left towards the right and for every <span class="maths katex-rendered">‘</mi>(</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{‘(’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">‘(’</span></span></span></span></span></span> encountered, we increment the <span class="maths katex-rendered">l</mi>e</mi>f</mi>t</mi></mrow><annotation encoding="application/x-tex">left</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">t</span></span></span></span></span> counter and for every <span class="maths katex-rendered">‘</mi>)</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">text{‘)’}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">‘)’</span></span></span></span></span></span> encountered, we increment the <span class="maths katex-rendered">r</mi>i</mi>g</mi>h</mi>t</mi></mrow><annotation encoding="application/x-tex">right</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span></span></span></span></span> counter. Whenever <span class="maths katex-rendered">l</mi>e</mi>f</mi>t</mi></mrow><annotation encoding="application/x-tex">left</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">t</span></span></span></span></span> becomes equal to <span class="maths katex-rendered">r</mi>i</mi>g</mi>h</mi>t</mi></mrow><annotation encoding="application/x-tex">right</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span></span></span></span></span>, we calculate the length of the current valid string and keep track of maximum length substring found so far. If <span class="maths katex-rendered">r</mi>i</mi>g</mi>h</mi>t</mi></mrow><annotation encoding="application/x-tex">right</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span></span></span></span></span> becomes greater than <span class="maths katex-rendered">l</mi>e</mi>f</mi>t</mi></mrow><annotation encoding="application/x-tex">left</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">t</span></span></span></span></span> we reset <span class="maths katex-rendered">l</mi>e</mi>f</mi>t</mi></mrow><annotation encoding="application/x-tex">left</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">t</span></span></span></span></span> and <span class="maths katex-rendered">r</mi>i</mi>g</mi>h</mi>t</mi></mrow><annotation encoding="application/x-tex">right</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span></span></span></span></span> to <span class="maths katex-rendered">0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">0</span></span></span></span></span>.</p>
Next, we start traversing the string from right to left and similar procedure is applied.</p>
Example of this approach:</p>
<!--![Longest_Valid_Parenthesis](../Figures/32_LongestValidParenthesisLR.gif)-->

<div class="diaporama" style="width: 940px; height: 529px;"><div class="initial-play play-container"><div class="fa fa-play"></div></div><canvas width="940" height="529" style="width: 940px; height: 529px;"></canvas></div><div class="control-panel" style="width: 940px;"><div class="control-group dia-back fa fa-step-backward"></div><div class="toggle-play control-group fa fa-play"></div><div class="control-group fa fa-step-forward"></div></div>1 / 21</div></div></div>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> int</span> longestValidParentheses</span>(</span>String</span> s</span>)</span> {</span>
        int</span> left</span> =</span> 0</span>,</span> right</span> =</span> 0</span>,</span> maxlength</span> =</span> 0</span>;</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> s</span>.</span>length</span>();</span> i</span>++)</span> {</span>
            if</span> (</span>s</span>.</span>charAt</span>(</span>i</span>)</span> ==</span> '('</span>)</span> {</span>
                left</span>++;</span>
            }</span> else</span> {</span>
                right</span>++;</span>
            }</span>
            if</span> (</span>left</span> ==</span> right</span>)</span> {</span>
                maxlength</span> =</span> Math</span>.</span>max</span>(</span>maxlength</span>,</span> 2</span> *</span> right</span>);</span>
            }</span> else</span> if</span> (</span>right</span> &gt;=</span> left</span>)</span> {</span>
                left</span> =</span> right</span> =</span> 0</span>;</span>
            }</span>
        }</span>
        left</span> =</span> right</span> =</span> 0</span>;</span>
        for</span> (</span>int</span> i</span> =</span> s</span>.</span>length</span>()</span> -</span> 1</span>;</span> i</span> &gt;=</span> 0</span>;</span> i</span>--)</span> {</span>
            if</span> (</span>s</span>.</span>charAt</span>(</span>i</span>)</span> ==</span> '('</span>)</span> {</span>
                left</span>++;</span>
            }</span> else</span> {</span>
                right</span>++;</span>
            }</span>
            if</span> (</span>left</span> ==</span> right</span>)</span> {</span>
                maxlength</span> =</span> Math</span>.</span>max</span>(</span>maxlength</span>,</span> 2</span> *</span> left</span>);</span>
            }</span> else</span> if</span> (</span>left</span> &gt;=</span> right</span>)</span> {</span>
                left</span> =</span> right</span> =</span> 0</span>;</span>
            }</span>
        }</span>
        return</span> maxlength</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. Two traversals of the string.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. Only two extra variables <span class="maths katex-rendered">l</mi>e</mi>f</mi>t</mi></mrow><annotation encoding="application/x-tex">left</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">t</span></span></span></span></span> and <span class="maths katex-rendered">r</mi>i</mi>g</mi>h</mi>t</mi></mrow><annotation encoding="application/x-tex">right</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span></span></span></span></span> are needed.</p>
</li>
</ul>

Analysis written by: <a href="https://leetcode.com/vinod23">@vinod23</a></p>