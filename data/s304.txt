<div class="toc hide">

<a href="#solution">Solution</a>
<a href="#approach-1-brute-force-time-limit-exceeded">Approach #1 (Brute Force) [Time Limit Exceeded]</a></li>
<a href="#approach-2-caching-memory-limit-exceeded">Approach #2 (Caching) [Memory Limit Exceeded]</a></li>
<a href="#approach-3-caching-rows-accepted">Approach #3 (Caching Rows) [Accepted]</a></li>
<a href="#approach-4-caching-smarter-accepted">Approach #4 (Caching Smarter) [Accepted]</a></li>
</ul>
</li>
</ul>
</div>
Solution</h2>

<h4 id="approach-1-brute-force-time-limit-exceeded">Approach #1 (Brute Force) [Time Limit Exceeded]</h4>
Algorithm</strong></p>
Each time sumRegion</em> is called, we use a double for loop to sum all elements from <span class="maths katex-rendered">(</mo>r</mi>o</mi>w</mi>1</mn>,</mo>c</mi>o</mi>l</mi>1</mn>)</mo>→</mo>(</mo>r</mi>o</mi>w</mi>2</mn>,</mo>c</mi>o</mi>l</mi>2</mn>)</mo></mrow><annotation encoding="application/x-tex">(row1, col1) rightarrow (row2, col2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped">(</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.02691em;">w</span><span class="mord mathrm">1</span>,</span><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathrm">1</span>)</span>→</span>(</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.02691em;">w</span><span class="mord mathrm">2</span>,</span><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathrm">2</span>)</span></span></span></span></span>.</p>
</span>private</span> int</span>[][]</span> data</span>;</span>

public</span> NumMatrix</span>(</span>int</span>[][]</span> matrix</span>)</span> {</span>
    data</span> =</span> matrix</span>;</span>
}</span>

public</span> int</span> sumRegion</span>(</span>int</span> row1</span>,</span> int</span> col1</span>,</span> int</span> row2</span>,</span> int</span> col2</span>)</span> {</span>
    int</span> sum</span> =</span> 0</span>;</span>
    for</span> (</span>int</span> r</span> =</span> row1</span>;</span> r</span> &lt;=</span> row2</span>;</span> r</span>++)</span> {</span>
        for</span> (</span>int</span> c</span> =</span> col1</span>;</span> c</span> &lt;=</span> col2</span>;</span> c</span>++)</span> {</span>
            sum</span> +=</span> data</span>[</span>r</span>][</span>c</span>];</span>
        }</span>
    }</span>
    return</span> sum</span>;</span>
}</span>
</pre></div>


Complexity analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>m</mi>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(mn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">m</span><span class="mord mathit">n</span>)</span></span></span></span></span> time per query.
Assume that <span class="maths katex-rendered">m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span></span></span></span></span> and <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> represents the number of rows and columns respectively, each sumRegion</em> query can go through at most <span class="maths katex-rendered">m</mi>×</mo>n</mi></mrow><annotation encoding="application/x-tex">m times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.58333em;"></span><span class="strut bottom" style="height: 0.66666em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span>×</span><span class="mord mathit">n</span></span></span></span></span> elements.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. Note that data</code> is a reference</em> to matrix</code> and is not a copy of it.</p>
</li>
</ul>

<h4 id="approach-2-caching-memory-limit-exceeded">Approach #2 (Caching) [Memory Limit Exceeded]</h4>
Intuition</strong></p>
Since sumRegion</em> could be called many times, we definitely need to do some pre-processing.</p>
Algorithm</strong></p>
We could trade in extra space for speed by pre-calculating all possible rectangular region sum and store them in a hash table. Each sumRegion</em> query now takes only constant time complexity.</p>
Complexity analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span> time per query, <span class="maths katex-rendered">O</mi>(</mo>m</mi>2</mn></msup>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(m^2n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">m</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span> time pre-computation.
Each sumRegion</em> query takes <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span> time as the hash table lookup's time complexity is constant. The pre-computation will take <span class="maths katex-rendered">O</mi>(</mo>m</mi>2</mn></msup>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(m^2n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">m</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span> time as there are a total of <span class="maths katex-rendered">m</mi>2</mn></msup>×</mo>n</mi>2</mn></msup></mrow><annotation encoding="application/x-tex">m^2 times n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.897438em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>×</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> possibilities need to be cached.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>m</mi>2</mn></msup>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(m^2n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">m</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>.
Since there are <span class="maths katex-rendered">m</mi>n</mi></mrow><annotation encoding="application/x-tex">mn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">n</span></span></span></span></span> different possibilities for both top left and bottom right points of the rectangular region, the extra space required is <span class="maths katex-rendered">O</mi>(</mo>m</mi>2</mn></msup>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(m^2n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">m</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>.</p>
</li>
</ul>

<h4 id="approach-3-caching-rows-accepted">Approach #3 (Caching Rows) [Accepted]</h4>
Intuition</strong></p>
Remember from the <a href="https://leetcode.com/course/chapters/leetcode-101/range-sum-query-immutable/">1D version</a> where we used a cumulative sum array? Could we apply that directly to solve this 2D version?</p>
Algorithm</strong></p>
Try to see the 2D matrix as <span class="maths katex-rendered">m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span></span></span></span></span> rows of 1D arrays. To find the region sum, we just accumulate the sum in the region row by row.</p>
</span>private</span> int</span>[][]</span> dp</span>;</span>

public</span> NumMatrix</span>(</span>int</span>[][]</span> matrix</span>)</span> {</span>
    if</span> (</span>matrix</span>.</span>length</span> ==</span> 0</span> ||</span> matrix</span>[</span>0</span>].</span>length</span> ==</span> 0</span>)</span> return</span>;</span>
    dp</span> =</span> new</span> int</span>[</span>matrix</span>.</span>length</span>][</span>matrix</span>[</span>0</span>].</span>length</span> +</span> 1</span>];</span>
    for</span> (</span>int</span> r</span> =</span> 0</span>;</span> r</span> &lt;</span> matrix</span>.</span>length</span>;</span> r</span>++)</span> {</span>
        for</span> (</span>int</span> c</span> =</span> 0</span>;</span> c</span> &lt;</span> matrix</span>[</span>0</span>].</span>length</span>;</span> c</span>++)</span> {</span>
            dp</span>[</span>r</span>][</span>c</span> +</span> 1</span>]</span> =</span> dp</span>[</span>r</span>][</span>c</span>]</span> +</span> matrix</span>[</span>r</span>][</span>c</span>];</span>
        }</span>
    }</span>
}</span>

public</span> int</span> sumRegion</span>(</span>int</span> row1</span>,</span> int</span> col1</span>,</span> int</span> row2</span>,</span> int</span> col2</span>)</span> {</span>
    int</span> sum</span> =</span> 0</span>;</span>
    for</span> (</span>int</span> row</span> =</span> row1</span>;</span> row</span> &lt;=</span> row2</span>;</span> row</span>++)</span> {</span>
        sum</span> +=</span> dp</span>[</span>row</span>][</span>col2</span> +</span> 1</span>]</span> -</span> dp</span>[</span>row</span>][</span>col1</span>];</span>
    }</span>
    return</span> sum</span>;</span>
}</span>
</pre></div>


Complexity analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>m</mi>)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">m</span>)</span></span></span></span></span> time per query, <span class="maths katex-rendered">O</mi>(</mo>m</mi>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(mn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">m</span><span class="mord mathit">n</span>)</span></span></span></span></span> time pre-computation.
The pre-computation in the constructor takes <span class="maths katex-rendered">O</mi>(</mo>m</mi>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(mn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">m</span><span class="mord mathit">n</span>)</span></span></span></span></span> time. The sumRegion</em> query takes <span class="maths katex-rendered">O</mi>(</mo>m</mi>)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">m</span>)</span></span></span></span></span> time.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>m</mi>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(mn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">m</span><span class="mord mathit">n</span>)</span></span></span></span></span>.
The algorithm uses <span class="maths katex-rendered">O</mi>(</mo>m</mi>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(mn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">m</span><span class="mord mathit">n</span>)</span></span></span></span></span> space to store the cumulative sum of all rows.</p>
</li>
</ul>

<h4 id="approach-4-caching-smarter-accepted">Approach #4 (Caching Smarter) [Accepted]</h4>
Algorithm</strong></p>
We used a cumulative sum array in the <a href="https://leetcode.com/course/chapters/leetcode-101/range-sum-query-immutable/">1D version</a>. We notice that the cumulative sum is computed with respect to the origin at index 0. Extending this analogy to the 2D case, we could pre-compute a cumulative region sum with respect to the origin at <span class="maths katex-rendered">(</mo>0</mn>,</mo>0</mn>)</mo></mrow><annotation encoding="application/x-tex">(0, 0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped">(</span><span class="mord mathrm">0</span>,</span><span class="mord mathrm">0</span>)</span></span></span></span></span>.</p>
<img alt="Sum OD" src="https://leetcode.com/static/images/courses/sum_od.png">
Sum(OD) is the cumulative region sum with respect to the origin at (0, 0).</small></p>
How do we derive <span class="maths katex-rendered">S</mi>u</mi>m</mi>(</mo>A</mi>B</mi>C</mi>D</mi>)</mo></mrow><annotation encoding="application/x-tex">Sum(ABCD)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="mord mathit">u</span><span class="mord mathit">m</span>(</span><span class="mord mathit">A</span><span class="mord mathit" style="margin-right: 0.05017em;">B</span><span class="mord mathit" style="margin-right: 0.07153em;">C</span><span class="mord mathit" style="margin-right: 0.02778em;">D</span>)</span></span></span></span></span> using the pre-computed cumulative region sum?</p>
<img alt="Sum OB" src="https://leetcode.com/static/images/courses/sum_ob.png">
Sum(OB) is the cumulative region sum on top of the rectangle.</small></p>
<img alt="Sum OC" src="https://leetcode.com/static/images/courses/sum_oc.png">
Sum(OC) is the cumulative region sum to the left of the rectangle.</small></p>
<img alt="Sum OA" src="https://leetcode.com/static/images/courses/sum_oa.png">
Sum(OA) is the cumulative region sum to the top left corner of the rectangle.</small></p>
Note that the region <span class="maths katex-rendered">S</mi>u</mi>m</mi>(</mo>O</mi>A</mi>)</mo></mrow><annotation encoding="application/x-tex">Sum(OA)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="mord mathit">u</span><span class="mord mathit">m</span>(</span><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mord mathit">A</span>)</span></span></span></span></span> is covered twice by both <span class="maths katex-rendered">S</mi>u</mi>m</mi>(</mo>O</mi>B</mi>)</mo></mrow><annotation encoding="application/x-tex">Sum(OB)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="mord mathit">u</span><span class="mord mathit">m</span>(</span><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mord mathit" style="margin-right: 0.05017em;">B</span>)</span></span></span></span></span> and <span class="maths katex-rendered">S</mi>u</mi>m</mi>(</mo>O</mi>C</mi>)</mo></mrow><annotation encoding="application/x-tex">Sum(OC)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="mord mathit">u</span><span class="mord mathit">m</span>(</span><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mord mathit" style="margin-right: 0.07153em;">C</span>)</span></span></span></span></span>. We could use the principle of inclusion-exclusion to calculate <span class="maths katex-rendered">S</mi>u</mi>m</mi>(</mo>A</mi>B</mi>C</mi>D</mi>)</mo></mrow><annotation encoding="application/x-tex">Sum(ABCD)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="mord mathit">u</span><span class="mord mathit">m</span>(</span><span class="mord mathit">A</span><span class="mord mathit" style="margin-right: 0.05017em;">B</span><span class="mord mathit" style="margin-right: 0.07153em;">C</span><span class="mord mathit" style="margin-right: 0.02778em;">D</span>)</span></span></span></span></span> as following:</p>

<p class="maths katex-rendered">S</mi>u</mi>m</mi>(</mo>A</mi>B</mi>C</mi>D</mi>)</mo>=</mo>S</mi>u</mi>m</mi>(</mo>O</mi>D</mi>)</mo>−</mo>S</mi>u</mi>m</mi>(</mo>O</mi>B</mi>)</mo>−</mo>S</mi>u</mi>m</mi>(</mo>O</mi>C</mi>)</mo>+</mo>S</mi>u</mi>m</mi>(</mo>O</mi>A</mi>)</mo></mrow><annotation encoding="application/x-tex">
Sum(ABCD) = Sum(OD) - Sum(OB) - Sum(OC) + Sum(OA)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="mord mathit">u</span><span class="mord mathit">m</span>(</span><span class="mord mathit">A</span><span class="mord mathit" style="margin-right: 0.05017em;">B</span><span class="mord mathit" style="margin-right: 0.07153em;">C</span><span class="mord mathit" style="margin-right: 0.02778em;">D</span>)</span>=</span><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="mord mathit">u</span><span class="mord mathit">m</span>(</span><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mord mathit" style="margin-right: 0.02778em;">D</span>)</span>−</span><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="mord mathit">u</span><span class="mord mathit">m</span>(</span><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mord mathit" style="margin-right: 0.05017em;">B</span>)</span>−</span><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="mord mathit">u</span><span class="mord mathit">m</span>(</span><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mord mathit" style="margin-right: 0.07153em;">C</span>)</span>+</span><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="mord mathit">u</span><span class="mord mathit">m</span>(</span><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mord mathit">A</span>)</span></span></span></span></span></p>
</p>
</span>private</span> int</span>[][]</span> dp</span>;</span>

public</span> NumMatrix</span>(</span>int</span>[][]</span> matrix</span>)</span> {</span>
    if</span> (</span>matrix</span>.</span>length</span> ==</span> 0</span> ||</span> matrix</span>[</span>0</span>].</span>length</span> ==</span> 0</span>)</span> return</span>;</span>
    dp</span> =</span> new</span> int</span>[</span>matrix</span>.</span>length</span> +</span> 1</span>][</span>matrix</span>[</span>0</span>].</span>length</span> +</span> 1</span>];</span>
    for</span> (</span>int</span> r</span> =</span> 0</span>;</span> r</span> &lt;</span> matrix</span>.</span>length</span>;</span> r</span>++)</span> {</span>
        for</span> (</span>int</span> c</span> =</span> 0</span>;</span> c</span> &lt;</span> matrix</span>[</span>0</span>].</span>length</span>;</span> c</span>++)</span> {</span>
            dp</span>[</span>r</span> +</span> 1</span>][</span>c</span> +</span> 1</span>]</span> =</span> dp</span>[</span>r</span> +</span> 1</span>][</span>c</span>]</span> +</span> dp</span>[</span>r</span>][</span>c</span> +</span> 1</span>]</span> +</span> matrix</span>[</span>r</span>][</span>c</span>]</span> -</span> dp</span>[</span>r</span>][</span>c</span>];</span>
        }</span>
    }</span>
}</span>

public</span> int</span> sumRegion</span>(</span>int</span> row1</span>,</span> int</span> col1</span>,</span> int</span> row2</span>,</span> int</span> col2</span>)</span> {</span>
    return</span> dp</span>[</span>row2</span> +</span> 1</span>][</span>col2</span> +</span> 1</span>]</span> -</span> dp</span>[</span>row1</span>][</span>col2</span> +</span> 1</span>]</span> -</span> dp</span>[</span>row2</span> +</span> 1</span>][</span>col1</span>]</span> +</span> dp</span>[</span>row1</span>][</span>col1</span>];</span>
}</span>
</pre></div>


Complexity analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span> time per query, <span class="maths katex-rendered">O</mi>(</mo>m</mi>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(mn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">m</span><span class="mord mathit">n</span>)</span></span></span></span></span> time pre-computation.
The pre-computation in the constructor takes <span class="maths katex-rendered">O</mi>(</mo>m</mi>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(mn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">m</span><span class="mord mathit">n</span>)</span></span></span></span></span> time. Each sumRegion</em> query takes <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span> time.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>m</mi>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(mn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">m</span><span class="mord mathit">n</span>)</span></span></span></span></span>.
The algorithm uses <span class="maths katex-rendered">O</mi>(</mo>m</mi>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(mn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">m</span><span class="mord mathit">n</span>)</span></span></span></span></span> space to store the cumulative region sum.</p>
</li>
</ul>