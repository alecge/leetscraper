<div class="toc hide">

<a href="#solution">Solution</a>
<a href="#approach-1-brute-force-time-limit-exceeded">Approach #1 Brute Force [Time Limit Exceeded]</a></li>
<a href="#approach-2-using-sorting-time-limit-exceeded">Approach #2 Using sorting [Time Limit Exceeded]:</a></li>
<a href="#approach-3-using-hashmap-time-limit-exceeded">Approach #3 Using Hashmap [Time Limit Exceeded]</a></li>
<a href="#approach-4-using-array-accepted">Approach #4 Using Array [Accepted]</a></li>
<a href="#approach-5-sliding-window-accepted">Approach #5 Sliding Window  [Accepted]:</a></li>
<a href="#approach-6-optimized-sliding-window-accepted">Approach #6 Optimized Sliding Window [Accepted]:</a></li>
</ul>
</li>
</ul>
</div>
Solution</h2>

<h4 id="approach-1-brute-force-time-limit-exceeded">Approach #1 Brute Force [Time Limit Exceeded]</h4>
Algorithm</strong></p>
The simplest method is to generate all the permutations of the short string  and to check if the generated permutation is a substring of the longer string.</p>
In order to generate all the possible pairings, we make use of a function permute(string_1, string_2, current_index)</code>. This function creates all the possible permutations of the short string <span class="maths katex-rendered">s</mi>1</mn></mrow><annotation encoding="application/x-tex">s1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">1</span></span></span></span></span>.</p>
To do so, permute takes the index of the current element <span class="maths katex-rendered">c</mi>u</mi>r</mi>r</mi>e</mi>n</mi>t</mi>i</mi></msub>n</mi>d</mi>e</mi>x</mi></mrow><annotation encoding="application/x-tex">current_index</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit">c</span><span class="mord mathit">u</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit">t</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathit mtight">i</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">n</span><span class="mord mathit">d</span><span class="mord mathit">e</span><span class="mord mathit">x</span></span></span></span></span> as one of the arguments. Then, it swaps the current element with every other element in the array, lying towards its right, so as to generate a new ordering of the array elements. After the swapping has been done, it makes another call to permute but this time with the index of the next element in the array. While returning back, we reverse the swapping done in the current function call.</p>
Thus, when we reach the end of the array, a new ordering of the array's elements is generated. The following animation depicts the process of generating the permutations.</p>
<div class="diaporama" style="width: 940px; height: 529px;"><div class="initial-play play-container"><div class="fa fa-play"></div></div><canvas width="940" height="529" style="width: 940px; height: 529px;"></canvas></div><div class="control-panel" style="width: 940px;"><div class="control-group dia-back fa fa-step-backward"></div><div class="toggle-play control-group fa fa-play"></div><div class="control-group fa fa-step-forward"></div></div>1 / 11</div></div></div>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    boolean</span> flag</span> =</span> false</span>;</span>
    public</span> boolean</span> checkInclusion</span>(</span>String</span> s1</span>,</span> String</span> s2</span>)</span> {</span>
        permute</span>(</span>s1</span>,</span> s2</span>,</span> 0</span>);</span>
        return</span> flag</span>;</span>
    }</span>
    public</span> String</span> swap</span>(</span>String</span> s</span>,</span> int</span> i0</span>,</span> int</span> i1</span>)</span> {</span>
        if</span> (</span>i0</span> ==</span> i1</span>)</span>
            return</span> s</span>;</span>
        String</span> s1</span> =</span> s</span>.</span>substring</span>(</span>0</span>,</span> i0</span>);</span>
        String</span> s2</span> =</span> s</span>.</span>substring</span>(</span>i0</span> +</span> 1</span>,</span> i1</span>);</span>
        String</span> s3</span> =</span> s</span>.</span>substring</span>(</span>i1</span> +</span> 1</span>);</span>
        return</span> s1</span> +</span> s</span>.</span>charAt</span>(</span>i1</span>)</span> +</span> s2</span> +</span> s</span>.</span>charAt</span>(</span>i0</span>)</span> +</span> s3</span>;</span>
    }</span>
    void</span> permute</span>(</span>String</span> s1</span>,</span> String</span> s2</span>,</span> int</span> l</span>)</span> {</span>
        if</span> (</span>l</span> ==</span> s1</span>.</span>length</span>())</span> {</span>
            if</span> (</span>s2</span>.</span>indexOf</span>(</span>s1</span>)</span> &gt;=</span> 0</span>)</span>
                flag</span> =</span> true</span>;</span>
        }</span> else</span> {</span>
            for</span> (</span>int</span> i</span> =</span> l</span>;</span> i</span> &lt;</span> s1</span>.</span>length</span>();</span> i</span>++)</span> {</span>
                s1</span> =</span> swap</span>(</span>s1</span>,</span> l</span>,</span> i</span>);</span>
                permute</span>(</span>s1</span>,</span> s2</span>,</span> l</span> +</span> 1</span>);</span>
                s1</span> =</span> swap</span>(</span>s1</span>,</span> l</span>,</span> i</span>);</span>
            }</span>
        }</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>!</mo>)</mo></mrow><annotation encoding="application/x-tex">O(n!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>!</span>)</span></span></span></span></span>. We match all the permutations of the short string <span class="maths katex-rendered">s</mi>1</mn></mrow><annotation encoding="application/x-tex">s1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">1</span></span></span></span></span>, of length <span class="maths katex-rendered">s</mi>1</mn></mrow><annotation encoding="application/x-tex">s1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">1</span></span></span></span></span>, with <span class="maths katex-rendered">s</mi>2</mn></mrow><annotation encoding="application/x-tex">s2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">2</span></span></span></span></span>. Here, <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> refers to the length of <span class="maths katex-rendered">s</mi>1</mn></mrow><annotation encoding="application/x-tex">s1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">1</span></span></span></span></span>.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>. The depth of the recursion tree is <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>(<span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> refers to the length of the short string <span class="maths katex-rendered">s</mi>1</mn></mrow><annotation encoding="application/x-tex">s1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">1</span></span></span></span></span>). Every node of the recursion tree contains a string of max. length <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span>.</p>
</li>
</ul>

<h4 id="approach-2-using-sorting-time-limit-exceeded">Approach #2 Using sorting [Time Limit Exceeded]:</h4>
Algorithm</strong></p>
The idea behind this approach is that one string will be a permutation of another string only if both of them contain the same characters the same number of times. One string <span class="maths katex-rendered">x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span></span> is a permutation of other string <span class="maths katex-rendered">y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">y</span></span></span></span></span> only if <span class="maths katex-rendered">s</mi>o</mi>r</mi>t</mi>e</mi>d</mi>(</mo>x</mi>)</mo>=</mo>s</mi>o</mi>r</mi>t</mi>e</mi>d</mi>(</mo>y</mi>)</mo></mrow><annotation encoding="application/x-tex">sorted(x)=sorted(y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">t</span><span class="mord mathit">e</span><span class="mord mathit">d</span>(</span><span class="mord mathit">x</span>)</span>=</span><span class="mord mathit">s</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">t</span><span class="mord mathit">e</span><span class="mord mathit">d</span>(</span><span class="mord mathit" style="margin-right: 0.03588em;">y</span>)</span></span></span></span></span>. </p>
In order to check this, we can sort the two strings and compare them.  We sort the short string <span class="maths katex-rendered">s</mi>1</mn></mrow><annotation encoding="application/x-tex">s1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">1</span></span></span></span></span> and all the substrings of <span class="maths katex-rendered">s</mi>2</mn></mrow><annotation encoding="application/x-tex">s2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">2</span></span></span></span></span>, sort them and compare them with the sorted <span class="maths katex-rendered">s</mi>1</mn></mrow><annotation encoding="application/x-tex">s1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">1</span></span></span></span></span> string. If the two match completely, <span class="maths katex-rendered">s</mi>1</mn></mrow><annotation encoding="application/x-tex">s1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">1</span></span></span></span></span>'s permutation is a substring of <span class="maths katex-rendered">s</mi>2</mn></mrow><annotation encoding="application/x-tex">s2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">2</span></span></span></span></span>, otherwise not.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>

    public</span> boolean</span> checkInclusion</span>(</span>String</span> s1</span>,</span> String</span> s2</span>)</span> {</span>
        s1</span> =</span> sort</span>(</span>s1</span>);</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;=</span> s2</span>.</span>length</span>()</span> -</span> s1</span>.</span>length</span>();</span> i</span>++)</span> {</span>
            if</span> (</span>s1</span>.</span>equals</span>(</span>sort</span>(</span>s2</span>.</span>substring</span>(</span>i</span>,</span> i</span> +</span> s1</span>.</span>length</span>()))))</span>
                return</span> true</span>;</span>
        }</span>
        return</span> false</span>;</span>
    }</span>
    public</span> String</span> sort</span>(</span>String</span> s</span>)</span> {</span>
        char</span>[]</span> t</span> =</span> s</span>.</span>toCharArray</span>();</span>
        Arrays</span>.</span>sort</span>(</span>t</span>);</span>
        return</span> new</span> String</span>(</span>t</span>);</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>l</mi>1</mn></msub>l</mi>o</mi>g</mi>(</mo>l</mi>1</mn></msub>)</mo>+</mo>(</mo>l</mi>2</mn></msub>−</mo>l</mi>1</mn></msub>)</mo>l</mi>1</mn></msub>l</mi>o</mi>g</mi>(</mo>l</mi>1</mn></msub>)</mo>)</mo></mrow><annotation encoding="application/x-tex">Obig(l_1log(l_1)+(l_2-l_1)l_1log(l_1)big)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.85em;"></span><span class="strut bottom" style="height: 1.20001em; vertical-align: -0.35001em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mord style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing size1">(</span></span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span>+</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>−</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span><span class="mord style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing size1">)</span></span></span></span></span></span>. where <span class="maths katex-rendered">l</mi>1</mn></msub></mrow><annotation encoding="application/x-tex">l_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> is the length of string <span class="maths katex-rendered">l</mi>1</mn></msub></mrow><annotation encoding="application/x-tex">l_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> and <span class="maths katex-rendered">l</mi>2</mn></msub></mrow><annotation encoding="application/x-tex">l_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> is the length of string <span class="maths katex-rendered">l</mi>2</mn></msub></mrow><annotation encoding="application/x-tex">l_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>l</mi>1</mn></msub>)</mo></mrow><annotation encoding="application/x-tex">O(l_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>. <span class="maths katex-rendered">t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">t</span></span></span></span></span> array is used .</p>
</li>
</ul>

<h4 id="approach-3-using-hashmap-time-limit-exceeded">Approach #3 Using Hashmap [Time Limit Exceeded]</h4>
Algorithm</strong></p>
As discussed above, one string will be a permutation of another string only if both of them contain the same charaters with the same frequency. We can consider every possible substring in the long string <span class="maths katex-rendered">s</mi>2</mn></mrow><annotation encoding="application/x-tex">s2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">2</span></span></span></span></span> of the same length as that of <span class="maths katex-rendered">s</mi>1</mn></mrow><annotation encoding="application/x-tex">s1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">1</span></span></span></span></span> and check the frequency of occurence of the characters appearing in the two. If the frequencies of every letter match exactly, then only <span class="maths katex-rendered">s</mi>1</mn></mrow><annotation encoding="application/x-tex">s1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">1</span></span></span></span></span>'s permutation can be a substring of <span class="maths katex-rendered">s</mi>2</mn></mrow><annotation encoding="application/x-tex">s2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">2</span></span></span></span></span>. </p>
In order to implement this approach, instead of sorting and then comparing the elements for equality, we make use of a hashmap <span class="maths katex-rendered">s</mi>1</mn>m</mi>a</mi>p</mi></mrow><annotation encoding="application/x-tex">s1map</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.83888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">1</span><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">p</span></span></span></span></span> which stores the frequency of occurence of all the characters in the short string <span class="maths katex-rendered">s</mi>1</mn></mrow><annotation encoding="application/x-tex">s1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">1</span></span></span></span></span>. We consider every possible substring of <span class="maths katex-rendered">s</mi>2</mn></mrow><annotation encoding="application/x-tex">s2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">2</span></span></span></span></span> of the same length as that of <span class="maths katex-rendered">s</mi>1</mn></mrow><annotation encoding="application/x-tex">s1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">1</span></span></span></span></span>, find its corresponding hashmap as well, namely <span class="maths katex-rendered">s</mi>2</mn>m</mi>a</mi>p</mi></mrow><annotation encoding="application/x-tex">s2map</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.83888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">2</span><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">p</span></span></span></span></span>. Thus, the substrings considered can be viewed as a window of length as that of <span class="maths katex-rendered">s</mi>1</mn></mrow><annotation encoding="application/x-tex">s1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">1</span></span></span></span></span> iterating over <span class="maths katex-rendered">s</mi>2</mn></mrow><annotation encoding="application/x-tex">s2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">2</span></span></span></span></span>. If the two hashmaps obtained are identical for any such window, we can conclude that <span class="maths katex-rendered">s</mi>1</mn></mrow><annotation encoding="application/x-tex">s1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">1</span></span></span></span></span>'s permutation is a substring of <span class="maths katex-rendered">s</mi>2</mn></mrow><annotation encoding="application/x-tex">s2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">2</span></span></span></span></span>, otherwise not.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> boolean</span> checkInclusion</span>(</span>String</span> s1</span>,</span> String</span> s2</span>)</span> {</span>
        if</span> (</span>s1</span>.</span>length</span>()</span> &gt;</span> s2</span>.</span>length</span>())</span>
            return</span> false</span>;</span>
        HashMap</span> &lt;</span> Character</span>,</span> Integer</span> &gt;</span> s1map</span> =</span> new</span> HashMap</span> &lt;</span> &gt;</span> ();</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> s1</span>.</span>length</span>();</span> i</span>++)</span>
            s1map</span>.</span>put</span>(</span>s1</span>.</span>charAt</span>(</span>i</span>),</span> s1map</span>.</span>getOrDefault</span>(</span>s1</span>.</span>charAt</span>(</span>i</span>),</span> 0</span>)</span> +</span> 1</span>);</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;=</span> s2</span>.</span>length</span>()</span> -</span> s1</span>.</span>length</span>();</span> i</span>++)</span> {</span>
            HashMap</span> &lt;</span> Character</span>,</span> Integer</span> &gt;</span> s2map</span> =</span> new</span> HashMap</span> &lt;</span> &gt;</span> ();</span>
            for</span> (</span>int</span> j</span> =</span> 0</span>;</span> j</span> &lt;</span> s1</span>.</span>length</span>();</span> j</span>++)</span> {</span>
                s2map</span>.</span>put</span>(</span>s2</span>.</span>charAt</span>(</span>i</span> +</span> j</span>),</span> s2map</span>.</span>getOrDefault</span>(</span>s2</span>.</span>charAt</span>(</span>i</span> +</span> j</span>),</span> 0</span>)</span> +</span> 1</span>);</span>
            }</span>
            if</span> (</span>matches</span>(</span>s1map</span>,</span> s2map</span>))</span>
                return</span> true</span>;</span>
        }</span>
        return</span> false</span>;</span>
    }</span>
    public</span> boolean</span> matches</span>(</span>HashMap</span> &lt;</span> Character</span>,</span> Integer</span> &gt;</span> s1map</span>,</span> HashMap</span> &lt;</span> Character</span>,</span> Integer</span> &gt;</span> s2map</span>)</span> {</span>
        for</span> (</span>char</span> key</span>:</span> s1map</span>.</span>keySet</span>())</span> {</span>
            if</span> (</span>s1map</span>.</span>get</span>(</span>key</span>)</span> -</span> s2map</span>.</span>getOrDefault</span>(</span>key</span>,</span> -</span>1</span>)</span> !=</span> 0</span>)</span>
                return</span> false</span>;</span>
        }</span>
        return</span> true</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>l</mi>1</mn></msub>+</mo>2</mn>6</mn>∗</mo>l</mi>1</mn></msub>∗</mo>(</mo>l</mi>2</mn></msub>−</mo>l</mi>1</mn></msub>)</mo>)</mo></mrow><annotation encoding="application/x-tex">O(l_1+26*l_1*(l_2-l_1))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>+</span><span class="mord mathrm">2</span><span class="mord mathrm">6</span>∗</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>∗</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>−</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span>)</span></span></span></span></span>. hashmap contains atmost 26 keys. where <span class="maths katex-rendered">l</mi>1</mn></msub></mrow><annotation encoding="application/x-tex">l_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> is the length of string <span class="maths katex-rendered">l</mi>1</mn></msub></mrow><annotation encoding="application/x-tex">l_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> and <span class="maths katex-rendered">l</mi>2</mn></msub></mrow><annotation encoding="application/x-tex">l_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> is the length of string <span class="maths katex-rendered">l</mi>2</mn></msub></mrow><annotation encoding="application/x-tex">l_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. hashmap contains atmost 26 key-value pairs.</p>
</li>
</ul>

<h4 id="approach-4-using-array-accepted">Approach #4 Using Array [Accepted]</h4>
Algorithm</strong></p>
Instead of making use of a special HashMap datastructure just to store the frequency of occurence of characters, we can use a simpler array data structure to store the frequencies. Given strings contains only lowercase alphabets ('a' to 'z'). So we need to take an array of size 26.The rest of the process remains the same as the last approach.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> boolean</span> checkInclusion</span>(</span>String</span> s1</span>,</span> String</span> s2</span>)</span> {</span>
        if</span> (</span>s1</span>.</span>length</span>()</span> &gt;</span> s2</span>.</span>length</span>())</span>
            return</span> false</span>;</span>
        int</span>[]</span> s1map</span> =</span> new</span> int</span>[</span>26</span>];</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> s1</span>.</span>length</span>();</span> i</span>++)</span>
            s1map</span>[</span>s1</span>.</span>charAt</span>(</span>i</span>)</span> -</span> 'a'</span>]++;</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;=</span> s2</span>.</span>length</span>()</span> -</span> s1</span>.</span>length</span>();</span> i</span>++)</span> {</span>
            int</span>[]</span> s2map</span> =</span> new</span> int</span>[</span>26</span>];</span>
            for</span> (</span>int</span> j</span> =</span> 0</span>;</span> j</span> &lt;</span> s1</span>.</span>length</span>();</span> j</span>++)</span> {</span>
                s2map</span>[</span>s2</span>.</span>charAt</span>(</span>i</span> +</span> j</span>)</span> -</span> 'a'</span>]++;</span>
            }</span>
            if</span> (</span>matches</span>(</span>s1map</span>,</span> s2map</span>))</span>
                return</span> true</span>;</span>
        }</span>
        return</span> false</span>;</span>
    }</span>
    public</span> boolean</span> matches</span>(</span>int</span>[]</span> s1map</span>,</span> int</span>[]</span> s2map</span>)</span> {</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> 26</span>;</span> i</span>++)</span> {</span>
            if</span> (</span>s1map</span>[</span>i</span>]</span> !=</span> s2map</span>[</span>i</span>])</span>
                return</span> false</span>;</span>
        }</span>
        return</span> true</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>l</mi>1</mn></msub>+</mo>2</mn>6</mn>∗</mo>l</mi>1</mn></msub>∗</mo>(</mo>l</mi>2</mn></msub>−</mo>l</mi>1</mn></msub>)</mo>)</mo></mrow><annotation encoding="application/x-tex">O(l_1+26*l_1*(l_2-l_1))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>+</span><span class="mord mathrm">2</span><span class="mord mathrm">6</span>∗</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>∗</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>−</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span>)</span></span></span></span></span>,  where <span class="maths katex-rendered">l</mi>1</mn></msub></mrow><annotation encoding="application/x-tex">l_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> is the length of string <span class="maths katex-rendered">l</mi>1</mn></msub></mrow><annotation encoding="application/x-tex">l_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> and <span class="maths katex-rendered">l</mi>2</mn></msub></mrow><annotation encoding="application/x-tex">l_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> is the length of string <span class="maths katex-rendered">l</mi>2</mn></msub></mrow><annotation encoding="application/x-tex">l_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. <span class="maths katex-rendered">s</mi>1</mn>m</mi>a</mi>p</mi></mrow><annotation encoding="application/x-tex">s1map</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.83888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">1</span><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">p</span></span></span></span></span> and <span class="maths katex-rendered">s</mi>2</mn>m</mi>a</mi>p</mi></mrow><annotation encoding="application/x-tex">s2map</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.83888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">2</span><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">p</span></span></span></span></span> of size 26 is used.</p>
</li>
</ul>

<h4 id="approach-5-sliding-window-accepted">Approach #5 Sliding Window  [Accepted]:</h4>
Algorithm</strong></p>
Instead of generating the hashmap afresh for every window considered in <span class="maths katex-rendered">s</mi>2</mn></mrow><annotation encoding="application/x-tex">s2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">2</span></span></span></span></span>, we can create the hashmap just once for the first window in <span class="maths katex-rendered">s</mi>2</mn></mrow><annotation encoding="application/x-tex">s2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">2</span></span></span></span></span>. Then, later on when we slide the window, we know that we add one preceding character and add a new succeeding character to the new window considered. Thus, we can update the hashmap by just updating the indices associated with those two characters only. Again, for every updated hashmap, we compare all the elements of the hashmap for equality to get the required result.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> boolean</span> checkInclusion</span>(</span>String</span> s1</span>,</span> String</span> s2</span>)</span> {</span>
        if</span> (</span>s1</span>.</span>length</span>()</span> &gt;</span> s2</span>.</span>length</span>())</span>
            return</span> false</span>;</span>
        int</span>[]</span> s1map</span> =</span> new</span> int</span>[</span>26</span>];</span>
        int</span>[]</span> s2map</span> =</span> new</span> int</span>[</span>26</span>];</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> s1</span>.</span>length</span>();</span> i</span>++)</span> {</span>
            s1map</span>[</span>s1</span>.</span>charAt</span>(</span>i</span>)</span> -</span> 'a'</span>]++;</span>
            s2map</span>[</span>s2</span>.</span>charAt</span>(</span>i</span>)</span> -</span> 'a'</span>]++;</span>
        }</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> s2</span>.</span>length</span>()</span> -</span> s1</span>.</span>length</span>();</span> i</span>++)</span> {</span>
            if</span> (</span>matches</span>(</span>s1map</span>,</span> s2map</span>))</span>
                return</span> true</span>;</span>
            s2map</span>[</span>s2</span>.</span>charAt</span>(</span>i</span> +</span> s1</span>.</span>length</span>())</span> -</span> 'a'</span>]++;</span>
            s2map</span>[</span>s2</span>.</span>charAt</span>(</span>i</span>)</span> -</span> 'a'</span>]--;</span>
        }</span>
        return</span> matches</span>(</span>s1map</span>,</span> s2map</span>);</span>
    }</span>
    public</span> boolean</span> matches</span>(</span>int</span>[]</span> s1map</span>,</span> int</span>[]</span> s2map</span>)</span> {</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> 26</span>;</span> i</span>++)</span> {</span>
            if</span> (</span>s1map</span>[</span>i</span>]</span> !=</span> s2map</span>[</span>i</span>])</span>
                return</span> false</span>;</span>
        }</span>
        return</span> true</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>l</mi>1</mn></msub>+</mo>2</mn>6</mn>∗</mo>(</mo>l</mi>2</mn></msub>−</mo>l</mi>1</mn></msub>)</mo>)</mo></mrow><annotation encoding="application/x-tex">O(l_1+26*(l_2-l_1))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>+</span><span class="mord mathrm">2</span><span class="mord mathrm">6</span>∗</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>−</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span>)</span></span></span></span></span>,  where <span class="maths katex-rendered">l</mi>1</mn></msub></mrow><annotation encoding="application/x-tex">l_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> is the length of string <span class="maths katex-rendered">l</mi>1</mn></msub></mrow><annotation encoding="application/x-tex">l_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> and <span class="maths katex-rendered">l</mi>2</mn></msub></mrow><annotation encoding="application/x-tex">l_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> is the length of string <span class="maths katex-rendered">l</mi>2</mn></msub></mrow><annotation encoding="application/x-tex">l_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. Constant space is used.</p>
</li>
</ul>

<h4 id="approach-6-optimized-sliding-window-accepted">Approach #6 Optimized Sliding Window [Accepted]:</h4>
Algorithm</strong></p>
The last approach can be optimized, if instead of comparing all the elements of the hashmaps for every updated <span class="maths katex-rendered">s</mi>2</mn>m</mi>a</mi>p</mi></mrow><annotation encoding="application/x-tex">s2map</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.83888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">2</span><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">p</span></span></span></span></span> corresponding to every window of <span class="maths katex-rendered">s</mi>2</mn></mrow><annotation encoding="application/x-tex">s2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">2</span></span></span></span></span> considered, we keep a track of the number of elements which were already matching in the earlier hashmap and update just the count of matching elements when we shift the window towards the right.</p>
To do so, we maintain a <span class="maths katex-rendered">c</mi>o</mi>u</mi>n</mi>t</mi></mrow><annotation encoding="application/x-tex">count</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">u</span><span class="mord mathit">n</span><span class="mord mathit">t</span></span></span></span></span> variable, which stores the number of characters(out of the 26 alphabets), which have the same frequency of occurence in <span class="maths katex-rendered">s</mi>1</mn></mrow><annotation encoding="application/x-tex">s1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">1</span></span></span></span></span> and the current window in <span class="maths katex-rendered">s</mi>2</mn></mrow><annotation encoding="application/x-tex">s2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathrm">2</span></span></span></span></span>. When we slide the window, if the deduction of the last element and the addition of the new element leads to a new frequency match of any of the characters, we increment the <span class="maths katex-rendered">c</mi>o</mi>u</mi>n</mi>t</mi></mrow><annotation encoding="application/x-tex">count</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">u</span><span class="mord mathit">n</span><span class="mord mathit">t</span></span></span></span></span> by 1. If not, we keep the <span class="maths katex-rendered">c</mi>o</mi>u</mi>n</mi>t</mi></mrow><annotation encoding="application/x-tex">count</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">u</span><span class="mord mathit">n</span><span class="mord mathit">t</span></span></span></span></span> intact. But, if a character whose frequency was the same earlier(prior to addition and removal) is added, it now leads to a frequency mismatch which is taken into account by decrementing the same <span class="maths katex-rendered">c</mi>o</mi>u</mi>n</mi>t</mi></mrow><annotation encoding="application/x-tex">count</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">u</span><span class="mord mathit">n</span><span class="mord mathit">t</span></span></span></span></span> variable. If, after the shifting of the window, the <span class="maths katex-rendered">c</mi>o</mi>u</mi>n</mi>t</mi></mrow><annotation encoding="application/x-tex">count</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">u</span><span class="mord mathit">n</span><span class="mord mathit">t</span></span></span></span></span> evaluates to 26, it means all the characters match in frequency totally. So, we return a True in that case immediately.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> boolean</span> checkInclusion</span>(</span>String</span> s1</span>,</span> String</span> s2</span>)</span> {</span>
        if</span> (</span>s1</span>.</span>length</span>()</span> &gt;</span> s2</span>.</span>length</span>())</span>
            return</span> false</span>;</span>
        int</span>[]</span> s1map</span> =</span> new</span> int</span>[</span>26</span>];</span>
        int</span>[]</span> s2map</span> =</span> new</span> int</span>[</span>26</span>];</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> s1</span>.</span>length</span>();</span> i</span>++)</span> {</span>
            s1map</span>[</span>s1</span>.</span>charAt</span>(</span>i</span>)</span> -</span> 'a'</span>]++;</span>
            s2map</span>[</span>s2</span>.</span>charAt</span>(</span>i</span>)</span> -</span> 'a'</span>]++;</span>
        }</span>
        int</span> count</span> =</span> 0</span>;</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> 26</span>;</span> i</span>++)</span>
            if</span> (</span>s1map</span>[</span>i</span>]</span> ==</span> s2map</span>[</span>i</span>])</span>
                count</span>++;</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> s2</span>.</span>length</span>()</span> -</span> s1</span>.</span>length</span>();</span> i</span>++)</span> {</span>
            int</span> r</span> =</span> s2</span>.</span>charAt</span>(</span>i</span> +</span> s1</span>.</span>length</span>())</span> -</span> 'a'</span>,</span> l</span> =</span> s2</span>.</span>charAt</span>(</span>i</span>)</span> -</span> 'a'</span>;</span>
            if</span> (</span>count</span> ==</span> 26</span>)</span>
                return</span> true</span>;</span>
            s2map</span>[</span>r</span>]++;</span>
            if</span> (</span>s2map</span>[</span>r</span>]</span> ==</span> s1map</span>[</span>r</span>])</span>
                count</span>++;</span>
            else</span> if</span> (</span>s2map</span>[</span>r</span>]</span> ==</span> s1map</span>[</span>r</span>]</span> +</span> 1</span>)</span>
                count</span>--;</span>
            s2map</span>[</span>l</span>]--;</span>
            if</span> (</span>s2map</span>[</span>l</span>]</span> ==</span> s1map</span>[</span>l</span>])</span>
                count</span>++;</span>
            else</span> if</span> (</span>s2map</span>[</span>l</span>]</span> ==</span> s1map</span>[</span>l</span>]</span> -</span> 1</span>)</span>
                count</span>--;</span>
        }</span>
        return</span> count</span> ==</span> 26</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>l</mi>1</mn></msub>+</mo>(</mo>l</mi>2</mn></msub>−</mo>l</mi>1</mn></msub>)</mo>)</mo></mrow><annotation encoding="application/x-tex">O(l_1+(l_2-l_1))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>+</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>−</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span>)</span></span></span></span></span>. where <span class="maths katex-rendered">l</mi>1</mn></msub></mrow><annotation encoding="application/x-tex">l_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> is the length of string <span class="maths katex-rendered">l</mi>1</mn></msub></mrow><annotation encoding="application/x-tex">l_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> and <span class="maths katex-rendered">l</mi>2</mn></msub></mrow><annotation encoding="application/x-tex">l_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> is the length of string <span class="maths katex-rendered">l</mi>2</mn></msub></mrow><annotation encoding="application/x-tex">l_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.84444em; vertical-align: -0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. Constant space is used.</p>
</li>
</ul>

Analysis written by: <a href="https://leetcode.com/vinod23">@vinod23</a></p>