<div class="toc hide">

<a href="#solution">Solution</a>
<a href="#approach-1-simple-sorting-time-limit-exceeded">Approach #1 Simple Sorting [Time Limit Exceeded]</a></li>
<a href="#approach-2-insertion-sort-time-limit-exceeded">Approach #2 Insertion Sort [Time Limit Exceeded]</a></li>
<a href="#approach-3-two-heaps-accepted">Approach #3 Two Heaps! [Accepted]</a></li>
<a href="#approach-4-multiset-and-two-pointers-accepted">Approach #4 Multiset and Two Pointers [Accepted]</a></li>
<a href="#further-thoughts">Further Thoughts</a></li>
</ul>
</li>
</ul>
</div>
Solution</h2>

<h4 id="approach-1-simple-sorting-time-limit-exceeded">Approach #1 Simple Sorting [Time Limit Exceeded]</h4>
Intuition</strong></p>
Do what the question says.</p>
Algorithm</strong></p>
Store the numbers in a resize-able container. Every time you need to output the median, sort the container and output the median.</p>
C++</strong></p>
</span>class</span> MedianFinder</span> {</span>
    vector</span>&lt;</span>double</span>&gt;</span> store</span>;</span>

public</span>:</span>
    // Adds a number into the data structure.</span>
    void</span> addNum</span>(</span>int</span> num</span>)</span>
    {</span>
        store</span>.</span>push_back</span>(</span>num</span>);</span>
    }</span>

    // Returns the median of current data stream</span>
    double</span> findMedian</span>()</span>
    {</span>
        sort</span>(</span>store</span>.</span>begin</span>(),</span> store</span>.</span>end</span>());</span>

        int</span> n</span> =</span> store</span>.</span>size</span>();</span>
        return</span> (</span>n</span> &amp;</span> 1</span> ?</span> (</span>store</span>[</span>n</span> /</span> 2</span> -</span> 1</span>]</span> +</span> store</span>[</span>n</span> /</span> 2</span>])</span> *</span> 0.5</span> :</span> store</span>[</span>n</span> /</span> 2</span>]);</span>
    }</span>
};</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity: <span class="maths katex-rendered">O</mi>(</mo>n</mi>⋅</mo>l</mi>o</mi>g</mi>(</mo>n</mi>)</mo>)</mo>+</mo>O</mi>(</mo>1</mn>)</mo>≃</mo>O</mi>(</mo>n</mi>⋅</mo>l</mi>o</mi>g</mi>(</mo>n</mi>)</mo>)</mo></mrow><annotation encoding="application/x-tex">O(n cdot log(n)) + O(1) simeq O(n cdot log(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>⋅</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span>(</span><span class="mord mathit">n</span>)</span>)</span>+</span><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span>≃</span><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>⋅</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span>(</span><span class="mord mathit">n</span>)</span>)</span></span></span></span></span>.</p>

Adding a number takes amortized <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span> time for a container with an efficient resizing scheme.</li>
Finding the median is primarily dependent on the sorting that takes place. This takes <span class="maths katex-rendered">O</mi>(</mo>n</mi>⋅</mo>l</mi>o</mi>g</mi>(</mo>n</mi>)</mo>)</mo></mrow><annotation encoding="application/x-tex">O(n cdot log(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>⋅</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span>(</span><span class="mord mathit">n</span>)</span>)</span></span></span></span></span> time for a standard comparative sort.</li>
</ul>
</li>

Space complexity: <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> linear space to hold input in a container. No extra space other than that needed (since sorting can usually be done in-place).</p>
</li>
</ul>

<h4 id="approach-2-insertion-sort-time-limit-exceeded">Approach #2 Insertion Sort [Time Limit Exceeded]</h4>
Intuition</strong></p>
Keeping our input container always sorted (i.e. maintaining the sorted nature of the container as an invariant</em>).</p>
Algorithm</strong></p>
Which algorithm allows a number to be added to a sorted list of numbers and yet keeps the entire list sorted? Well, for one, insertion sort!</strong></p>
We assume that the current list is already sorted. When a new number comes, we have to add it to the list while maintaining the sorted nature of the list. This is achieved easily by finding the correct place to insert the incoming number, using a binary search</strong> (remember, the list is always sorted</em>). Once the position is found, we need to shift all higher elements by one space to make room for the incoming number.</p>
This method would work well when the amount of insertion queries is lesser or about the same as the amount of median finding queries.</p>
C++</strong></p>
</span>class</span> MedianFinder</span> {</span>
    vector</span>&lt;</span>int</span>&gt;</span> store</span>;</span> // resize-able container</span>

public</span>:</span>
    // Adds a number into the data structure.</span>
    void</span> addNum</span>(</span>int</span> num</span>)</span>
    {</span>
        if</span> (</span>store</span>.</span>empty</span>())</span>
            store</span>.</span>push_back</span>(</span>num</span>);</span>
        else</span>
            store</span>.</span>insert</span>(</span>lower_bound</span>(</span>store</span>.</span>begin</span>(),</span> store</span>.</span>end</span>(),</span> num</span>),</span> num</span>);</span>     // binary search and insertion combined</span>
    }</span>

    // Returns the median of current data stream</span>
    double</span> findMedian</span>()</span>
    {</span>
        int</span> n</span> =</span> store</span>.</span>size</span>();</span>
        return</span> n</span> &amp;</span> 1</span> ?</span> store</span>[</span>n</span> /</span> 2</span>]</span> :</span> (</span>store</span>[</span>n</span> /</span> 2</span> -</span> 1</span>]</span> +</span> store</span>[</span>n</span> /</span> 2</span>])</span> *</span> 0.5</span>;</span>
    }</span>
};</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity: <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo>+</mo>O</mi>(</mo>l</mi>o</mi>g</mi>(</mo>n</mi>)</mo>)</mo>≈</mo>O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n) + O(log(n)) approx O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span>+</span><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span>(</span><span class="mord mathit">n</span>)</span>)</span>≈</span><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>.</p>

Binary Search takes <span class="maths katex-rendered">O</mi>(</mo>l</mi>o</mi>g</mi>(</mo>n</mi>)</mo>)</mo></mrow><annotation encoding="application/x-tex">O(log(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span>(</span><span class="mord mathit">n</span>)</span>)</span></span></span></span></span> time to find correct insertion position.</li>
Insertion can take up to <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> time since elements have to be shifted inside the container to make room for the new element.</li>
</ul>
</li>
</ul>

Pop quiz:</strong> Can we use a linear</em> search instead of a binary</em> search to find insertion position, without incurring any significant runtime penalty?</p>
</blockquote>

Space complexity: <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> linear space to hold input in a container.</li>
</ul>

<h4 id="approach-3-two-heaps-accepted">Approach #3 Two Heaps! [Accepted]</h4>
Intuition</strong></p>
The above two approaches gave us some valuable insights on how to tackle this problem. Concretely, one can infer two things:</p>

If we could maintain direct access to median elements at all times, then finding the median would take a constant amount of time.</li>
If we could find a reasonably fast way of adding numbers to our containers, additional penalties incurred could be lessened.</li>
</ol>
But perhaps the most important insight, which is not readily observable, is the fact that we only</em> need a consistent way to access the median elements. Keeping the entire</em> input sorted is not a requirement.</strong></p>

Well, if only there were a data structure which could handle our needs.</p>
</blockquote>
As it turns out there are two data structures for the job:</p>

Heaps (or Priority Queues <sup id="fnref:note-1"><a class="footnote-ref" href="#fn:note-1" rel="footnote">1</a></sup>)</li>
Self-balancing Binary Search Trees (we'll talk more about them in <a href="#approach-4-multiset-and-two-pointers-accepted">Approach #4</a>)</li>
</ul>
Heaps are a natural ingredient for this dish! Adding elements to them take logarithmic order of time. They also give direct access to the maximal/minimal elements in a group.</p>
If we could maintain two</em> heaps in the following way:</p>

A max-heap to store the smaller half of the input numbers</li>
A min-heap to store the larger half of the input numbers</li>
</ul>
This gives access to median values in the input: they comprise the top of the heaps!</p>
Wait, what? How?</strong></p>
If the following conditions are met:</p>

Both the heaps are balanced (or nearly balanced)</li>
The max-heap contains all the smaller numbers while the min-heap contains all the larger numbers</li>
</ol>
then we can say that:</p>

All the numbers in the max-heap are smaller or equal to the top element of the max-heap (let's call it <span class="maths katex-rendered">x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span></span>)</li>
All the numbers in the min-heap are larger or equal to the top element of the min-heap (let's call it <span class="maths katex-rendered">y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">y</span></span></span></span></span>)</li>
</ol>
Then <span class="maths katex-rendered">x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span></span> and/or <span class="maths katex-rendered">y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">y</span></span></span></span></span> are smaller than (or equal to) almost half of the elements and larger than (or equal to) the other half. That is the</em> definition of median</strong> elements.</p>
This leads us to a huge point of pain in this approach: balancing the two heaps!</strong></p>
Algorithm</strong></p>


Two priority queues:</p>

A max-heap lo</code> to store the smaller half of the numbers</li>
A min-heap hi</code> to store the larger half of the numbers</li>
</ol>
</li>

The max-heap lo</code> is allowed to store, at worst, one more element more than the min-heap hi</code>. Hence if we have processed <span class="maths katex-rendered">k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span></span></span></span></span> elements:</p>

If <span class="maths katex-rendered">k</mi>=</mo>2</mn>∗</mo>n</mi>+</mo>1</mn></mspace>(</mo>∀</mi><mspace width="0.16667em"></mspace>n</mi>∈</mo>Z</mi></mrow>)</mo></mrow><annotation encoding="application/x-tex">k = 2*n + 1 quad (forall , n in mathbb{Z})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span>=</span><span class="mord mathrm">2</span>∗</span><span class="mord mathit">n</span>+</span><span class="mord mathrm">1</span><span class="mspace quad"></span>(</span></span><span class="mord mathrm">∀</span><span class="mord mathit"><span class="mspace thinspace"></span><span class="mord mathit">n</span></span>∈</span><span class="mord textstyle uncramped"><span class="mord mathbb">Z</span></span>)</span></span></span></span></span>, then lo</code> is allowed to hold <span class="maths katex-rendered">n</mi>+</mo>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span>+</span><span class="mord mathrm">1</span></span></span></span></span> elements, while hi</code> can hold <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> elements.</li>
If <span class="maths katex-rendered">k</mi>=</mo>2</mn>∗</mo>n</mi></mspace>(</mo>∀</mi><mspace width="0.16667em"></mspace>n</mi>∈</mo>Z</mi></mrow>)</mo></mrow><annotation encoding="application/x-tex">k = 2*n quad (forall , n in mathbb{Z})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span>=</span><span class="mord mathrm">2</span>∗</span><span class="mord mathit">n</span><span class="mspace quad"></span>(</span></span><span class="mord mathrm">∀</span><span class="mord mathit"><span class="mspace thinspace"></span><span class="mord mathit">n</span></span>∈</span><span class="mord textstyle uncramped"><span class="mord mathbb">Z</span></span>)</span></span></span></span></span>, then both heaps are balanced and hold <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> elements each.</li>
</ul>
This gives us the nice property that when the heaps are perfectly balanced, the median can be derived from the tops of both heaps. Otherwise, the top of the max-heap lo</code> holds the legitimate median.</p>
</li>

Adding a number num</code>:</p>

Add num</code> to max-heap lo</code>. Since lo</code> received a new element, we must do a balancing step for hi</code>. So remove the largest element from lo</code> and offer it to hi</code>.</li>
The min-heap hi</code> might end holding more elements than the max-heap lo</code>, after the previous operation. We fix that by removing the smallest element from hi</code> and offering it to lo</code>.</li>
</ul>
The above step ensures that we do not disturb the nice little size property we just mentioned.</p>
</li>
</ul>
A little example will clear this up! Say we take input from the stream [41, 35, 62, 5, 97, 108]</code>. The run-though of the algorithm looks like this:</p>
</span>Adding number 41</span>
MaxHeap lo:</span> [</span>41</span>]</span>           //</span> MaxHeap stores the largest value at the top (</span>index 0</span>)</span>
MinHeap hi:</span> []</span>             //</span> MinHeap stores the smallest value at the top (</span>index 0</span>)</span>
Median is 41</span>
=======================</span>
Adding number 35</span>
MaxHeap lo:</span> [</span>35</span>]</span>
MinHeap hi:</span> [</span>41</span>]</span>
Median is 38</span>
=======================</span>
Adding number 62</span>
MaxHeap lo:</span> [</span>41</span>,</span> 35</span>]</span>
MinHeap hi:</span> [</span>62</span>]</span>
Median is 41</span>
=======================</span>
Adding number 4</span>
MaxHeap lo:</span> [</span>35</span>,</span> 4</span>]</span>
MinHeap hi:</span> [</span>41</span>,</span> 62</span>]</span>
Median is 38</span>
=======================</span>
Adding number 97</span>
MaxHeap lo:</span> [</span>41</span>,</span> 35</span>,</span> 4</span>]</span>
MinHeap hi:</span> [</span>62</span>,</span> 97</span>]</span>
Median is 41</span>
=======================</span>
Adding number 108</span>
MaxHeap lo:</span> [</span>41</span>,</span> 35</span>,</span> 4</span>]</span>
MinHeap hi:</span> [</span>62</span>,</span> 97</span>,</span> 108</span>]</span>
Median is 51.5</span>
</pre></div>


C++</strong></p>
</span>class</span> MedianFinder</span> {</span>
    priority_queue</span>&lt;</span>int</span>&gt;</span> lo</span>;</span>                              // max heap</span>
    priority_queue</span>&lt;</span>int</span>,</span> vector</span>&lt;</span>int</span>&gt;</span>,</span> greater</span>&lt;</span>int</span>&gt;&gt;</span> hi</span>;</span>   // min heap</span>

public</span>:</span>
    // Adds a number into the data structure.</span>
    void</span> addNum</span>(</span>int</span> num</span>)</span>
    {</span>
        lo</span>.</span>push</span>(</span>num</span>);</span>                                    // Add to max heap</span>

        hi</span>.</span>push</span>(</span>lo</span>.</span>top</span>());</span>                               // balancing step</span>
        lo</span>.</span>pop</span>();</span>

        if</span> (</span>lo</span>.</span>size</span>()</span> &lt;</span> hi</span>.</span>size</span>())</span> {</span>                     // maintain size property</span>
            lo</span>.</span>push</span>(</span>hi</span>.</span>top</span>());</span>
            hi</span>.</span>pop</span>();</span>
        }</span>
    }</span>

    // Returns the median of current data stream</span>
    double</span> findMedian</span>()</span>
    {</span>
        return</span> lo</span>.</span>size</span>()</span> &gt;</span> hi</span>.</span>size</span>()</span> ?</span> (</span>double</span>)</span> lo</span>.</span>top</span>()</span> :</span> (</span>lo</span>.</span>top</span>()</span> +</span> hi</span>.</span>top</span>())</span> *</span> 0.5</span>;</span>
    }</span>
};</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity: <span class="maths katex-rendered">O</mi>(</mo>5</mn>∗</mo>l</mi>o</mi>g</mi>(</mo>n</mi>)</mo>)</mo>+</mo>O</mi>(</mo>1</mn>)</mo>≈</mo>O</mi>(</mo>l</mi>o</mi>g</mi>(</mo>n</mi>)</mo>)</mo></mrow><annotation encoding="application/x-tex">O(5 * log(n)) + O(1) approx O(log(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">5</span>∗</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span>(</span><span class="mord mathit">n</span>)</span>)</span>+</span><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span>≈</span><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span>(</span><span class="mord mathit">n</span>)</span>)</span></span></span></span></span>.</p>

At worst, there are three heap insertions and two heap deletions from the top. Each of these takes about <span class="maths katex-rendered">O</mi>(</mo>l</mi>o</mi>g</mi>(</mo>n</mi>)</mo>)</mo></mrow><annotation encoding="application/x-tex">O(log(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span>(</span><span class="mord mathit">n</span>)</span>)</span></span></span></span></span> time.</li>
Finding the mean takes constant <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span> time since the tops of heaps are directly accessible.</li>
</ul>
</li>

Space complexity: <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> linear space to hold input in containers.</p>
</li>
</ul>

<h4 id="approach-4-multiset-and-two-pointers-accepted">Approach #4 Multiset and Two Pointers [Accepted]</h4>
Intuition</strong></p>
Self-balancing Binary Search Trees (like an <a href="https://en.wikipedia.org/wiki/AVL_tree">AVL Tree</a>) have some very</em> interesting properties. They maintain the tree's height to a logarithmic bound. Thus inserting a new element has reasonably good time performance. The median always</strong> winds up in the root of the tree and/or one of its children. Solving this problem using the same approach as <a href="#approach-3-two-heaps-accepted">Approach #3</a> but using a Self-balancing BST seems like a good choice. Except the fact that implementing such a tree is not trivial and prone to errors.</p>
Why reinvent the wheel?</em> Most languages implement a multiset</code> class which emulates such behavior. The only problem remains keeping track of the median elements. That is easily solved with pointers!</strong> <sup id="fnref:note-2"><a class="footnote-ref" href="#fn:note-2" rel="footnote">2</a></sup></p>
We maintain two pointers: one for the lower median element and the other for the higher median element. When the total number of elements is odd, both the pointers point to the same median element (since there is only one median in this case). When the number of elements is even, the pointers point to two consecutive elements, whose mean is the representative median of the input.</p>
Algorithm</strong></p>


Two iterators/pointers lo_median</code> and hi_median</code>, which iterate over the data</code> multiset.</p>
</li>

While adding a number num</code>, three cases arise:</p>

The container is currently empty.</strong> Hence we simply insert num</code> and set both pointers to point to this element.</li>

The container currently holds an odd</strong> number of elements. This means that both the pointers currently point to the same element.</p>

If num</code> is not equal to the current median element, then num</code> goes on either side of it. Whichever side it goes, the size of that part increases and hence the corresponding pointer is updated. For example, if num</code> is less than the median element, the size of the lesser half of input increases by <span class="maths katex-rendered">1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span></span></span></span></span> on inserting num</code>. Thus it makes sense to decrement lo_median</code>.</li>
If num</code> is equal to the current median element, then the action taken is dependent on how num</code> is inserted into data</code>. NOTE:</strong> In our given C++ code example, std::multiset::insert</code> inserts an element after</em> all elements of equal value. Hence we increment hi_median</code>.</li>
</ul>
</li>

The container currently holds an even</strong> number of elements. This means that the pointers currently point to consecutive elements.</p>

If num</code> is a number between both median elements, then num</code> becomes the new median. Both pointers must point to it.</li>
Otherwise, num</code> increases the size of either the lesser or higher half of the input. We update the pointers accordingly. It is important to remember that both the pointers must</em></strong> point to the same element now.</li>
</ul>
</li>
</ol>
</li>

Finding the median is easy! It is simply the mean</strong> of the elements pointed to by the two pointers lo_median</code> and hi_median</code>.</p>
</li>
</ul>
C++</strong></p>
</span>class</span> MedianFinder</span> {</span>
    multiset</span>&lt;</span>int</span>&gt;</span> data</span>;</span>
    multiset</span>&lt;</span>int</span>&gt;::</span>iterator</span> lo_median</span>,</span> hi_median</span>;</span>

public</span>:</span>
    MedianFinder</span>()</span>
        :</span> lo_median</span>(</span>data</span>.</span>end</span>())</span>
        ,</span> hi_median</span>(</span>data</span>.</span>end</span>())</span>
    {</span>
    }</span>

    void</span> addNum</span>(</span>int</span> num</span>)</span>
    {</span>
        const</span> size_t</span> n</span> =</span> data</span>.</span>size</span>();</span>   // store previous size</span>

        data</span>.</span>insert</span>(</span>num</span>);</span>               // insert into multiset</span>

        if</span> (</span>!</span>n</span>)</span> {</span>
            // no elements before, one element now</span>
            lo_median</span> =</span> hi_median</span> =</span> data</span>.</span>begin</span>();</span>
        }</span>
        else</span> if</span> (</span>n</span> &amp;</span> 1</span>)</span> {</span>
            // odd size before (i.e. lo == hi), even size now (i.e. hi = lo + 1)</span>

            if</span> (</span>num</span> &lt;</span> *</span>lo_median</span>)</span>       // num &lt; lo</span>
                lo_median</span>--</span>;</span>
            else</span>                        // num &gt;= hi</span>
                hi_median</span>++</span>;</span>            // insertion at end of equal range</span>
        }</span>
        else</span> {</span>
            // even size before (i.e. hi = lo + 1), odd size now (i.e. lo == hi)</span>

            if</span> (</span>num</span> &gt;</span> *</span>lo_median</span> &amp;&amp;</span> num</span> &lt;</span> *</span>hi_median</span>)</span> {</span>
                lo_median</span>++</span>;</span>                    // num in between lo and hi</span>
                hi_median</span>--</span>;</span>
            }</span>
            else</span> if</span> (</span>num</span> &gt;=</span> *</span>hi_median</span>)</span>         // num inserted after hi</span>
                lo_median</span>++</span>;</span>
            else</span>                                // num &lt;= lo &lt; hi</span>
                lo_median</span> =</span> --</span>hi_median</span>;</span>        // insertion at end of equal range spoils lo</span>
        }</span>
    }</span>

    double</span> findMedian</span>()</span>
    {</span>
        return</span> (</span>*</span>lo_median</span> +</span> *</span>hi_median</span>)</span> *</span> 0.5</span>;</span>
    }</span>
};</span>
</pre></div>


A much shorter (but harder to understand), one</em></strong> pointer</em> version <sup id="fnref:note-3"><a class="footnote-ref" href="#fn:note-3" rel="footnote">3</a></sup> of this solution is given below:</p>
</span>class</span> MedianFinder</span> {</span>
    multiset</span>&lt;</span>int</span>&gt;</span> data</span>;</span>
    multiset</span>&lt;</span>int</span>&gt;::</span>iterator</span> mid</span>;</span>

public</span>:</span>
    MedianFinder</span>()</span>
        :</span> mid</span>(</span>data</span>.</span>end</span>())</span>
    {</span>
    }</span>

    void</span> addNum</span>(</span>int</span> num</span>)</span>
    {</span>
        const</span> int</span> n</span> =</span> data</span>.</span>size</span>();</span>
        data</span>.</span>insert</span>(</span>num</span>);</span>

        if</span> (</span>!</span>n</span>)</span>                                 // first element inserted</span>
            mid</span> =</span> data</span>.</span>begin</span>();</span>
        else</span> if</span> (</span>num</span> &lt;</span> *</span>mid</span>)</span>                    // median is decreased</span>
            mid</span> =</span> (</span>n</span> &amp;</span> 1</span> ?</span> mid</span> :</span> prev</span>(</span>mid</span>));</span>
        else</span>                                    // median is increased</span>
            mid</span> =</span> (</span>n</span> &amp;</span> 1</span> ?</span> next</span>(</span>mid</span>)</span> :</span> mid</span>);</span>
    }</span>

    double</span> findMedian</span>()</span>
    {</span>
        const</span> int</span> n</span> =</span> data</span>.</span>size</span>();</span>
        return</span> (</span>*</span>mid</span> +</span> *</span>next</span>(</span>mid</span>,</span> n</span> %</span> 2</span> -</span> 1</span>))</span> *</span> 0.5</span>;</span>
    }</span>
};</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity: <span class="maths katex-rendered">O</mi>(</mo>l</mi>o</mi>g</mi>(</mo>n</mi>)</mo>)</mo>+</mo>O</mi>(</mo>1</mn>)</mo>≈</mo>O</mi>(</mo>l</mi>o</mi>g</mi>(</mo>n</mi>)</mo>)</mo></mrow><annotation encoding="application/x-tex">O(log(n)) + O(1) approx O(log(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span>(</span><span class="mord mathit">n</span>)</span>)</span>+</span><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span>≈</span><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span>(</span><span class="mord mathit">n</span>)</span>)</span></span></span></span></span>.</p>

Inserting a number takes <span class="maths katex-rendered">O</mi>(</mo>l</mi>o</mi>g</mi>(</mo>n</mi>)</mo>)</mo></mrow><annotation encoding="application/x-tex">O(log(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span>(</span><span class="mord mathit">n</span>)</span>)</span></span></span></span></span> time for a standard multiset</code> scheme. <sup id="fnref:note-4"><a class="footnote-ref" href="#fn:note-4" rel="footnote">4</a></sup></li>
Finding the mean takes constant <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span> time since the median elements are directly accessible from the two pointers.</li>
</ul>
</li>

Space complexity: <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> linear space to hold input in container.</p>
</li>
</ul>

Further Thoughts</h4>
There are so many ways around this problem, that frankly, it is scary. Here are a few more that I came across:</p>


Buckets!</strong> If the numbers in the stream are statistically distributed, then it is easier to keep track of buckets where the median would land, than the entire array. Once you know the correct bucket, simply sort it find the median. If the bucket size is significantly smaller than the size of input processed, this results in huge time saving. <a href="https://leetcode.com/mitbbs8080/">@mitbbs8080</a> has an interesting implementation <a href="https://discuss.leetcode.com/post/32180">here.</a></p>
</li>

Reservoir Sampling.</strong> Following along the lines of using buckets: if the stream is statistically distributed, you can rely on Reservoir Sampling. Basically, if you could maintain just one good bucket (or reservoir</em>) which could hold a representative sample of the entire stream, you could estimate the median of the entire stream from just this one bucket. This means good time and memory performance. Reservoir Sampling lets you do just that. Determining a "good"</strong> size for your reservoir? Now, that's a whole other challenge.</em> A good explanation for this can be found in <a href="http://stackoverflow.com/a/10693752/2844164">this StackOverflow answer.</a></p>
</li>

Segment Trees</strong> are a great data structure if you need to do a lot of insertions or a lot of read queries over a limited range of input values. They allow us to do all such operations fast</em> and in roughly the same amount of time</em>, always.</strong> The only problem is that they are far from trivial to implement. Take a look at my <a href="https://leetcode.com/articles/recursive-approach-segment-trees-range-sum-queries-lazy-propagation/">introductory article on Segment Trees</a> if you are interested.</p>
</li>

Order Statistic Trees</strong> are data structures which seem to be tailor-made for this problem. They have all the nice features of a BST, but also let you find the <span class="maths katex-rendered">k</mi>t</mi>h</mi></mrow></msup></mrow><annotation encoding="application/x-tex">k^{th}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.849108em;"></span><span class="strut bottom" style="height: 0.849108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03148em;">k</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathit mtight">t</span><span class="mord mathit mtight">h</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> order element stored in the tree. They are a pain to implement and no standard interview would require you to code these up. But they are fun to use if they are already implemented in the language of your choice. <sup id="fnref:note-5"><a class="footnote-ref" href="#fn:note-5" rel="footnote">5</a></sup></p>
</li>
</ul>

Analysis written by <a href="https://leetcode.com/babhishek21">@babhishek21</a>.</p>



<li id="fn:note-1">
Priority Queues queue out elements based on a predefined priority. They are an abstract concept and can, as such, be implemented in many different ways. Heaps are an efficient way to implement Priority Queues.&nbsp;<a class="footnote-backref" href="#fnref:note-1" rev="footnote" title="Jump back to footnote 1 in the text">↩</a></p>
</li>
<li id="fn:note-2">
Shout-out to <a href="https://leetcode.com/pharese/">@pharese</a> for this approach.&nbsp;<a class="footnote-backref" href="#fnref:note-2" rev="footnote" title="Jump back to footnote 2 in the text">↩</a></p>
</li>
<li id="fn:note-3">
Inspired from <a href="https://discuss.leetcode.com/topic/74963/o-n-log-k-c-using-multiset-and-updating-middle-iterator/">this post</a> by <a href="https://leetcode.com/stefanpochmann">@StefanPochmann</a>.&nbsp;<a class="footnote-backref" href="#fnref:note-3" rev="footnote" title="Jump back to footnote 3 in the text">↩</a></p>
</li>
<li id="fn:note-4">
<a href="http://en.cppreference.com/w/cpp/container/multiset/insert">Hinting</a> can reduce that to amortized constant <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span> time.&nbsp;<a class="footnote-backref" href="#fnref:note-4" rev="footnote" title="Jump back to footnote 4 in the text">↩</a></p>
</li>
<li id="fn:note-5">
<a href="https://gcc.gnu.org/onlinedocs/libstdc++/manual/policy_based_data_structures_test.html">GNU</strong> libstdc++</code></a> users are in luck! Take a look at <a href="http://stackoverflow.com/a/11228573/2844164">this StackOverflow answer.</a>&nbsp;<a class="footnote-backref" href="#fnref:note-5" rev="footnote" title="Jump back to footnote 5 in the text">↩</a></p>
</li>
</ol>
</div>