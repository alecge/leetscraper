<div class="toc hide">

<a href="#solution">Solution</a>
<a href="#approach-1-brute-force-accepted">Approach #1 Brute Force [Accepted]</a></li>
<a href="#approach-2-using-sorting-accepted">Approach #2 Using Sorting [Accepted]</a></li>
<a href="#approach-3-checking-every-case-accepted">Approach #3 Checking every case [Accepted]</a></li>
</ul>
</li>
</ul>
</div>
Solution</h2>

<h4 id="approach-1-brute-force-accepted">Approach #1 Brute Force [Accepted]</h4>
The idea behind determining whether 4 given set of points constitute a valid square or not is really simple. Firstly, we need to determine if the sides of the qaudrilateral formed by these 4 points are equal. But checking only this won't suffice. Since, this condition will be satisfied even in the case of a rhombus, where all the four sides are equal but the adjacent sides aren't perpendicular to each other. Thus, we also need to check if the lengths of the diagonals formed between the corners of the quadrilateral are equal. If both the conditions are satisfied, then only the given set of points can be deemed appropriate for constituting a square.</p>
Now, the problem arises in determining which pairs of points act as the adjacent points on the square boundary. So, the simplest method is to consider every possible case. For the given 4 points, <span class="maths katex-rendered">[</mo>p</mi>0</mn></msub>,</mo>p</mi>1</mn></msub>,</mo>p</mi>2</mn></msub>,</mo>p</mi>3</mn></msub>]</mo></mrow><annotation encoding="application/x-tex">[p_0, p_1, p_2, p_3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped">[</span><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">0</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>,</span><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>,</span><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>,</span><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>]</span></span></span></span></span>, there are a total of 4! ways in which these points can be arranged to be considered as the square's boundaries. We can generate every possible permutation and check if any permutation leads to the valid square arrangement of points.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> double</span> dist</span>(</span>int</span>[]</span> p1</span>,</span> int</span>[]</span> p2</span>)</span> {</span>
        return</span> (</span>p2</span>[</span>1</span>]</span> -</span> p1</span>[</span>1</span>])</span> *</span> (</span>p2</span>[</span>1</span>]</span> -</span> p1</span>[</span>1</span>])</span> +</span> (</span>p2</span>[</span>0</span>]</span> -</span> p1</span>[</span>0</span>])</span> *</span> (</span>p2</span>[</span>0</span>]</span> -</span> p1</span>[</span>0</span>]);</span>
    }</span>
    public</span> boolean</span> check</span>(</span>int</span>[]</span> p1</span>,</span> int</span>[]</span> p2</span>,</span> int</span>[]</span> p3</span>,</span> int</span>[]</span> p4</span>)</span> {</span>
        return</span> dist</span>(</span>p1</span>,</span>p2</span>)</span> &gt;</span> 0</span> &amp;&amp;</span> dist</span>(</span>p1</span>,</span> p2</span>)</span> ==</span> dist</span>(</span>p2</span>,</span> p3</span>)</span> &amp;&amp;</span> dist</span>(</span>p2</span>,</span> p3</span>)</span> ==</span> dist</span>(</span>p3</span>,</span> p4</span>)</span> &amp;&amp;</span> dist</span>(</span>p3</span>,</span> p4</span>)</span> ==</span> dist</span>(</span>p4</span>,</span> p1</span>)</span> &amp;&amp;</span> dist</span>(</span>p1</span>,</span> p3</span>)</span> ==</span> dist</span>(</span>p2</span>,</span> p4</span>);</span>
    }</span>
    public</span> boolean</span> validSquare</span>(</span>int</span>[]</span> p1</span>,</span> int</span>[]</span> p2</span>,</span> int</span>[]</span> p3</span>,</span> int</span>[]</span> p4</span>)</span> {</span>
        int</span>[][]</span> p</span> =</span> {</span>p1</span>,</span>p2</span>,</span>p3</span>,</span>p4</span>};</span>
        return</span> checkAllPermutations</span>(</span>p</span>,</span> 0</span>);</span>
    }</span>
    boolean</span> checkAllPermutations</span>(</span>int</span>[][]</span> p</span>,</span> int</span> l</span>)</span> {</span>
        if</span> (</span>l</span> ==</span> 4</span>)</span> {</span>
            return</span> check</span>(</span>p</span>[</span>0</span>],</span> p</span>[</span>1</span>],</span> p</span>[</span>2</span>],</span> p</span>[</span>3</span>]);</span>
        }</span> else</span> {</span>
            boolean</span> res</span> =</span> false</span>;</span>
            for</span> (</span>int</span> i</span> =</span> l</span>;</span> i</span> &lt;</span> 4</span>;</span> i</span>++)</span> {</span>
                swap</span>(</span>p</span>,</span> l</span>,</span> i</span>);</span>
                res</span> |=</span> checkAllPermutations</span>(</span>p</span>,</span> l</span> +</span> 1</span>);</span>
                swap</span>(</span>p</span>,</span> l</span>,</span> i</span>);</span>
            }</span>
            return</span> res</span>;</span>
        }</span>
    }</span>
    public</span> void</span> swap</span>(</span>int</span>[][]</span> p</span>,</span> int</span> x</span>,</span> int</span> y</span>)</span> {</span>
        int</span>[]</span> temp</span> =</span> p</span>[</span>x</span>];</span>
        p</span>[</span>x</span>]</span> =</span> p</span>[</span>y</span>];</span>
        p</span>[</span>y</span>]</span> =</span> temp</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. Constant number of permutations(<span class="maths katex-rendered">4</mn>!</mo></mrow><annotation encoding="application/x-tex">4!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">4</span>!</span></span></span></span></span>) are generated.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. Constant space is required.</p>
</li>
</ul>

<h4 id="approach-2-using-sorting-accepted">Approach #2 Using Sorting [Accepted]</h4>
Instead of considering all the permutations of arrangements possible, we can make use of maths to simplify this problem a bit. If we sort the given set of points based on their x-coordinate values, and in the case of a tie, based on their y-coordinate value, we can obtain an arrangement, which directly reflects the arrangement of points on a valid square boundary possible.</p>
Consider the only possible cases as shown in the figure below:</p>
<img alt="Valid_Square" src="../Figures/593_Valid_Square_1.PNG"></p>
In each case, after sorting, we obtain the following conclusion regarding the connections of the points:</p>



<span class="maths katex-rendered">p</mi>0</mn></msub>p</mi>1</mn></msub></mrow><annotation encoding="application/x-tex">p_0p_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">0</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>, <span class="maths katex-rendered">p</mi>1</mn></msub>p</mi>3</mn></msub></mrow><annotation encoding="application/x-tex">p_1p_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>, <span class="maths katex-rendered">p</mi>3</mn></msub>p</mi>2</mn></msub></mrow><annotation encoding="application/x-tex">p_3p_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> and <span class="maths katex-rendered">p</mi>2</mn></msub>p</mi>0</mn></msub></mrow><annotation encoding="application/x-tex">p_2p_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">0</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> form the four sides of any valid square.</p>
</li>


<span class="maths katex-rendered">p</mi>0</mn></msub>p</mi>3</mn></msub></mrow><annotation encoding="application/x-tex">p_0p_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">0</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> and <span class="maths katex-rendered">p</mi>1</mn></msub>p</mi>2</mn></msub></mrow><annotation encoding="application/x-tex">p_1p_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> form the diagonals of the square.</p>
</li>
</ol>
Thus, once the sorting of the points is done, based on the above knowledge, we can directly compare <span class="maths katex-rendered">p</mi>0</mn></msub>p</mi>1</mn></msub></mrow><annotation encoding="application/x-tex">p_0p_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">0</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>, <span class="maths katex-rendered">p</mi>1</mn></msub>p</mi>3</mn></msub></mrow><annotation encoding="application/x-tex">p_1p_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>, <span class="maths katex-rendered">p</mi>3</mn></msub>p</mi>2</mn></msub></mrow><annotation encoding="application/x-tex">p_3p_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> and <span class="maths katex-rendered">p</mi>2</mn></msub>p</mi>0</mn></msub></mrow><annotation encoding="application/x-tex">p_2p_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">0</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> for equality of lengths(corresponding to the sides); and <span class="maths katex-rendered">p</mi>0</mn></msub>p</mi>3</mn></msub></mrow><annotation encoding="application/x-tex">p_0p_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">0</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> and <span class="maths katex-rendered">p</mi>1</mn></msub>p</mi>2</mn></msub></mrow><annotation encoding="application/x-tex">p_1p_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">1</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span><span class="mord mathit">p</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: 0em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> for equality of lengths(corresponding to the diagonals).</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> double</span> dist</span>(</span>int</span>[]</span> p1</span>,</span> int</span>[]</span> p2</span>)</span> {</span>
        return</span> (</span>p2</span>[</span>1</span>]</span> -</span> p1</span>[</span>1</span>])</span> *</span> (</span>p2</span>[</span>1</span>]</span> -</span> p1</span>[</span>1</span>])</span> +</span> (</span>p2</span>[</span>0</span>]</span> -</span> p1</span>[</span>0</span>])</span> *</span> (</span>p2</span>[</span>0</span>]</span> -</span> p1</span>[</span>0</span>]);</span>
    }</span>
    public</span> boolean</span> validSquare</span>(</span>int</span>[]</span> p1</span>,</span> int</span>[]</span> p2</span>,</span> int</span>[]</span> p3</span>,</span> int</span>[]</span> p4</span>)</span> {</span>
        int</span>[][]</span> p</span>={</span>p1</span>,</span>p2</span>,</span>p3</span>,</span>p4</span>};</span>
        Arrays</span>.</span>sort</span>(</span>p</span>,</span> (</span>l1</span>,</span> l2</span>)</span> -&gt;</span> l2</span>[</span>0</span>]</span> ==</span> l1</span>[</span>0</span>]</span> ?</span> l1</span>[</span>1</span>]</span> -</span> l2</span>[</span>1</span>]</span> :</span> l1</span>[</span>0</span>]</span> -</span> l2</span>[</span>0</span>]);</span>
        return</span> dist</span>(</span>p</span>[</span>0</span>],</span> p</span>[</span>1</span>])</span> !=</span> 0</span> &amp;&amp;</span> dist</span>(</span>p</span>[</span>0</span>],</span> p</span>[</span>1</span>])</span> ==</span> dist</span>(</span>p</span>[</span>1</span>],</span> p</span>[</span>3</span>])</span> &amp;&amp;</span> dist</span>(</span>p</span>[</span>1</span>],</span> p</span>[</span>3</span>])</span> ==</span> dist</span>(</span>p</span>[</span>3</span>],</span> p</span>[</span>2</span>])</span> &amp;&amp;</span> dist</span>(</span>p</span>[</span>3</span>],</span> p</span>[</span>2</span>])</span> ==</span> dist</span>(</span>p</span>[</span>2</span>],</span> p</span>[</span>0</span>])</span>   &amp;&amp;</span> dist</span>(</span>p</span>[</span>0</span>],</span>p</span>[</span>3</span>])==</span>dist</span>(</span>p</span>[</span>1</span>],</span>p</span>[</span>2</span>]);</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. Sorting 4 points takes constant time.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. Constant space is required.</p>
</li>
</ul>

<h4 id="approach-3-checking-every-case-accepted">Approach #3 Checking every case [Accepted]</h4>
Algorithm</strong></p>
If we consider all the permutations descripting the arrangement of points as in the brute force approach, we can come up with the following set of 24 arrangements:</p>
<img alt="Valid_Square" src="../Figures/593_Valid_Square_2.PNG"></p>
In this figure, the rows with the same shaded color indicate that the corresponding arrangements lead to the same set of edges and diagonals. Thus, we can see that only three unique cases exist. Thus, instead of generating all the 24 permutations, we check for the equality of edges and diagonals for only the three distinct cases.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> double</span> dist</span>(</span>int</span>[]</span> p1</span>,</span> int</span>[]</span> p2</span>)</span> {</span>
        return</span> (</span>p2</span>[</span>1</span>]</span> -</span> p1</span>[</span>1</span>])</span> *</span> (</span>p2</span>[</span>1</span>]</span> -</span> p1</span>[</span>1</span>])</span> +</span> (</span>p2</span>[</span>0</span>]</span> -</span> p1</span>[</span>0</span>])</span> *</span> (</span>p2</span>[</span>0</span>]</span> -</span> p1</span>[</span>0</span>]);</span>
    }</span>
    public</span> boolean</span> check</span>(</span>int</span>[]</span> p1</span>,</span> int</span>[]</span> p2</span>,</span> int</span>[]</span> p3</span>,</span> int</span>[]</span> p4</span>)</span> {</span>
        return</span> dist</span>(</span>p1</span>,</span>p2</span>)</span> &gt;</span> 0</span> &amp;&amp;</span> dist</span>(</span>p1</span>,</span> p2</span>)</span> ==</span> dist</span>(</span>p2</span>,</span> p3</span>)</span> &amp;&amp;</span> dist</span>(</span>p2</span>,</span> p3</span>)</span> ==</span> dist</span>(</span>p3</span>,</span> p4</span>)</span> &amp;&amp;</span> dist</span>(</span>p3</span>,</span> p4</span>)</span> ==</span> dist</span>(</span>p4</span>,</span> p1</span>)</span> &amp;&amp;</span> dist</span>(</span>p1</span>,</span> p3</span>)</span> ==</span> dist</span>(</span>p2</span>,</span> p4</span>);</span>
    }</span>
    public</span> boolean</span> validSquare</span>(</span>int</span>[]</span> p1</span>,</span> int</span>[]</span> p2</span>,</span> int</span>[]</span> p3</span>,</span> int</span>[]</span> p4</span>)</span> {</span>
        return</span> check</span>(</span>p1</span>,</span> p2</span>,</span> p3</span>,</span> p4</span>)</span> ||</span> check</span>(</span>p1</span>,</span> p3</span>,</span> p2</span>,</span> p4</span>)</span> ||</span> check</span>(</span>p1</span>,</span> p2</span>,</span> p4</span>,</span> p3</span>);</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. A fixed number of comparisons are done.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. No extra space required.</p>
</li>
</ul>

Analysis written by: <a href="https://leetcode.com/vinod23">@vinod23</a></p>