<h4 id="approach-1-insert-into-sorted-structure-accepted">Approach #1: Insert Into Sorted Structure [Accepted]</h4>
Intuition</strong></p>
Let's add flowers in the order they bloom.  When each flower blooms, we check it's neighbors to see if they can satisfy the condition with the current flower.</p>
Algorithm</strong></p>
We'll maintain active</code>, a sorted data structure containing every flower that has currently bloomed.  When we add a flower to active</code>, we should check it's lower and higher neighbors.  If some neighbor satisfies the condition, we know the condition occurred first on this day.</p>
Python</strong></p>
</span>class</span> Solution</span>(</span>object</span>):</span>
    def</span> kEmptySlots</span>(</span>self</span>,</span> flowers</span>,</span> k</span>):</span>
        active</span> =</span> []</span>
        for</span> day</span>,</span> flower</span> in</span> enumerate</span>(</span>flowers</span>,</span> 1</span>):</span>
            i</span> =</span> bisect</span>.</span>bisect</span>(</span>active</span>,</span> flower</span>)</span>
            for</span> neighbor</span> in</span> active</span>[</span>i</span>-</span>(</span>i</span>&gt;</span>0</span>):</span>i</span>+</span>1</span>]:</span>
                if</span> abs</span>(</span>neighbor</span> -</span> flower</span>)</span> -</span> 1</span> ==</span> k</span>:</span>
                    return</span> day</span>
            active</span>.</span>insert</span>(</span>i</span>,</span> flower</span>)</span>
        return</span> -</span>1</span>
</pre></div>


Java</strong></p>
</span>class</span> Solution</span> {</span>
    public</span> int</span> kEmptySlots</span>(</span>int</span>[]</span> flowers</span>,</span> int</span> k</span>)</span> {</span>
        TreeSet</span>&lt;</span>Integer</span>&gt;</span> active</span> =</span> new</span> TreeSet</span>();</span>
        int</span> day</span> =</span> 0</span>;</span>
        for</span> (</span>int</span> flower</span>:</span> flowers</span>)</span> {</span>
            day</span>++;</span>
            active</span>.</span>add</span>(</span>flower</span>);</span>
            Integer</span> lower</span> =</span> active</span>.</span>lower</span>(</span>flower</span>)</span>
            Integer</span> higher</span> =</span> active</span>.</span>higher</span>(</span>flower</span>);</span>
            if</span> (</span>lower</span> !=</span> null</span> &amp;&amp;</span> flower</span> -</span> lower</span> -</span> 1</span> ==</span> k</span> ||</span>
                    higher</span> !=</span> null</span> &amp;&amp;</span> higher</span> -</span> flower</span> -</span> 1</span> ==</span> k</span>)</span>
                return</span> day</span>;</span>
        }</span>
        return</span> -</span>1</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time Complexity (Java): <span class="maths katex-rendered">O</mi>(</mo>N</mi>log</mi>N</mi>)</mo></mrow><annotation encoding="application/x-tex">O(N log N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>lo<span style="margin-right: 0.01389em;">g</span></span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>)</span></span></span></span></span>, where <span class="maths katex-rendered">N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.68333em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10903em;">N</span></span></span></span></span> is the length of flowers</code>.  Every insertion and search is <span class="maths katex-rendered">O</mi>(</mo>log</mi>N</mi>)</mo></mrow><annotation encoding="application/x-tex">O(log N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span>lo<span style="margin-right: 0.01389em;">g</span></span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>)</span></span></span></span></span>.</p>
</li>

Time Complexity (Python): <span class="maths katex-rendered">O</mi>(</mo>N</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>.  As above, except list.insert</code> is <span class="maths katex-rendered">O</mi>(</mo>N</mi>)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>)</span></span></span></span></span>.</p>
</li>

Space Complexity: <span class="maths katex-rendered">O</mi>(</mo>N</mi>)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>)</span></span></span></span></span>, the size of active</code>.</p>
</li>
</ul>

<h4 id="approach-2-sliding-window-accepted">Approach #2: Sliding Window [Accepted]</h4>
Intuition</strong></p>
For each contiguous block ("window") of k</code> positions in the flower bed, we know it satisfies the condition in the problem statement if the minimum blooming date of this window is larger than the blooming date of the left and right neighbors.</p>
Because these windows overlap, we can calculate these minimum queries more efficiently using a sliding window structure.</p>
Algorithm</strong></p>
Let days[x] = i</code> be the time that the flower at position x</code> blooms.  For each window of k</code> days, let's query the minimum of this window in (amortized) constant time using a MinQueue</code>, a data structure built just for this task.  If this minimum is larger than it's two neighbors, then we know this is a place where "k</code> empty slots" occurs, and we record this candidate answer.</p>
To operate a MinQueue</code>, the key invariant is that mins</code> will be an increasing list of candidate answers to the query MinQueue.min</code>.  </p>
For example, if our queue is [1, 3, 6, 2, 4, 8]</code>, then mins</code> will be [1, 2, 4, 8]</code>.  As we MinQueue.popleft</code>, mins</code> will become [2, 4, 8]</code>, then after 3 more popleft</code>'s will become [4, 8]</code>, then after 1 more popleft</code> will become [8]</code>.  </p>
As we MinQueue.append</code>, we should maintain this invariant.  We do it by popping any elements larger than the one we are inserting.  For example, if we appended 5</code> to [1, 3, 6, 2, 4, 8]</code>, then mins</code> which was [1, 2, 4, 8]</code> becomes [1, 2, 4, 5]</code>.</p>
Note that we used a simpler variant of MinQueue</code> that requires every inserted element to be unique to ensure correctness.  Also, the operations are amortized constant time because every element will be inserted and removed exactly once from each queue.</p>
Python</strong></p>
</span>from</span> collections</span> import</span> deque</span>
class</span> MinQueue</span>(</span>deque</span>):</span>
    def</span> __init__</span>(</span>self</span>):</span>
        deque</span>.</span>__init__</span>(</span>self</span>)</span>
        self</span>.</span>mins</span> =</span> deque</span>()</span>

    def</span> append</span>(</span>self</span>,</span> x</span>):</span>
        deque</span>.</span>append</span>(</span>self</span>,</span> x</span>)</span>
        while</span> self</span>.</span>mins</span> and</span> x</span> &lt;</span> self</span>.</span>mins</span>[</span>-</span>1</span>]:</span>
            self</span>.</span>mins</span>.</span>pop</span>()</span>
        self</span>.</span>mins</span>.</span>append</span>(</span>x</span>)</span>

    def</span> popleft</span>(</span>self</span>):</span>
        x</span> =</span> deque</span>.</span>popleft</span>(</span>self</span>)</span>
        if</span> self</span>.</span>mins</span>[</span>0</span>]</span> ==</span> x</span>:</span>
            self</span>.</span>mins</span>.</span>popleft</span>()</span>
        return</span> x</span>

    def</span> min</span>(</span>self</span>):</span>
        return</span> self</span>.</span>mins</span>[</span>0</span>]</span>

class</span> Solution</span>(</span>object</span>):</span>
    def</span> kEmptySlots</span>(</span>self</span>,</span> flowers</span>,</span> k</span>):</span>
        days</span> =</span> [</span>0</span>]</span> *</span> len</span>(</span>flowers</span>)</span>
        for</span> day</span>,</span> position</span> in</span> enumerate</span>(</span>flowers</span>,</span> 1</span>):</span>
            days</span>[</span>position</span> -</span> 1</span>]</span> =</span> day</span>

        window</span> =</span> MinQueue</span>()</span>
        ans</span> =</span> len</span>(</span>days</span>)</span>

        for</span> i</span>,</span> day</span> in</span> enumerate</span>(</span>days</span>):</span>
            window</span>.</span>append</span>(</span>day</span>)</span>
            if</span> k</span> &lt;=</span> i</span> &lt;</span> len</span>(</span>days</span>)</span> -</span> 1</span>:</span>
                window</span>.</span>popleft</span>()</span>
                if</span> k</span> ==</span> 0</span> or</span> days</span>[</span>i</span>-</span>k</span>]</span> &lt;</span> window</span>.</span>min</span>()</span> &gt;</span> days</span>[</span>i</span>+</span>1</span>]:</span>
                    ans</span> =</span> min</span>(</span>ans</span>,</span> max</span>(</span>days</span>[</span>i</span>-</span>k</span>],</span> days</span>[</span>i</span>+</span>1</span>]))</span>

        return</span> ans</span> if</span> ans</span> &lt;=</span> len</span>(</span>days</span>)</span> else</span> -</span>1</span>
</pre></div>


Java</strong></p>
</span>class</span> Solution</span> {</span>
    public</span> int</span> kEmptySlots</span>(</span>int</span>[]</span> flowers</span>,</span> int</span> k</span>)</span> {</span>
        int</span>[]</span> days</span> =</span> new</span> int</span>[</span>flowers</span>.</span>length</span>];</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> flowers</span>.</span>length</span>;</span> i</span>++)</span> {</span>
            days</span>[</span>flowers</span>[</span>i</span>]</span> -</span> 1</span>]</span> =</span> i</span> +</span> 1</span>;</span>
        }</span>

        MinQueue</span>&lt;</span>Integer</span>&gt;</span> window</span> =</span> new</span> MinQueue</span>();</span>
        int</span> ans</span> =</span> days</span>.</span>length</span>;</span>

        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> days</span>.</span>length</span>;</span> i</span>++)</span> {</span>
            int</span> day</span> =</span> days</span>[</span>i</span>];</span>
            window</span>.</span>addLast</span>(</span>day</span>);</span>
            if</span> (</span>k</span> &lt;=</span> i</span> &amp;&amp;</span> i</span> &lt;</span> days</span>.</span>length</span> -</span> 1</span>)</span> {</span>
                window</span>.</span>pollFirst</span>();</span>
                if</span> (</span>k</span> ==</span> 0</span> ||</span> days</span>[</span>i</span>-</span>k</span>]</span> &lt;</span> window</span>.</span>min</span>()</span> &amp;&amp;</span> days</span>[</span>i</span>+</span>1</span>]</span> &lt;</span> window</span>.</span>min</span>())</span> {</span>
                    ans</span> =</span> Math</span>.</span>min</span>(</span>ans</span>,</span> Math</span>.</span>max</span>(</span>days</span>[</span>i</span>-</span>k</span>],</span> days</span>[</span>i</span>+</span>1</span>]));</span>
                }</span>
            }</span>
        }</span>

        return</span> ans</span> &lt;</span> days</span>.</span>length</span> ?</span> ans</span> :</span> -</span>1</span>;</span>
    }</span>
}</span>

class</span> MinQueue</span>&lt;</span>E</span> extends</span> Comparable</span>&lt;</span>E</span>&gt;&gt;</span> extends</span> ArrayDeque</span>&lt;</span>E</span>&gt;</span> {</span>
    Deque</span>&lt;</span>E</span>&gt;</span> mins</span>;</span>

    public</span> MinQueue</span>()</span> {</span>
        mins</span> =</span> new</span> ArrayDeque</span>&lt;</span>E</span>&gt;();</span>
    }</span>

    @Override</span>
    public</span> void</span> addLast</span>(</span>E</span> x</span>)</span> {</span>
        super</span>.</span>addLast</span>(</span>x</span>);</span>
        while</span> (</span>mins</span>.</span>peekLast</span>()</span> !=</span> null</span> &amp;&amp;</span>
                x</span>.</span>compareTo</span>(</span>mins</span>.</span>peekLast</span>())</span> &lt;</span> 0</span>)</span> {</span>
            mins</span>.</span>pollLast</span>();</span>
        }</span>
        mins</span>.</span>addLast</span>(</span>x</span>);</span>
    }</span>

    @Override</span>
    public</span> E</span> pollFirst</span>()</span> {</span>
        E</span> x</span> =</span> super</span>.</span>pollFirst</span>();</span>
        if</span> (</span>x</span> ==</span> mins</span>.</span>peekFirst</span>())</span> mins</span>.</span>pollFirst</span>();</span>
        return</span> x</span>;</span>
    }</span>

    public</span> E</span> min</span>()</span> {</span>
        return</span> mins</span>.</span>peekFirst</span>();</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time Complexity: <span class="maths katex-rendered">O</mi>(</mo>N</mi>)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>)</span></span></span></span></span>, where <span class="maths katex-rendered">N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.68333em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.10903em;">N</span></span></span></span></span> is the length of flowers</code>.  In enumerating through the <span class="maths katex-rendered">O</mi>(</mo>N</mi>)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>)</span></span></span></span></span> outer loop, we do constant work as MinQueue.popleft</code> and MinQueue.min</code> operations are (amortized) constant time.</p>
</li>

Space Complexity: <span class="maths katex-rendered">O</mi>(</mo>N</mi>)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span>)</span></span></span></span></span>, the size of our window</code>.</p>
</li>
</ul>