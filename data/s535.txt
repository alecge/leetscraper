<div class="toc hide">

<a href="#solution">Solution</a>
<a href="#approach-1-brute-force-accepted">Approach #1 Brute Force [Accepted]</a></li>
<a href="#approach-2-using-memorization-accepted">Approach #2 Using Memorization [Accepted]</a></li>
<a href="#approach-3-using-some-math-accepted">Approach #3 Using some Math [Accepted]</a></li>
</ul>
</li>
</ul>
</div>
Solution</h2>

<h4 id="approach-1-brute-force-accepted">Approach #1 Brute Force [Accepted]</h4>
Algorithm</strong></p>
Brute force of this problem is to divide the list into two parts <span class="maths katex-rendered">l</mi>e</mi>f</mi>t</mi></mrow><annotation encoding="application/x-tex">left</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">t</span></span></span></span></span> and <span class="maths katex-rendered">r</mi>i</mi>g</mi>h</mi>t</mi></mrow><annotation encoding="application/x-tex">right</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span></span></span></span></span> and call function for these two parts. We will iterate <span class="maths katex-rendered">i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.65952em;"></span><span class="strut bottom" style="height: 0.65952em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span></span> from <span class="maths katex-rendered">s</mi>t</mi>a</mi>r</mi>t</mi></mrow><annotation encoding="application/x-tex">start</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">t</span></span></span></span></span> to <span class="maths katex-rendered">e</mi>n</mi>d</mi></mrow><annotation encoding="application/x-tex">end</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit">d</span></span></span></span></span> so that <span class="maths katex-rendered">l</mi>e</mi>f</mi>t</mi>=</mo>(</mo>s</mi>t</mi>a</mi>r</mi>t</mi>,</mo>i</mi>)</mo></mrow><annotation encoding="application/x-tex">left=(start,i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">t</span>=</span>(</span><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">t</span>,</span><span class="mord mathit">i</span>)</span></span></span></span></span> and <span class="maths katex-rendered">r</mi>i</mi>g</mi>h</mi>t</mi>=</mo>(</mo>i</mi>+</mo>1</mn>,</mo>e</mi>n</mi>d</mi>)</mo></mrow><annotation encoding="application/x-tex">right=(i+1,end)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span>=</span>(</span><span class="mord mathit">i</span>+</span><span class="mord mathrm">1</span>,</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit">d</span>)</span></span></span></span></span>.</p>

<span class="maths katex-rendered">l</mi>e</mi>f</mi>t</mi></mrow><annotation encoding="application/x-tex">left</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">t</span></span></span></span></span> and <span class="maths katex-rendered">r</mi>i</mi>g</mi>h</mi>t</mi></mrow><annotation encoding="application/x-tex">right</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span></span></span></span></span> parts return their maximum and minimum value and corresponding strings.</p>
Minimum value can be found by dividing minimum of left by maximum of right i.e. <span class="maths katex-rendered">m</mi>i</mi>n</mi>V</mi>a</mi>l</mi>=</mo>l</mi>e</mi>f</mi>t</mi>.</mi>m</mi>i</mi>n</mi>/</mi>r</mi>i</mi>g</mi>h</mi>t</mi>.</mi>m</mi>a</mi>x</mi></mrow><annotation encoding="application/x-tex">minVal=left.min/right.max</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right: 0.22222em;">V</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span>=</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">t</span><span class="mord mathrm">.</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathrm">/</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span><span class="mord mathrm">.</span><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">x</span></span></span></span></span>.</p>
Similarly,Maximum value can be found by dividing maximum of left value by minimum of right value. i.e. <span class="maths katex-rendered">m</mi>a</mi>x</mi>V</mi>a</mi>l</mi>=</mo>l</mi>e</mi>f</mi>t</mi>.</mi>m</mi>a</mi>x</mi>/</mi>r</mi>i</mi>g</mi>h</mi>t</mi>.</mi>m</mi>i</mi>n</mi></mrow><annotation encoding="application/x-tex">maxVal=left.max/right.min</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">x</span><span class="mord mathit" style="margin-right: 0.22222em;">V</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span>=</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right: 0.10764em;">f</span><span class="mord mathit">t</span><span class="mord mathrm">.</span><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">x</span><span class="mord mathrm">/</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span><span class="mord mathrm">.</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">n</span></span></span></span></span>.</p>
Now, how to add parenthesis? As associativity of division operator is from left to right i.e. by default left most divide should be done first, we need not have to add paranthesis to the left part, but we must add parenthesis to the right part.</p>
eg- "2/(3/4)" will be formed as leftPart+"/"+"("+rightPart+")", assuming leftPart is "2" and rightPart is"3/4".</p>
One more point, we also don't require parenthesis to right part when it contains single digit.</p>
eg- "2/3", here left part is "2" and right part is "3" (contains single digit) . 2/(3) is not valid.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> String</span> optimalDivision</span>(</span>int</span>[]</span> nums</span>)</span> {</span>
        T</span> t</span> =</span> optimal</span>(</span>nums</span>,</span> 0</span>,</span> nums</span>.</span>length</span> -</span> 1</span>,</span> ""</span>);</span>
        return</span> t</span>.</span>max_str</span>;</span>
    }</span>
    class</span> T</span> {</span>
        float</span> max_val</span>,</span> min_val</span>;</span>
        String</span> min_str</span>,</span> max_str</span>;</span>
    }</span>
    public</span> T</span> optimal</span>(</span>int</span>[]</span> nums</span>,</span> int</span> start</span>,</span> int</span> end</span>,</span> String</span> res</span>)</span> {</span>
        T</span> t</span> =</span> new</span> T</span>();</span>
        if</span> (</span>start</span> ==</span> end</span>)</span> {</span>
            t</span>.</span>max_val</span> =</span> nums</span>[</span>start</span>];</span>
            t</span>.</span>min_val</span> =</span> nums</span>[</span>start</span>];</span>
            t</span>.</span>min_str</span> =</span> ""</span> +</span> nums</span>[</span>start</span>];</span>
            t</span>.</span>max_str</span> =</span> ""</span> +</span> nums</span>[</span>start</span>];</span>
            return</span> t</span>;</span>
        }</span>
        t</span>.</span>min_val</span> =</span> Float</span>.</span>MAX_VALUE</span>;</span>
        t</span>.</span>max_val</span> =</span> Float</span>.</span>MIN_VALUE</span>;</span>
        t</span>.</span>min_str</span> =</span> t</span>.</span>max_str</span> =</span> ""</span>;</span>
        for</span> (</span>int</span> i</span> =</span> start</span>;</span> i</span> &lt;</span> end</span>;</span> i</span>++)</span> {</span>
            T</span> left</span> =</span> optimal</span>(</span>nums</span>,</span> start</span>,</span> i</span>,</span> ""</span>);</span>
            T</span> right</span> =</span> optimal</span>(</span>nums</span>,</span> i</span> +</span> 1</span>,</span> end</span>,</span> ""</span>);</span>
            if</span> (</span>t</span>.</span>min_val</span> &gt;</span> left</span>.</span>min_val</span> /</span> right</span>.</span>max_val</span>)</span> {</span>
                t</span>.</span>min_val</span> =</span> left</span>.</span>min_val</span> /</span> right</span>.</span>max_val</span>;</span>
                t</span>.</span>min_str</span> =</span> left</span>.</span>min_str</span> +</span> "/"</span> +</span> (</span>i</span> +</span> 1</span> !=</span> end</span> ?</span> "("</span> :</span> ""</span>)</span> +</span> right</span>.</span>max_str</span> +</span> (</span>i</span> +</span> 1</span> !=</span> end</span> ?</span> ")"</span> :</span> ""</span>);</span>
            }</span>
            if</span> (</span>t</span>.</span>max_val</span> &lt;</span> left</span>.</span>max_val</span> /</span> right</span>.</span>min_val</span>)</span> {</span>
                t</span>.</span>max_val</span> =</span> left</span>.</span>max_val</span> /</span> right</span>.</span>min_val</span>;</span>
                t</span>.</span>max_str</span> =</span> left</span>.</span>max_str</span> +</span> "/"</span> +</span> (</span>i</span> +</span> 1</span> !=</span> end</span> ?</span> "("</span> :</span> ""</span>)</span> +</span> right</span>.</span>min_str</span> +</span> (</span>i</span> +</span> 1</span> !=</span> end</span> ?</span> ")"</span> :</span> ""</span>);</span>
            }</span>
        }</span>
        return</span> t</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>!</mo>)</mo></mrow><annotation encoding="application/x-tex">O(n!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>!</span>)</span></span></span></span></span>. Number of permutations of expression after applying brackets will be in <span class="maths katex-rendered">O</mi>(</mo>n</mi>!</mo>)</mo></mrow><annotation encoding="application/x-tex">O(n!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>!</span>)</span></span></span></span></span> where <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the number of items in the list.</p>
</li>

Space complexity: <span class="maths katex-rendered">O</mi>(</mo>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>. Depth of recursion tree will be <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> and each node contains string of maximum length <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>.</p>
</li>
</ul>

<h4 id="approach-2-using-memorization-accepted">Approach #2 Using Memorization [Accepted]</h4>
Algorithm</strong></p>
In the above approach we called optimal function recursively for ever <span class="maths katex-rendered">s</mi>t</mi>a</mi>r</mi>t</mi></mrow><annotation encoding="application/x-tex">start</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.61508em;"></span><span class="strut bottom" style="height: 0.61508em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">t</span></span></span></span></span> and <span class="maths katex-rendered">e</mi>n</mi>d</mi></mrow><annotation encoding="application/x-tex">end</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit">d</span></span></span></span></span>. We can notice that there are many redundant calls in the above approach, we can reduce these calls by using memorization to store the result of different function calls. Here, <span class="maths katex-rendered">m</mi>e</mi>m</mi>o</mi></mrow><annotation encoding="application/x-tex">memo</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">e</span><span class="mord mathit">m</span><span class="mord mathit">o</span></span></span></span></span> array is used for this purpose.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    class</span> T</span> {</span>
        float</span> max_val</span>,</span> min_val</span>;</span>
        String</span> min_str</span>,</span> max_str</span>;</span>
    }</span>
    public</span> String</span> optimalDivision</span>(</span>int</span>[]</span> nums</span>)</span> {</span>
        T</span>[][]</span> memo</span> =</span> new</span> T</span>[</span>nums</span>.</span>length</span>][</span>nums</span>.</span>length</span>];</span>
        T</span> t</span> =</span> optimal</span>(</span>nums</span>,</span> 0</span>,</span> nums</span>.</span>length</span> -</span> 1</span>,</span> ""</span>,</span> memo</span>);</span>
        return</span> t</span>.</span>max_str</span>;</span>
    }</span>
    public</span> T</span> optimal</span>(</span>int</span>[]</span> nums</span>,</span> int</span> start</span>,</span> int</span> end</span>,</span> String</span> res</span>,</span> T</span>[][]</span> memo</span>)</span> {</span>
        if</span> (</span>memo</span>[</span>start</span>][</span>end</span>]</span> !=</span> null</span>)</span>
            return</span> memo</span>[</span>start</span>][</span>end</span>];</span>
        T</span> t</span> =</span> new</span> T</span>();</span>
        if</span> (</span>start</span> ==</span> end</span>)</span> {</span>
            t</span>.</span>max_val</span> =</span> nums</span>[</span>start</span>];</span>
            t</span>.</span>min_val</span> =</span> nums</span>[</span>start</span>];</span>
            t</span>.</span>min_str</span> =</span> ""</span> +</span> nums</span>[</span>start</span>];</span>
            t</span>.</span>max_str</span> =</span> ""</span> +</span> nums</span>[</span>start</span>];</span>
            memo</span>[</span>start</span>][</span>end</span>]</span> =</span> t</span>;</span>
            return</span> t</span>;</span>
        }</span>
        t</span>.</span>min_val</span> =</span> Float</span>.</span>MAX_VALUE</span>;</span>
        t</span>.</span>max_val</span> =</span> Float</span>.</span>MIN_VALUE</span>;</span>
        t</span>.</span>min_str</span> =</span> t</span>.</span>max_str</span> =</span> ""</span>;</span>
        for</span> (</span>int</span> i</span> =</span> start</span>;</span> i</span> &lt;</span> end</span>;</span> i</span>++)</span> {</span>
            T</span> left</span> =</span> optimal</span>(</span>nums</span>,</span> start</span>,</span> i</span>,</span> ""</span>,</span> memo</span>);</span>
            T</span> right</span> =</span> optimal</span>(</span>nums</span>,</span> i</span> +</span> 1</span>,</span> end</span>,</span> ""</span>,</span> memo</span>);</span>
            if</span> (</span>t</span>.</span>min_val</span> &gt;</span> left</span>.</span>min_val</span> /</span> right</span>.</span>max_val</span>)</span> {</span>
                t</span>.</span>min_val</span> =</span> left</span>.</span>min_val</span> /</span> right</span>.</span>max_val</span>;</span>
                t</span>.</span>min_str</span> =</span> left</span>.</span>min_str</span> +</span> "/"</span> +</span> (</span>i</span> +</span> 1</span> !=</span> end</span> ?</span> "("</span> :</span> ""</span>)</span> +</span> right</span>.</span>max_str</span> +</span> (</span>i</span> +</span> 1</span> !=</span> end</span> ?</span> ")"</span> :</span> ""</span>);</span>
            }</span>
            if</span> (</span>t</span>.</span>max_val</span> &lt;</span> left</span>.</span>max_val</span> /</span> right</span>.</span>min_val</span>)</span> {</span>
                t</span>.</span>max_val</span> =</span> left</span>.</span>max_val</span> /</span> right</span>.</span>min_val</span>;</span>
                t</span>.</span>max_str</span> =</span> left</span>.</span>max_str</span> +</span> "/"</span> +</span> (</span>i</span> +</span> 1</span> !=</span> end</span> ?</span> "("</span> :</span> ""</span>)</span> +</span> right</span>.</span>min_str</span> +</span> (</span>i</span> +</span> 1</span> !=</span> end</span> ?</span> ")"</span> :</span> ""</span>);</span>
            }</span>
        }</span>
        memo</span>[</span>start</span>][</span>end</span>]</span> =</span> t</span>;</span>
        return</span> t</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>3</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>. <span class="maths katex-rendered">m</mi>e</mi>m</mi>o</mi></mrow><annotation encoding="application/x-tex">memo</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">e</span><span class="mord mathit">m</span><span class="mord mathit">o</span></span></span></span></span> array of size <span class="maths katex-rendered">n</mi>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.814108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> is filled and filling of each cell of the <span class="maths katex-rendered">m</mi>e</mi>m</mi>o</mi></mrow><annotation encoding="application/x-tex">memo</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">e</span><span class="mord mathit">m</span><span class="mord mathit">o</span></span></span></span></span> array takes <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> time.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>3</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>. <span class="maths katex-rendered">m</mi>e</mi>m</mi>o</mi></mrow><annotation encoding="application/x-tex">memo</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">e</span><span class="mord mathit">m</span><span class="mord mathit">o</span></span></span></span></span> array of size <span class="maths katex-rendered">n</mi>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 0.814108em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> where each cell of array contains string of length <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>.</p>
</li>
</ul>

<h4 id="approach-3-using-some-math-accepted">Approach #3 Using some Math [Accepted]</h4>
Algorithm</strong></p>
Using some simple math we can find the easy solution of this problem. Consider the input in the form of [a,b,c,d], now we have to set priority of
operations to maximize a/b/c/d. We know that to maximize fraction <span class="maths katex-rendered">p</mi>/</mi>q</mi></mrow><annotation encoding="application/x-tex">p/q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="mord mathrm">/</span><span class="mord mathit" style="margin-right: 0.03588em;">q</span></span></span></span></span>, <span class="maths katex-rendered">q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.625em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.03588em;">q</span></span></span></span></span>(denominator) should be minimized. So, to maximize <span class="maths katex-rendered">a</mi>/</mi>b</mi>/</mi>c</mi>/</mi>d</mi></mrow><annotation encoding="application/x-tex">a/b/c/d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mord mathrm">/</span><span class="mord mathit">b</span><span class="mord mathrm">/</span><span class="mord mathit">c</span><span class="mord mathrm">/</span><span class="mord mathit">d</span></span></span></span></span>  we have to first minimize b/c/d. Now our objective turns to minimize the expression b/c/d.</p>
There are two possible combinations of this expression, b/(c/d) and (b/c)/d.</p>
</span>b/(c/d)        (b/c)/d = b/c/d
(b*d)/c        b/(d*c)
d/c            1/(d*c)
</pre></div>


Obviously, <span class="maths katex-rendered">d</mi>/</mi>c</mi>&gt;</mo>1</mn>/</mi>(</mo>d</mi>∗</mo>c</mi>)</mo></mrow><annotation encoding="application/x-tex">d/c &gt; 1/(d*c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">d</span><span class="mord mathrm">/</span><span class="mord mathit">c</span>&gt;</span><span class="mord mathrm">1</span><span class="mord mathrm">/</span>(</span><span class="mord mathit">d</span>∗</span><span class="mord mathit">c</span>)</span></span></span></span></span> for <span class="maths katex-rendered">d</mi>&gt;</mo>1</mn></mrow><annotation encoding="application/x-tex">d&gt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.73354em; vertical-align: -0.0391em;"></span><span class="base textstyle uncramped"><span class="mord mathit">d</span>&gt;</span><span class="mord mathrm">1</span></span></span></span></span>.</p>
You can see that second combination will always be less than first one for numbers greater than <span class="maths katex-rendered">1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span></span></span></span></span>. So, the answer will be a/(b/c/d).
Similarly for expression like a/b/c/d/e/f... answer will be a/(b/c/d/e/f...).</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> String</span> optimalDivision</span>(</span>int</span>[]</span> nums</span>)</span> {</span>
        if</span> (</span>nums</span>.</span>length</span> ==</span> 1</span>)</span>
            return</span> nums</span>[</span>0</span>]</span> +</span> ""</span>;</span>
        if</span> (</span>nums</span>.</span>length</span> ==</span> 2</span>)</span>
            return</span> nums</span>[</span>0</span>]</span> +</span> "/"</span> +</span> nums</span>[</span>1</span>];</span>
        StringBuilder</span> res</span> =</span> new</span> StringBuilder</span>(</span>nums</span>[</span>0</span>]</span> +</span> "/("</span> +</span> nums</span>[</span>1</span>]);</span>
        for</span> (</span>int</span> i</span> =</span> 2</span>;</span> i</span> &lt;</span> nums</span>.</span>length</span>;</span> i</span>++)</span> {</span>
            res</span>.</span>append</span>(</span>"/"</span> +</span> nums</span>[</span>i</span>]);</span>
        }</span>
        res</span>.</span>append</span>(</span>")"</span>);</span>
        return</span> res</span>.</span>toString</span>();</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. Single loop to traverse <span class="maths katex-rendered">n</mi>u</mi>m</mi>s</mi></mrow><annotation encoding="application/x-tex">nums</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mord mathit">s</span></span></span></span></span> array.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. <span class="maths katex-rendered">r</mi>e</mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span></span> variable is used to store the result.</p>
</li>
</ul>

Analysis written by: <a href="https://leetcode.com/vinod23">@vinod23</a></p>