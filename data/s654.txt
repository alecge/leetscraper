<div class="toc hide">

<a href="#approach-1-backtracking-accepted">Approach #1: Backtracking [Accepted]</a></li>
</ul>
</div>
<h4 id="approach-1-backtracking-accepted">Approach #1: Backtracking [Accepted]</h4>
Intuition and Algorithm</strong></p>
There are only 4 cards and only 4 operations that can be performed.  Even when all operations do not commute, that gives us an upper bound of <span class="maths katex-rendered">1</mn>2</mn>∗</mo>6</mn>∗</mo>2</mn>∗</mo>4</mn>∗</mo>4</mn>∗</mo>4</mn>=</mo>9</mn>2</mn>1</mn>6</mn></mrow><annotation encoding="application/x-tex">12 * 6 * 2 * 4 * 4 * 4 = 9216</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.64444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mord mathrm">2</span>∗</span><span class="mord mathrm">6</span>∗</span><span class="mord mathrm">2</span>∗</span><span class="mord mathrm">4</span>∗</span><span class="mord mathrm">4</span>∗</span><span class="mord mathrm">4</span>=</span><span class="mord mathrm">9</span><span class="mord mathrm">2</span><span class="mord mathrm">1</span><span class="mord mathrm">6</span></span></span></span></span> possibilities, which makes it feasible to just try them all.  Specifically, we choose two numbers (with order) in 12 ways and perform one of 4 operations (12 * 4). Then, with 3 remaining numbers, we choose 2 of them and perform one of 4 operations (6 * 4).  Finally we have two numbers left and make a final choice of 2 * 4 possibilities.</p>
We will perform 3 binary operations (+, -, *, /</code> are the operations) on either our numbers or resulting numbers.  Because -</code> and /</code> do not commute, we must be careful to consider both a / b</code> and b / a</code>.</p>
For every way to remove two numbers a, b</code> in our list, and for each possible result they can make, like a+b</code>, a/b</code>, etc., we will recursively solve the problem on this smaller list of numbers.</p>
Python</strong></p>
</span>from</span> operator</span> import</span> truediv</span>,</span> mul</span>,</span> add</span>,</span> sub</span>

class</span> Solution</span>(</span>object</span>):</span>
    def</span> judgePoint24</span>(</span>self</span>,</span> A</span>):</span>
        if</span> not</span> A</span>:</span> return</span> False</span>
        if</span> len</span>(</span>A</span>)</span> ==</span> 1</span>:</span> return</span> abs</span>(</span>A</span>[</span>0</span>]</span> -</span> 24</span>)</span> &lt;</span> 1e-6</span>

        for</span> i</span> in</span> xrange</span>(</span>len</span>(</span>A</span>)):</span>
            for</span> j</span> in</span> xrange</span>(</span>len</span>(</span>A</span>)):</span>
                if</span> i</span> !=</span> j</span>:</span>
                    B</span> =</span> [</span>A</span>[</span>k</span>]</span> for</span> k</span> in</span> xrange</span>(</span>len</span>(</span>A</span>))</span> if</span> i</span> !=</span> k</span> !=</span> j</span>]</span>
                    for</span> op</span> in</span> (</span>truediv</span>,</span> mul</span>,</span> add</span>,</span> sub</span>):</span>
                        if</span> (</span>op</span> is</span> add</span> or</span> op</span> is</span> mul</span>)</span> and</span> j</span> &gt;</span> i</span>:</span> continue</span>
                        if</span> op</span> is</span> not</span> truediv</span> or</span> A</span>[</span>j</span>]:</span>
                            B</span>.</span>append</span>(</span>op</span>(</span>A</span>[</span>i</span>],</span> A</span>[</span>j</span>]))</span>
                            if</span> self</span>.</span>judgePoint24</span>(</span>B</span>):</span> return</span> True</span>
                            B</span>.</span>pop</span>()</span>
        return</span> False</span>
</pre></div>


Java</strong></p>
</span>class</span> Solution</span> {</span>
    public</span> boolean</span> judgePoint24</span>(</span>int</span>[]</span> nums</span>)</span> {</span>
        ArrayList</span> A</span> =</span> new</span> ArrayList</span>&lt;</span>Double</span>&gt;();</span>
        for</span> (</span>int</span> v</span>:</span> nums</span>)</span> A</span>.</span>add</span>((</span>double</span>)</span> v</span>);</span>
        return</span> solve</span>(</span>A</span>);</span>
    }</span>
    private</span> boolean</span> solve</span>(</span>ArrayList</span>&lt;</span>Double</span>&gt;</span> nums</span>)</span> {</span>
        if</span> (</span>nums</span>.</span>size</span>()</span> ==</span> 0</span>)</span> return</span> false</span>;</span>
        if</span> (</span>nums</span>.</span>size</span>()</span> ==</span> 1</span>)</span> return</span> Math</span>.</span>abs</span>(</span>nums</span>.</span>get</span>(</span>0</span>)</span> -</span> 24</span>)</span> &lt;</span> 1e-6</span>;</span>

        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> nums</span>.</span>size</span>();</span> i</span>++)</span> {</span>
            for</span> (</span>int</span> j</span> =</span> 0</span>;</span> j</span> &lt;</span> nums</span>.</span>size</span>();</span> j</span>++)</span> {</span>
                if</span> (</span>i</span> !=</span> j</span>)</span> {</span>
                    ArrayList</span>&lt;</span>Double</span>&gt;</span> nums2</span> =</span> new</span> ArrayList</span>&lt;</span>Double</span>&gt;();</span>
                    for</span> (</span>int</span> k</span> =</span> 0</span>;</span> k</span> &lt;</span> nums</span>.</span>size</span>();</span> k</span>++)</span> if</span> (</span>k</span> !=</span> i</span> &amp;&amp;</span> k</span> !=</span> j</span>)</span> {</span>
                        nums2</span>.</span>add</span>(</span>nums</span>.</span>get</span>(</span>k</span>));</span>
                    }</span>
                    for</span> (</span>int</span> k</span> =</span> 0</span>;</span> k</span> &lt;</span> 4</span>;</span> k</span>++)</span> {</span>
                        if</span> (</span>k</span> &lt;</span> 2</span> &amp;&amp;</span> j</span> &gt;</span> i</span>)</span> continue</span>;</span>
                        if</span> (</span>k</span> ==</span> 0</span>)</span> nums2</span>.</span>add</span>(</span>nums</span>.</span>get</span>(</span>i</span>)</span> +</span> nums</span>.</span>get</span>(</span>j</span>));</span>
                        if</span> (</span>k</span> ==</span> 1</span>)</span> nums2</span>.</span>add</span>(</span>nums</span>.</span>get</span>(</span>i</span>)</span> *</span> nums</span>.</span>get</span>(</span>j</span>));</span>
                        if</span> (</span>k</span> ==</span> 2</span>)</span> nums2</span>.</span>add</span>(</span>nums</span>.</span>get</span>(</span>i</span>)</span> -</span> nums</span>.</span>get</span>(</span>j</span>));</span>
                        if</span> (</span>k</span> ==</span> 3</span>)</span> {</span>
                            if</span> (</span>nums</span>.</span>get</span>(</span>j</span>)</span> !=</span> 0</span>)</span> {</span>
                                nums2</span>.</span>add</span>(</span>nums</span>.</span>get</span>(</span>i</span>)</span> /</span> nums</span>.</span>get</span>(</span>j</span>));</span>
                            }</span> else</span> {</span>
                                continue</span>;</span>
                            }</span>
                        }</span>
                        if</span> (</span>solve</span>(</span>nums2</span>))</span> return</span> true</span>;</span>
                        nums2</span>.</span>remove</span>(</span>nums2</span>.</span>size</span>()</span> -</span> 1</span>);</span>
                    }</span>
                }</span>
            }</span>
        }</span>
        return</span> false</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time Complexity: <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>.  There is a hard limit of 9216 possibilities, and we do <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span> work for each of them.</p>
</li>

Space Complexity: <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>.  Our intermediate arrays are at most 4 elements, and the number made is bounded by an <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span> factor.</p>
</li>
</ul>