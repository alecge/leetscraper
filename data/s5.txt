<div class="toc hide">

<a href="#summary">Summary</a></li>
<a href="#solution">Solution</a>
<a href="#approach-1-longest-common-substring-accepted">Approach #1 (Longest Common Substring) [Accepted]</a></li>
<a href="#approach-2-brute-force-time-limit-exceeded">Approach #2 (Brute Force) [Time Limit Exceeded]</a></li>
<a href="#approach-3-dynamic-programming-accepted">Approach #3 (Dynamic Programming) [Accepted]</a></li>
<a href="#approach-4-expand-around-center-accepted">Approach #4 (Expand Around Center) [Accepted]</a></li>
<a href="#approach-5-manachers-algorithm-accepted">Approach #5 (Manacher's Algorithm) [Accepted]</a></li>
</ul>
</li>
</ul>
</div>
Summary</h2>
This article is for intermediate readers. It introduces the following ideas:
Palindrome, Dynamic Programming and String Manipulation. Make sure you understand what a palindrome means. A palindrome is a string which reads the same in both directions. For example, <span class="maths katex-rendered">”</mi>a</mi>b</mi>a</mi>”</mi></mtext></mrow><annotation encoding="application/x-tex">textrm{''aba''}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">”aba”</span></span></span></span></span></span> is a palindome, <span class="maths katex-rendered">”</mi>a</mi>b</mi>c</mi>”</mi></mtext></mrow><annotation encoding="application/x-tex">textrm{''abc''}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">”abc”</span></span></span></span></span></span> is not.</p>
Solution</h2>

<h4 id="approach-1-longest-common-substring-accepted">Approach #1 (Longest Common Substring) [Accepted]</h4>
Common mistake</strong></p>
Some people will be tempted to come up with a quick solution, which is unfortunately flawed (however can be corrected easily):</p>

Reverse <span class="maths katex-rendered">S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.68333em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span></span></span></span></span> and become <span class="maths katex-rendered">S</mi>′</mi></mrow></msup></mrow><annotation encoding="application/x-tex">S'</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.751892em;"></span><span class="strut bottom" style="height: 0.751892em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathrm mtight">′</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>. Find the longest common substring between <span class="maths katex-rendered">S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.68333em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span></span></span></span></span> and <span class="maths katex-rendered">S</mi>′</mi></mrow></msup></mrow><annotation encoding="application/x-tex">S'</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.751892em;"></span><span class="strut bottom" style="height: 0.751892em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathrm mtight">′</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span>, which must also be the longest palindromic substring.</p>
</blockquote>
This seemed to work, let’s see some examples below.</p>
For example, <span class="maths katex-rendered">S</mi>=</mo>”</mi>c</mi>a</mi>b</mi>a</mi>"</mi></mtext></mrow><annotation encoding="application/x-tex">S = textrm{''caba"}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span>=</span><span class="mord text textstyle uncramped"><span class="mord mathrm">”caba"</span></span></span></span></span></span>, <span class="maths katex-rendered">S</mi>′</mi></mrow></msup>=</mo>”</mi>a</mi>b</mi>a</mi>c</mi>”</mi></mtext></mrow><annotation encoding="application/x-tex">S' = textrm{''abac''}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.751892em;"></span><span class="strut bottom" style="height: 0.751892em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathrm mtight">′</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>=</span><span class="mord text textstyle uncramped"><span class="mord mathrm">”abac”</span></span></span></span></span></span>.</p>
The longest common substring between <span class="maths katex-rendered">S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.68333em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span></span></span></span></span> and <span class="maths katex-rendered">S</mi>′</mi></mrow></msup></mrow><annotation encoding="application/x-tex">S'</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.751892em;"></span><span class="strut bottom" style="height: 0.751892em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathrm mtight">′</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> is <span class="maths katex-rendered">”</mi>a</mi>b</mi>a</mi>”</mi></mtext></mrow><annotation encoding="application/x-tex">textrm{''aba''}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">”aba”</span></span></span></span></span></span>, which is the answer.</p>
Let’s try another example: <span class="maths katex-rendered">S</mi>=</mo>”</mi>a</mi>b</mi>a</mi>c</mi>d</mi>f</mi>g</mi>d</mi>c</mi>a</mi>b</mi>a</mi>”</mi></mtext></mrow><annotation encoding="application/x-tex">S = textrm{''abacdfgdcaba''}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span>=</span><span class="mord text textstyle uncramped"><span class="mord mathrm">”abacdfgdcaba”</span></span></span></span></span></span>, <span class="maths katex-rendered">S</mi>′</mi></mrow></msup>=</mo>”</mi>a</mi>b</mi>a</mi>c</mi>d</mi>g</mi>f</mi>d</mi>c</mi>a</mi>b</mi>a</mi>”</mi></mtext></mrow><annotation encoding="application/x-tex">S' = textrm{''abacdgfdcaba''}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.751892em;"></span><span class="strut bottom" style="height: 0.946332em; vertical-align: -0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathrm mtight">′</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>=</span><span class="mord text textstyle uncramped"><span class="mord mathrm">”abacdgfdcaba”</span></span></span></span></span></span>.</p>
The longest common substring between <span class="maths katex-rendered">S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.68333em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span></span></span></span></span> and <span class="maths katex-rendered">S</mi>′</mi></mrow></msup></mrow><annotation encoding="application/x-tex">S'</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.751892em;"></span><span class="strut bottom" style="height: 0.751892em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathrm mtight">′</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span></span></span></span></span> is <span class="maths katex-rendered">”</mi>a</mi>b</mi>a</mi>c</mi>d</mi>”</mi></mtext></mrow><annotation encoding="application/x-tex">textrm{''abacd''}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">”abacd”</span></span></span></span></span></span>. Clearly, this is not a valid palindrome.</p>
Algorithm</strong></p>
We could see that the longest common substring method fails when there exists a reversed copy of a non-palindromic substring in some other part of <span class="maths katex-rendered">S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.68333em;"></span><span class="strut bottom" style="height: 0.68333em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.05764em;">S</span></span></span></span></span>. To rectify this, each time we find a longest common substring candidate, we check if the substring’s indices are the same as the reversed substring’s original indices. If it is, then we attempt to update the longest palindrome found so far; if not, we skip this and find the next candidate.</p>
This gives us an <span class="maths katex-rendered">O</mi>(</mo>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span> Dynamic Programming solution which uses <span class="maths katex-rendered">O</mi>(</mo>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span> space (could be improved to use <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> space). Please read more about Longest Common Substring <a href="http://en.wikipedia.org/wiki/Longest_common_substring">here</a>.</p>

<h4 id="approach-2-brute-force-time-limit-exceeded">Approach #2 (Brute Force) [Time Limit Exceeded]</h4>
The obvious brute force solution is to pick all possible starting and ending positions for a substring, and verify if it is a palindrome.</p>
Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>3</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>.
Assume that <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> is the length of the input string, there are a total of <span class="maths katex-rendered">(</mo>n</mi></mrow>2</mn></mrow></mfrac>)</mo></mrow>=</mo>n</mi>(</mo>n</mi>−</mo>1</mn>)</mo></mrow>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">binom{n}{2} = frac{n(n-1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 1.01em;"></span><span class="strut bottom" style="height: 1.36001em; vertical-align: -0.35001em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="mopen style-wrap reset-textstyle textstyle uncramped" style="top: 0em;"><span class="delimsizing size1">(</span></span><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span></span><span class="" style="top: -0.444em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathit mtight">n</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose style-wrap reset-textstyle textstyle uncramped" style="top: 0em;"><span class="delimsizing size1">)</span></span></span>=</span><span class="mord reset-textstyle textstyle uncramped"><span class="mopen sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathit mtight">n</span><span class="mopen mtight">(</span><span class="mord mathit mtight">n</span><span class="mbin mtight">−</span><span class="mord mathrm mtight">1</span><span class="mclose mtight">)</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></span> such substrings (excluding the trivial solution where a character itself is a palindrome). Since verifying each substring takes <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> time, the run time complexity is <span class="maths katex-rendered">O</mi>(</mo>n</mi>3</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">3</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>.</p>
</li>
</ul>

<h4 id="approach-3-dynamic-programming-accepted">Approach #3 (Dynamic Programming) [Accepted]</h4>
To improve over the brute force solution, we first observe how we can avoid unnecessary re-computation while validating palindromes. Consider the case <span class="maths katex-rendered">”</mi>a</mi>b</mi>a</mi>b</mi>a</mi>”</mi></mtext></mrow><annotation encoding="application/x-tex">textrm{''ababa''}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">”ababa”</span></span></span></span></span></span>. If we already knew that <span class="maths katex-rendered">”</mi>b</mi>a</mi>b</mi>”</mi></mtext></mrow><annotation encoding="application/x-tex">textrm{''bab''}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">”bab”</span></span></span></span></span></span> is a palindrome, it is obvious that <span class="maths katex-rendered">”</mi>a</mi>b</mi>a</mi>b</mi>a</mi>”</mi></mtext></mrow><annotation encoding="application/x-tex">textrm{''ababa''}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">”ababa”</span></span></span></span></span></span> must be a palindrome since the two left and right end letters are the same.</p>
We define <span class="maths katex-rendered">P</mi>(</mo>i</mi>,</mo>j</mi>)</mo></mrow><annotation encoding="application/x-tex">P(i,j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.13889em;">P</span>(</span><span class="mord mathit">i</span>,</span><span class="mord mathit" style="margin-right: 0.05724em;">j</span>)</span></span></span></span></span> as following:</p>

<p class="maths katex-rendered">
P(i,j) =
     begin{cases}
       text{true,} &amp;quadtext{if the substring } S_i dots S_j text{ is a palindrome}
       text{false,} &amp;quadtext{otherwise.} 
     end{cases}
</span><script type="math/tex; mode=display">
P(i,j) =
     begin{cases}
       text{true,} &quadtext{if the substring } S_i dots S_j text{ is a palindrome}
       text{false,} &quadtext{otherwise.} 
     end{cases}
</script></p>
</p>
Therefore,</p>

<p class="maths katex-rendered">P</mi>(</mo>i</mi>,</mo>j</mi>)</mo>=</mo>(</mo>P</mi>(</mo>i</mi>+</mo>1</mn>,</mo>j</mi>−</mo>1</mn>)</mo>&nbsp;</mtext>a</mi>n</mi>d</mi>&nbsp;</mtext></mtext>S</mi>i</mi></msub>=</mo>=</mo>S</mi>j</mi></msub>)</mo></mrow><annotation encoding="application/x-tex">
P(i, j) = ( P(i+1, j-1) text{ and } S_i == S_j )
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1.03611em; vertical-align: -0.286108em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right: 0.13889em;">P</span>(</span><span class="mord mathit">i</span>,</span><span class="mord mathit" style="margin-right: 0.05724em;">j</span>)</span>=</span>(</span><span class="mord mathit" style="margin-right: 0.13889em;">P</span>(</span><span class="mord mathit">i</span>+</span><span class="mord mathrm">1</span>,</span><span class="mord mathit" style="margin-right: 0.05724em;">j</span>−</span><span class="mord mathrm">1</span>)</span><span class="mord text displaystyle textstyle uncramped"><span class="mord mathrm">&nbsp;and&nbsp;</span></span><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathit mtight">i</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>=</span>=</span><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathit mtight" style="margin-right: 0.05724em;">j</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span></p>
</p>
The base cases are:</p>

<p class="maths katex-rendered">P</mi>(</mo>i</mi>,</mo>i</mi>)</mo>=</mo>t</mi>r</mi>u</mi>e</mi></mrow><annotation encoding="application/x-tex">
P(i, i) = true
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right: 0.13889em;">P</span>(</span><span class="mord mathit">i</span>,</span><span class="mord mathit">i</span>)</span>=</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">u</span><span class="mord mathit">e</span></span></span></span></span></p>
</p>

<p class="maths katex-rendered">P</mi>(</mo>i</mi>,</mo>i</mi>+</mo>1</mn>)</mo>=</mo>(</mo>S</mi>i</mi></msub>=</mo>=</mo>S</mi>i</mi>+</mo>1</mn></mrow></msub>)</mo></mrow><annotation encoding="application/x-tex">
P(i, i+1) = ( S_i == S_{i+1} )
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right: 0.13889em;">P</span>(</span><span class="mord mathit">i</span>,</span><span class="mord mathit">i</span>+</span><span class="mord mathrm">1</span>)</span>=</span>(</span><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord mathit mtight">i</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>=</span>=</span><span class="mord mathit" style="margin-right: 0.05764em;">S</span><span class="" style="top: 0.15em; margin-right: 0.05em; margin-left: -0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord scriptstyle cramped mtight"><span class="mord mathit mtight">i</span><span class="mbin mtight">+</span><span class="mord mathrm mtight">1</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span></p>
</p>
This yields a straight forward DP solution, which we first initialize the one and two letters palindromes, and work our way up finding all three letters palindromes, and so on...</p>
Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>.
This gives us a runtime complexity of <span class="maths katex-rendered">O</mi>(</mo>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>.
It uses <span class="maths katex-rendered">O</mi>(</mo>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span> space to store the table.</p>
</li>
</ul>
Additional Exercise</strong></p>
Could you improve the above space complexity further and how?</p>

<h4 id="approach-4-expand-around-center-accepted">Approach #4 (Expand Around Center) [Accepted]</h4>
In fact, we could solve it in <span class="maths katex-rendered">O</mi>(</mo>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span> time using only constant space.</p>
We observe that a palindrome mirrors around its center. Therefore, a palindrome can be expanded from its center, and there are only <span class="maths katex-rendered">2</mn>n</mi>−</mo>1</mn></mrow><annotation encoding="application/x-tex">2n - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathit">n</span>−</span><span class="mord mathrm">1</span></span></span></span></span> such centers.</p>
You might be asking why there are <span class="maths katex-rendered">2</mn>n</mi>−</mo>1</mn></mrow><annotation encoding="application/x-tex">2n - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.64444em;"></span><span class="strut bottom" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathit">n</span>−</span><span class="mord mathrm">1</span></span></span></span></span> but not <span class="maths katex-rendered">n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span></span> centers? The reason is the center of a palindrome can be in between two letters. Such palindromes have even number of letters (such as <span class="maths katex-rendered">”</mi>a</mi>b</mi>b</mi>a</mi>”</mi></mtext></mrow><annotation encoding="application/x-tex">textrm{''abba''}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">”abba”</span></span></span></span></span></span>) and its center are between the two <span class="maths katex-rendered">’</mi>b</mi>’</mi></mtext></mrow><annotation encoding="application/x-tex">textrm{'b'}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.69444em;"></span><span class="strut bottom" style="height: 0.69444em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord text textstyle uncramped"><span class="mord mathrm">’b’</span></span></span></span></span></span>s.</p>
</span>public</span> String</span> longestPalindrome</span>(</span>String</span> s</span>)</span> {</span>
    int</span> start</span> =</span> 0</span>,</span> end</span> =</span> 0</span>;</span>
    for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> s</span>.</span>length</span>();</span> i</span>++)</span> {</span>
        int</span> len1</span> =</span> expandAroundCenter</span>(</span>s</span>,</span> i</span>,</span> i</span>);</span>
        int</span> len2</span> =</span> expandAroundCenter</span>(</span>s</span>,</span> i</span>,</span> i</span> +</span> 1</span>);</span>
        int</span> len</span> =</span> Math</span>.</span>max</span>(</span>len1</span>,</span> len2</span>);</span>
        if</span> (</span>len</span> &gt;</span> end</span> -</span> start</span>)</span> {</span>
            start</span> =</span> i</span> -</span> (</span>len</span> -</span> 1</span>)</span> /</span> 2</span>;</span>
            end</span> =</span> i</span> +</span> len</span> /</span> 2</span>;</span>
        }</span>
    }</span>
    return</span> s</span>.</span>substring</span>(</span>start</span>,</span> end</span> +</span> 1</span>);</span>
}</span>

private</span> int</span> expandAroundCenter</span>(</span>String</span> s</span>,</span> int</span> left</span>,</span> int</span> right</span>)</span> {</span>
    int</span> L</span> =</span> left</span>,</span> R</span> =</span> right</span>;</span>
    while</span> (</span>L</span> &gt;=</span> 0</span> &amp;&amp;</span> R</span> &lt;</span> s</span>.</span>length</span>()</span> &amp;&amp;</span> s</span>.</span>charAt</span>(</span>L</span>)</span> ==</span> s</span>.</span>charAt</span>(</span>R</span>))</span> {</span>
        L</span>--;</span>
        R</span>++;</span>
    }</span>
    return</span> R</span> -</span> L</span> -</span> 1</span>;</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>.
Since expanding a palindrome around its center could take <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> time, the overall complexity is <span class="maths katex-rendered">O</mi>(</mo>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>.</p>
</li>
</ul>
<h4 id="approach-5-manachers-algorithm-accepted">Approach #5 (Manacher's Algorithm) [Accepted]</h4>
There is even an <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span> algorithm called Manacher's algorithm, explained <a href="http://articles.leetcode.com/longest-palindromic-substring-part-ii/">here in detail</a>. However, it is a non-trivial algorithm, and no one expects you to come up with this algorithm in a 45 minutes coding session. But, please go ahead and understand it, I promise it will be a lot of fun.</p>