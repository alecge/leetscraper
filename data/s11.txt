<div class="toc hide">

<a href="#summary">Summary</a></li>
<a href="#solution">Solution</a>
<a href="#approach-1-brute-force-time-limit-exceeded">Approach #1 Brute Force [Time Limit Exceeded]</a></li>
<a href="#approach-2-two-pointer-approach-accepted">Approach #2 (Two Pointer Approach) [Accepted]</a></li>
</ul>
</li>
</ul>
</div>
Summary</h2>
We have to maximize the Area that can be formed between the vertical lines using the shorter line as length and the distance between the lines as the width of the rectangle forming the area.</p>
Solution</h2>

<h4 id="approach-1-brute-force-time-limit-exceeded">Approach #1 Brute Force [Time Limit Exceeded]</h4>
Algorithm</strong></p>
In this case, we will simply consider the area for every possible pair of the lines and find out the maximum area out of those. </p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> int</span> maxArea</span>(</span>int</span>[]</span> height</span>)</span> {</span>
        int</span> maxarea</span> =</span> 0</span>;</span>
        for</span> (</span>int</span> i</span> =</span> 0</span>;</span> i</span> &lt;</span> height</span>.</span>length</span>;</span> i</span>++)</span>
            for</span> (</span>int</span> j</span> =</span> i</span> +</span> 1</span>;</span> j</span> &lt;</span> height</span>.</span>length</span>;</span> j</span>++)</span>
                maxarea</span> =</span> Math</span>.</span>max</span>(</span>maxarea</span>,</span> Math</span>.</span>min</span>(</span>height</span>[</span>i</span>],</span> height</span>[</span>j</span>])</span> *</span> (</span>j</span> -</span> i</span>));</span>
        return</span> maxarea</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>

Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>2</mn></msup>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.814108em;"></span><span class="strut bottom" style="height: 1.06411em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span><span class="" style="top: -0.363em; margin-right: 0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord mathrm mtight">2</span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span></span>)</span></span></span></span></span>. Calculating area for all <span class="maths katex-rendered">n</mi>(</mo>n</mi>−</mo>1</mn>)</mo></mrow>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">frac{n(n-1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 1.01em;"></span><span class="strut bottom" style="height: 1.355em; vertical-align: -0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="mopen sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="" style="top: 0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle cramped mtight"><span class="mord scriptstyle cramped mtight"><span class="mord mathrm mtight">2</span></span></span></span><span class="" style="top: -0.23em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span class="" style="top: -0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped mtight"><span class="mord scriptstyle uncramped mtight"><span class="mord mathit mtight">n</span><span class="mopen mtight">(</span><span class="mord mathit mtight">n</span><span class="mbin mtight">−</span><span class="mord mathrm mtight">1</span><span class="mclose mtight">)</span></span></span></span><span class="fontsize-ensurer reset-size5 size5"><span class="" style="font-size: 0em;">​</span></span>​</span></span></span><span class="mclose sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></span> height pairs.</li>
Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. Constant extra space is used.</li>
</ul>

<h4 id="approach-2-two-pointer-approach-accepted">Approach #2 (Two Pointer Approach) [Accepted]</h4>
Algorithm</strong></p>
The intuition behind this approach is that the area formed between the lines will always be limited by the height of the shorter line. Further, the farther the lines, the more will be the area obtained.</p>
We take two pointers, one at the beginning and one at the end of the array constituting the length of the lines. Futher, we maintain a variable <span class="maths katex-rendered">m</mi>a</mi>x</mi>a</mi>r</mi>e</mi>a</mi></mrow><annotation encoding="application/x-tex">maxarea</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">x</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">a</span></span></span></span></span> to store the maximum area obtained till now. At every step, we find out the area formed between them, update <span class="maths katex-rendered">m</mi>a</mi>x</mi>a</mi>r</mi>e</mi>a</mi></mrow><annotation encoding="application/x-tex">maxarea</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.43056em;"></span><span class="strut bottom" style="height: 0.43056em; vertical-align: 0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">x</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right: 0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">a</span></span></span></span></span> and move the pointer pointing to the shorter line towards the other end by one step.</p>
The algorithm can be better understood by looking at the example below:</p>
</span>1 8 6 2 5 4 8 3 7
</pre></div>


<!--![Water_Continer](https://leetcode.com/media/original_images/11_Container_Water.gif)-->

!?!../Documents/11_Container_Water.json:1000,563!?!</p>
How this approach works?</p>
Initially we consider the area constituting the exterior most lines. Now, to maximize the area, we need to consider the area between the lines of larger lengths. If we try to move the pointer at the longer line inwards, we won't gain any increase in area, since it is limited by the shorter line. But moving the shorter line's pointer could turn out to be beneficial, as per the same argument, despite the reduction in the width. This is done since a relatively longer line obtained by moving the shorter line's pointer might overcome the reduction in area caused by the width reduction.</p>
For further clarification click <a href="https://discuss.leetcode.com/topic/3462/yet-another-way-to-see-what-happens-in-the-o-n-algorithm">here</a> and for the proof click <a href="https://discuss.leetcode.com/topic/503/anyone-who-has-a-o-n-algorithm/2">here</a>.</p>
Java</strong></p>
</span>public</span> class</span> Solution</span> {</span>
    public</span> int</span> maxArea</span>(</span>int</span>[]</span> height</span>)</span> {</span>
        int</span> maxarea</span> =</span> 0</span>,</span> l</span> =</span> 0</span>,</span> r</span> =</span> height</span>.</span>length</span> -</span> 1</span>;</span>
        while</span> (</span>l</span> &lt;</span> r</span>)</span> {</span>
            maxarea</span> =</span> Math</span>.</span>max</span>(</span>maxarea</span>,</span> Math</span>.</span>min</span>(</span>height</span>[</span>l</span>],</span> height</span>[</span>r</span>])</span> *</span> (</span>r</span> -</span> l</span>));</span>
            if</span> (</span>height</span>[</span>l</span>]</span> &lt;</span> height</span>[</span>r</span>])</span>
                l</span>++;</span>
            else</span>
                r</span>--;</span>
        }</span>
        return</span> maxarea</span>;</span>
    }</span>
}</span>
</pre></div>


Complexity Analysis</strong></p>


Time complexity : <span class="maths katex-rendered">O</mi>(</mo>n</mi>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathit">n</span>)</span></span></span></span></span>. Single pass.</p>
</li>

Space complexity : <span class="maths katex-rendered">O</mi>(</mo>1</mn>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height: 0.75em;"></span><span class="strut bottom" style="height: 1em; vertical-align: -0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right: 0.02778em;">O</span>(</span><span class="mord mathrm">1</span>)</span></span></span></span></span>. Constant space is used.</p>
</li>
</ul>
Analysis written by: <a href="https://leetcode.com/vinod23">@vinod23</a></p>